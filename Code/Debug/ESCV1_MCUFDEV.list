
ESCV1_MCUFDEV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d94  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08004e54  08004e54  00014e54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ecc  08004ecc  0002003c  2**0
                  CONTENTS
  4 .ARM          00000000  08004ecc  08004ecc  0002003c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004ecc  08004ecc  0002003c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ecc  08004ecc  00014ecc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ed0  08004ed0  00014ed0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000003c  20000000  08004ed4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b4  2000003c  08004f10  0002003c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f0  08004f10  000202f0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a4c7  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a7b  00000000  00000000  0002a52b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a40  00000000  00000000  0002bfa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000978  00000000  00000000  0002c9e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001297e  00000000  00000000  0002d360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b5b4  00000000  00000000  0003fcde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006d9e5  00000000  00000000  0004b292  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000b8c77  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002478  00000000  00000000  000b8ccc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000003c 	.word	0x2000003c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004e3c 	.word	0x08004e3c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000040 	.word	0x20000040
 8000104:	08004e3c 	.word	0x08004e3c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003f8:	f000 fd6e 	bl	8000ed8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003fc:	f000 f80f 	bl	800041e <SystemClock_Config>
  //For some reason swapping DMA_Init() with ADC_Init() allows DMA to request ADC to sample continuously.
  //Otherwise, in their original positions, ADC only performs ONE single conversion... or maybe DMA only grabs the data once.
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000400:	f000 fa14 	bl	800082c <MX_GPIO_Init>
  MX_DMA_Init();
 8000404:	f000 f9f4 	bl	80007f0 <MX_DMA_Init>
  MX_TIM3_Init();
 8000408:	f000 f958 	bl	80006bc <MX_TIM3_Init>
  MX_TIM1_Init();
 800040c:	f000 f852 	bl	80004b4 <MX_TIM1_Init>
  MX_TIM6_Init();
 8000410:	f000 f9b2 	bl	8000778 <MX_TIM6_Init>
  MX_TIM2_Init();
 8000414:	f000 f8fe 	bl	8000614 <MX_TIM2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  maincpp();			//Call main.cpp's main function.
 8000418:	f004 fc0c 	bl	8004c34 <maincpp>
  while (1)
 800041c:	e7fe      	b.n	800041c <main+0x28>

0800041e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800041e:	b590      	push	{r4, r7, lr}
 8000420:	b091      	sub	sp, #68	; 0x44
 8000422:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000424:	2410      	movs	r4, #16
 8000426:	193b      	adds	r3, r7, r4
 8000428:	0018      	movs	r0, r3
 800042a:	2330      	movs	r3, #48	; 0x30
 800042c:	001a      	movs	r2, r3
 800042e:	2100      	movs	r1, #0
 8000430:	f004 fcfc 	bl	8004e2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000434:	003b      	movs	r3, r7
 8000436:	0018      	movs	r0, r3
 8000438:	2310      	movs	r3, #16
 800043a:	001a      	movs	r2, r3
 800043c:	2100      	movs	r1, #0
 800043e:	f004 fcf5 	bl	8004e2c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000442:	0021      	movs	r1, r4
 8000444:	187b      	adds	r3, r7, r1
 8000446:	2202      	movs	r2, #2
 8000448:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800044a:	187b      	adds	r3, r7, r1
 800044c:	2201      	movs	r2, #1
 800044e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000450:	187b      	adds	r3, r7, r1
 8000452:	2210      	movs	r2, #16
 8000454:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000456:	187b      	adds	r3, r7, r1
 8000458:	2202      	movs	r2, #2
 800045a:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800045c:	187b      	adds	r3, r7, r1
 800045e:	2200      	movs	r2, #0
 8000460:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000462:	187b      	adds	r3, r7, r1
 8000464:	22a0      	movs	r2, #160	; 0xa0
 8000466:	0392      	lsls	r2, r2, #14
 8000468:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800046a:	187b      	adds	r3, r7, r1
 800046c:	2200      	movs	r2, #0
 800046e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000470:	187b      	adds	r3, r7, r1
 8000472:	0018      	movs	r0, r3
 8000474:	f001 f9f4 	bl	8001860 <HAL_RCC_OscConfig>
 8000478:	1e03      	subs	r3, r0, #0
 800047a:	d001      	beq.n	8000480 <SystemClock_Config+0x62>
  {
    Error_Handler();
 800047c:	f000 fac6 	bl	8000a0c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000480:	003b      	movs	r3, r7
 8000482:	2207      	movs	r2, #7
 8000484:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000486:	003b      	movs	r3, r7
 8000488:	2202      	movs	r2, #2
 800048a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800048c:	003b      	movs	r3, r7
 800048e:	2200      	movs	r2, #0
 8000490:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000492:	003b      	movs	r3, r7
 8000494:	2200      	movs	r2, #0
 8000496:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000498:	003b      	movs	r3, r7
 800049a:	2101      	movs	r1, #1
 800049c:	0018      	movs	r0, r3
 800049e:	f001 fcf9 	bl	8001e94 <HAL_RCC_ClockConfig>
 80004a2:	1e03      	subs	r3, r0, #0
 80004a4:	d001      	beq.n	80004aa <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80004a6:	f000 fab1 	bl	8000a0c <Error_Handler>
  }
}
 80004aa:	46c0      	nop			; (mov r8, r8)
 80004ac:	46bd      	mov	sp, r7
 80004ae:	b011      	add	sp, #68	; 0x44
 80004b0:	bd90      	pop	{r4, r7, pc}
	...

080004b4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b092      	sub	sp, #72	; 0x48
 80004b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004ba:	2340      	movs	r3, #64	; 0x40
 80004bc:	18fb      	adds	r3, r7, r3
 80004be:	0018      	movs	r0, r3
 80004c0:	2308      	movs	r3, #8
 80004c2:	001a      	movs	r2, r3
 80004c4:	2100      	movs	r1, #0
 80004c6:	f004 fcb1 	bl	8004e2c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80004ca:	2324      	movs	r3, #36	; 0x24
 80004cc:	18fb      	adds	r3, r7, r3
 80004ce:	0018      	movs	r0, r3
 80004d0:	231c      	movs	r3, #28
 80004d2:	001a      	movs	r2, r3
 80004d4:	2100      	movs	r1, #0
 80004d6:	f004 fca9 	bl	8004e2c <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80004da:	1d3b      	adds	r3, r7, #4
 80004dc:	0018      	movs	r0, r3
 80004de:	2320      	movs	r3, #32
 80004e0:	001a      	movs	r2, r3
 80004e2:	2100      	movs	r1, #0
 80004e4:	f004 fca2 	bl	8004e2c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80004e8:	4b47      	ldr	r3, [pc, #284]	; (8000608 <MX_TIM1_Init+0x154>)
 80004ea:	4a48      	ldr	r2, [pc, #288]	; (800060c <MX_TIM1_Init+0x158>)
 80004ec:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80004ee:	4b46      	ldr	r3, [pc, #280]	; (8000608 <MX_TIM1_Init+0x154>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004f4:	4b44      	ldr	r3, [pc, #272]	; (8000608 <MX_TIM1_Init+0x154>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1024-1;
 80004fa:	4b43      	ldr	r3, [pc, #268]	; (8000608 <MX_TIM1_Init+0x154>)
 80004fc:	4a44      	ldr	r2, [pc, #272]	; (8000610 <MX_TIM1_Init+0x15c>)
 80004fe:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000500:	4b41      	ldr	r3, [pc, #260]	; (8000608 <MX_TIM1_Init+0x154>)
 8000502:	2200      	movs	r2, #0
 8000504:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000506:	4b40      	ldr	r3, [pc, #256]	; (8000608 <MX_TIM1_Init+0x154>)
 8000508:	2200      	movs	r2, #0
 800050a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800050c:	4b3e      	ldr	r3, [pc, #248]	; (8000608 <MX_TIM1_Init+0x154>)
 800050e:	2200      	movs	r2, #0
 8000510:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000512:	4b3d      	ldr	r3, [pc, #244]	; (8000608 <MX_TIM1_Init+0x154>)
 8000514:	0018      	movs	r0, r3
 8000516:	f001 fecd 	bl	80022b4 <HAL_TIM_PWM_Init>
 800051a:	1e03      	subs	r3, r0, #0
 800051c:	d001      	beq.n	8000522 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800051e:	f000 fa75 	bl	8000a0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000522:	2140      	movs	r1, #64	; 0x40
 8000524:	187b      	adds	r3, r7, r1
 8000526:	2200      	movs	r2, #0
 8000528:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800052a:	187b      	adds	r3, r7, r1
 800052c:	2200      	movs	r2, #0
 800052e:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000530:	187a      	adds	r2, r7, r1
 8000532:	4b35      	ldr	r3, [pc, #212]	; (8000608 <MX_TIM1_Init+0x154>)
 8000534:	0011      	movs	r1, r2
 8000536:	0018      	movs	r0, r3
 8000538:	f003 fbfe 	bl	8003d38 <HAL_TIMEx_MasterConfigSynchronization>
 800053c:	1e03      	subs	r3, r0, #0
 800053e:	d001      	beq.n	8000544 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000540:	f000 fa64 	bl	8000a0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000544:	2124      	movs	r1, #36	; 0x24
 8000546:	187b      	adds	r3, r7, r1
 8000548:	2260      	movs	r2, #96	; 0x60
 800054a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 200;
 800054c:	187b      	adds	r3, r7, r1
 800054e:	22c8      	movs	r2, #200	; 0xc8
 8000550:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000552:	187b      	adds	r3, r7, r1
 8000554:	2200      	movs	r2, #0
 8000556:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000558:	187b      	adds	r3, r7, r1
 800055a:	2200      	movs	r2, #0
 800055c:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800055e:	187b      	adds	r3, r7, r1
 8000560:	2200      	movs	r2, #0
 8000562:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000564:	187b      	adds	r3, r7, r1
 8000566:	2200      	movs	r2, #0
 8000568:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800056a:	187b      	adds	r3, r7, r1
 800056c:	2200      	movs	r2, #0
 800056e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000570:	1879      	adds	r1, r7, r1
 8000572:	4b25      	ldr	r3, [pc, #148]	; (8000608 <MX_TIM1_Init+0x154>)
 8000574:	2200      	movs	r2, #0
 8000576:	0018      	movs	r0, r3
 8000578:	f002 fc48 	bl	8002e0c <HAL_TIM_PWM_ConfigChannel>
 800057c:	1e03      	subs	r3, r0, #0
 800057e:	d001      	beq.n	8000584 <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 8000580:	f000 fa44 	bl	8000a0c <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8000584:	2124      	movs	r1, #36	; 0x24
 8000586:	187b      	adds	r3, r7, r1
 8000588:	2200      	movs	r2, #0
 800058a:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800058c:	1879      	adds	r1, r7, r1
 800058e:	4b1e      	ldr	r3, [pc, #120]	; (8000608 <MX_TIM1_Init+0x154>)
 8000590:	2204      	movs	r2, #4
 8000592:	0018      	movs	r0, r3
 8000594:	f002 fc3a 	bl	8002e0c <HAL_TIM_PWM_ConfigChannel>
 8000598:	1e03      	subs	r3, r0, #0
 800059a:	d001      	beq.n	80005a0 <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 800059c:	f000 fa36 	bl	8000a0c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80005a0:	2324      	movs	r3, #36	; 0x24
 80005a2:	18f9      	adds	r1, r7, r3
 80005a4:	4b18      	ldr	r3, [pc, #96]	; (8000608 <MX_TIM1_Init+0x154>)
 80005a6:	2208      	movs	r2, #8
 80005a8:	0018      	movs	r0, r3
 80005aa:	f002 fc2f 	bl	8002e0c <HAL_TIM_PWM_ConfigChannel>
 80005ae:	1e03      	subs	r3, r0, #0
 80005b0:	d001      	beq.n	80005b6 <MX_TIM1_Init+0x102>
  {
    Error_Handler();
 80005b2:	f000 fa2b 	bl	8000a0c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80005b6:	1d3b      	adds	r3, r7, #4
 80005b8:	2200      	movs	r2, #0
 80005ba:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80005bc:	1d3b      	adds	r3, r7, #4
 80005be:	2200      	movs	r2, #0
 80005c0:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80005c2:	1d3b      	adds	r3, r7, #4
 80005c4:	2200      	movs	r2, #0
 80005c6:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80005c8:	1d3b      	adds	r3, r7, #4
 80005ca:	2200      	movs	r2, #0
 80005cc:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80005ce:	1d3b      	adds	r3, r7, #4
 80005d0:	2200      	movs	r2, #0
 80005d2:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80005d4:	1d3b      	adds	r3, r7, #4
 80005d6:	2280      	movs	r2, #128	; 0x80
 80005d8:	0192      	lsls	r2, r2, #6
 80005da:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80005dc:	1d3b      	adds	r3, r7, #4
 80005de:	2200      	movs	r2, #0
 80005e0:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80005e2:	1d3a      	adds	r2, r7, #4
 80005e4:	4b08      	ldr	r3, [pc, #32]	; (8000608 <MX_TIM1_Init+0x154>)
 80005e6:	0011      	movs	r1, r2
 80005e8:	0018      	movs	r0, r3
 80005ea:	f003 fc03 	bl	8003df4 <HAL_TIMEx_ConfigBreakDeadTime>
 80005ee:	1e03      	subs	r3, r0, #0
 80005f0:	d001      	beq.n	80005f6 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80005f2:	f000 fa0b 	bl	8000a0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80005f6:	4b04      	ldr	r3, [pc, #16]	; (8000608 <MX_TIM1_Init+0x154>)
 80005f8:	0018      	movs	r0, r3
 80005fa:	f000 fb95 	bl	8000d28 <HAL_TIM_MspPostInit>

}
 80005fe:	46c0      	nop			; (mov r8, r8)
 8000600:	46bd      	mov	sp, r7
 8000602:	b012      	add	sp, #72	; 0x48
 8000604:	bd80      	pop	{r7, pc}
 8000606:	46c0      	nop			; (mov r8, r8)
 8000608:	20000184 	.word	0x20000184
 800060c:	40012c00 	.word	0x40012c00
 8000610:	000003ff 	.word	0x000003ff

08000614 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b086      	sub	sp, #24
 8000618:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800061a:	2308      	movs	r3, #8
 800061c:	18fb      	adds	r3, r7, r3
 800061e:	0018      	movs	r0, r3
 8000620:	2310      	movs	r3, #16
 8000622:	001a      	movs	r2, r3
 8000624:	2100      	movs	r1, #0
 8000626:	f004 fc01 	bl	8004e2c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800062a:	003b      	movs	r3, r7
 800062c:	0018      	movs	r0, r3
 800062e:	2308      	movs	r3, #8
 8000630:	001a      	movs	r2, r3
 8000632:	2100      	movs	r1, #0
 8000634:	f004 fbfa 	bl	8004e2c <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000638:	4b1e      	ldr	r3, [pc, #120]	; (80006b4 <MX_TIM2_Init+0xa0>)
 800063a:	2280      	movs	r2, #128	; 0x80
 800063c:	05d2      	lsls	r2, r2, #23
 800063e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48000-1;
 8000640:	4b1c      	ldr	r3, [pc, #112]	; (80006b4 <MX_TIM2_Init+0xa0>)
 8000642:	4a1d      	ldr	r2, [pc, #116]	; (80006b8 <MX_TIM2_Init+0xa4>)
 8000644:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000646:	4b1b      	ldr	r3, [pc, #108]	; (80006b4 <MX_TIM2_Init+0xa0>)
 8000648:	2200      	movs	r2, #0
 800064a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 800064c:	4b19      	ldr	r3, [pc, #100]	; (80006b4 <MX_TIM2_Init+0xa0>)
 800064e:	2264      	movs	r2, #100	; 0x64
 8000650:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000652:	4b18      	ldr	r3, [pc, #96]	; (80006b4 <MX_TIM2_Init+0xa0>)
 8000654:	2200      	movs	r2, #0
 8000656:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000658:	4b16      	ldr	r3, [pc, #88]	; (80006b4 <MX_TIM2_Init+0xa0>)
 800065a:	2200      	movs	r2, #0
 800065c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800065e:	4b15      	ldr	r3, [pc, #84]	; (80006b4 <MX_TIM2_Init+0xa0>)
 8000660:	0018      	movs	r0, r3
 8000662:	f001 fd3b 	bl	80020dc <HAL_TIM_Base_Init>
 8000666:	1e03      	subs	r3, r0, #0
 8000668:	d001      	beq.n	800066e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800066a:	f000 f9cf 	bl	8000a0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800066e:	2108      	movs	r1, #8
 8000670:	187b      	adds	r3, r7, r1
 8000672:	2280      	movs	r2, #128	; 0x80
 8000674:	0152      	lsls	r2, r2, #5
 8000676:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000678:	187a      	adds	r2, r7, r1
 800067a:	4b0e      	ldr	r3, [pc, #56]	; (80006b4 <MX_TIM2_Init+0xa0>)
 800067c:	0011      	movs	r1, r2
 800067e:	0018      	movs	r0, r3
 8000680:	f002 fc8a 	bl	8002f98 <HAL_TIM_ConfigClockSource>
 8000684:	1e03      	subs	r3, r0, #0
 8000686:	d001      	beq.n	800068c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000688:	f000 f9c0 	bl	8000a0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800068c:	003b      	movs	r3, r7
 800068e:	2200      	movs	r2, #0
 8000690:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000692:	003b      	movs	r3, r7
 8000694:	2200      	movs	r2, #0
 8000696:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000698:	003a      	movs	r2, r7
 800069a:	4b06      	ldr	r3, [pc, #24]	; (80006b4 <MX_TIM2_Init+0xa0>)
 800069c:	0011      	movs	r1, r2
 800069e:	0018      	movs	r0, r3
 80006a0:	f003 fb4a 	bl	8003d38 <HAL_TIMEx_MasterConfigSynchronization>
 80006a4:	1e03      	subs	r3, r0, #0
 80006a6:	d001      	beq.n	80006ac <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80006a8:	f000 f9b0 	bl	8000a0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80006ac:	46c0      	nop			; (mov r8, r8)
 80006ae:	46bd      	mov	sp, r7
 80006b0:	b006      	add	sp, #24
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	2000013c 	.word	0x2000013c
 80006b8:	0000bb7f 	.word	0x0000bb7f

080006bc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b086      	sub	sp, #24
 80006c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006c2:	2310      	movs	r3, #16
 80006c4:	18fb      	adds	r3, r7, r3
 80006c6:	0018      	movs	r0, r3
 80006c8:	2308      	movs	r3, #8
 80006ca:	001a      	movs	r2, r3
 80006cc:	2100      	movs	r1, #0
 80006ce:	f004 fbad 	bl	8004e2c <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 80006d2:	003b      	movs	r3, r7
 80006d4:	0018      	movs	r0, r3
 80006d6:	2310      	movs	r3, #16
 80006d8:	001a      	movs	r2, r3
 80006da:	2100      	movs	r1, #0
 80006dc:	f004 fba6 	bl	8004e2c <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80006e0:	4b22      	ldr	r3, [pc, #136]	; (800076c <MX_TIM3_Init+0xb0>)
 80006e2:	4a23      	ldr	r2, [pc, #140]	; (8000770 <MX_TIM3_Init+0xb4>)
 80006e4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80006e6:	4b21      	ldr	r3, [pc, #132]	; (800076c <MX_TIM3_Init+0xb0>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006ec:	4b1f      	ldr	r3, [pc, #124]	; (800076c <MX_TIM3_Init+0xb0>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80006f2:	4b1e      	ldr	r3, [pc, #120]	; (800076c <MX_TIM3_Init+0xb0>)
 80006f4:	4a1f      	ldr	r2, [pc, #124]	; (8000774 <MX_TIM3_Init+0xb8>)
 80006f6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006f8:	4b1c      	ldr	r3, [pc, #112]	; (800076c <MX_TIM3_Init+0xb0>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006fe:	4b1b      	ldr	r3, [pc, #108]	; (800076c <MX_TIM3_Init+0xb0>)
 8000700:	2200      	movs	r2, #0
 8000702:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8000704:	4b19      	ldr	r3, [pc, #100]	; (800076c <MX_TIM3_Init+0xb0>)
 8000706:	0018      	movs	r0, r3
 8000708:	f001 ffda 	bl	80026c0 <HAL_TIM_IC_Init>
 800070c:	1e03      	subs	r3, r0, #0
 800070e:	d001      	beq.n	8000714 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000710:	f000 f97c 	bl	8000a0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000714:	2110      	movs	r1, #16
 8000716:	187b      	adds	r3, r7, r1
 8000718:	2200      	movs	r2, #0
 800071a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800071c:	187b      	adds	r3, r7, r1
 800071e:	2200      	movs	r2, #0
 8000720:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000722:	187a      	adds	r2, r7, r1
 8000724:	4b11      	ldr	r3, [pc, #68]	; (800076c <MX_TIM3_Init+0xb0>)
 8000726:	0011      	movs	r1, r2
 8000728:	0018      	movs	r0, r3
 800072a:	f003 fb05 	bl	8003d38 <HAL_TIMEx_MasterConfigSynchronization>
 800072e:	1e03      	subs	r3, r0, #0
 8000730:	d001      	beq.n	8000736 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8000732:	f000 f96b 	bl	8000a0c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8000736:	003b      	movs	r3, r7
 8000738:	220a      	movs	r2, #10
 800073a:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800073c:	003b      	movs	r3, r7
 800073e:	2201      	movs	r2, #1
 8000740:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000742:	003b      	movs	r3, r7
 8000744:	2200      	movs	r2, #0
 8000746:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 8000748:	003b      	movs	r3, r7
 800074a:	2200      	movs	r2, #0
 800074c:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800074e:	0039      	movs	r1, r7
 8000750:	4b06      	ldr	r3, [pc, #24]	; (800076c <MX_TIM3_Init+0xb0>)
 8000752:	2200      	movs	r2, #0
 8000754:	0018      	movs	r0, r3
 8000756:	f002 fab5 	bl	8002cc4 <HAL_TIM_IC_ConfigChannel>
 800075a:	1e03      	subs	r3, r0, #0
 800075c:	d001      	beq.n	8000762 <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 800075e:	f000 f955 	bl	8000a0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000762:	46c0      	nop			; (mov r8, r8)
 8000764:	46bd      	mov	sp, r7
 8000766:	b006      	add	sp, #24
 8000768:	bd80      	pop	{r7, pc}
 800076a:	46c0      	nop			; (mov r8, r8)
 800076c:	200000f4 	.word	0x200000f4
 8000770:	40000400 	.word	0x40000400
 8000774:	0000ffff 	.word	0x0000ffff

08000778 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800077e:	003b      	movs	r3, r7
 8000780:	0018      	movs	r0, r3
 8000782:	2308      	movs	r3, #8
 8000784:	001a      	movs	r2, r3
 8000786:	2100      	movs	r1, #0
 8000788:	f004 fb50 	bl	8004e2c <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800078c:	4b15      	ldr	r3, [pc, #84]	; (80007e4 <MX_TIM6_Init+0x6c>)
 800078e:	4a16      	ldr	r2, [pc, #88]	; (80007e8 <MX_TIM6_Init+0x70>)
 8000790:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000792:	4b14      	ldr	r3, [pc, #80]	; (80007e4 <MX_TIM6_Init+0x6c>)
 8000794:	2200      	movs	r2, #0
 8000796:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000798:	4b12      	ldr	r3, [pc, #72]	; (80007e4 <MX_TIM6_Init+0x6c>)
 800079a:	2200      	movs	r2, #0
 800079c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 800079e:	4b11      	ldr	r3, [pc, #68]	; (80007e4 <MX_TIM6_Init+0x6c>)
 80007a0:	4a12      	ldr	r2, [pc, #72]	; (80007ec <MX_TIM6_Init+0x74>)
 80007a2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007a4:	4b0f      	ldr	r3, [pc, #60]	; (80007e4 <MX_TIM6_Init+0x6c>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80007aa:	4b0e      	ldr	r3, [pc, #56]	; (80007e4 <MX_TIM6_Init+0x6c>)
 80007ac:	0018      	movs	r0, r3
 80007ae:	f001 fc95 	bl	80020dc <HAL_TIM_Base_Init>
 80007b2:	1e03      	subs	r3, r0, #0
 80007b4:	d001      	beq.n	80007ba <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80007b6:	f000 f929 	bl	8000a0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007ba:	003b      	movs	r3, r7
 80007bc:	2200      	movs	r2, #0
 80007be:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007c0:	003b      	movs	r3, r7
 80007c2:	2200      	movs	r2, #0
 80007c4:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80007c6:	003a      	movs	r2, r7
 80007c8:	4b06      	ldr	r3, [pc, #24]	; (80007e4 <MX_TIM6_Init+0x6c>)
 80007ca:	0011      	movs	r1, r2
 80007cc:	0018      	movs	r0, r3
 80007ce:	f003 fab3 	bl	8003d38 <HAL_TIMEx_MasterConfigSynchronization>
 80007d2:	1e03      	subs	r3, r0, #0
 80007d4:	d001      	beq.n	80007da <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 80007d6:	f000 f919 	bl	8000a0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80007da:	46c0      	nop			; (mov r8, r8)
 80007dc:	46bd      	mov	sp, r7
 80007de:	b002      	add	sp, #8
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	46c0      	nop			; (mov r8, r8)
 80007e4:	200000ac 	.word	0x200000ac
 80007e8:	40001000 	.word	0x40001000
 80007ec:	0000ffff 	.word	0x0000ffff

080007f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007f6:	4b0c      	ldr	r3, [pc, #48]	; (8000828 <MX_DMA_Init+0x38>)
 80007f8:	695a      	ldr	r2, [r3, #20]
 80007fa:	4b0b      	ldr	r3, [pc, #44]	; (8000828 <MX_DMA_Init+0x38>)
 80007fc:	2101      	movs	r1, #1
 80007fe:	430a      	orrs	r2, r1
 8000800:	615a      	str	r2, [r3, #20]
 8000802:	4b09      	ldr	r3, [pc, #36]	; (8000828 <MX_DMA_Init+0x38>)
 8000804:	695b      	ldr	r3, [r3, #20]
 8000806:	2201      	movs	r2, #1
 8000808:	4013      	ands	r3, r2
 800080a:	607b      	str	r3, [r7, #4]
 800080c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 1, 0);
 800080e:	2200      	movs	r2, #0
 8000810:	2101      	movs	r1, #1
 8000812:	200b      	movs	r0, #11
 8000814:	f000 fc94 	bl	8001140 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 8000818:	200b      	movs	r0, #11
 800081a:	f000 fca6 	bl	800116a <HAL_NVIC_EnableIRQ>

}
 800081e:	46c0      	nop			; (mov r8, r8)
 8000820:	46bd      	mov	sp, r7
 8000822:	b002      	add	sp, #8
 8000824:	bd80      	pop	{r7, pc}
 8000826:	46c0      	nop			; (mov r8, r8)
 8000828:	40021000 	.word	0x40021000

0800082c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800082c:	b590      	push	{r4, r7, lr}
 800082e:	b08b      	sub	sp, #44	; 0x2c
 8000830:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000832:	2414      	movs	r4, #20
 8000834:	193b      	adds	r3, r7, r4
 8000836:	0018      	movs	r0, r3
 8000838:	2314      	movs	r3, #20
 800083a:	001a      	movs	r2, r3
 800083c:	2100      	movs	r1, #0
 800083e:	f004 faf5 	bl	8004e2c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000842:	4b6e      	ldr	r3, [pc, #440]	; (80009fc <MX_GPIO_Init+0x1d0>)
 8000844:	695a      	ldr	r2, [r3, #20]
 8000846:	4b6d      	ldr	r3, [pc, #436]	; (80009fc <MX_GPIO_Init+0x1d0>)
 8000848:	2180      	movs	r1, #128	; 0x80
 800084a:	0309      	lsls	r1, r1, #12
 800084c:	430a      	orrs	r2, r1
 800084e:	615a      	str	r2, [r3, #20]
 8000850:	4b6a      	ldr	r3, [pc, #424]	; (80009fc <MX_GPIO_Init+0x1d0>)
 8000852:	695a      	ldr	r2, [r3, #20]
 8000854:	2380      	movs	r3, #128	; 0x80
 8000856:	031b      	lsls	r3, r3, #12
 8000858:	4013      	ands	r3, r2
 800085a:	613b      	str	r3, [r7, #16]
 800085c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800085e:	4b67      	ldr	r3, [pc, #412]	; (80009fc <MX_GPIO_Init+0x1d0>)
 8000860:	695a      	ldr	r2, [r3, #20]
 8000862:	4b66      	ldr	r3, [pc, #408]	; (80009fc <MX_GPIO_Init+0x1d0>)
 8000864:	2180      	movs	r1, #128	; 0x80
 8000866:	03c9      	lsls	r1, r1, #15
 8000868:	430a      	orrs	r2, r1
 800086a:	615a      	str	r2, [r3, #20]
 800086c:	4b63      	ldr	r3, [pc, #396]	; (80009fc <MX_GPIO_Init+0x1d0>)
 800086e:	695a      	ldr	r2, [r3, #20]
 8000870:	2380      	movs	r3, #128	; 0x80
 8000872:	03db      	lsls	r3, r3, #15
 8000874:	4013      	ands	r3, r2
 8000876:	60fb      	str	r3, [r7, #12]
 8000878:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800087a:	4b60      	ldr	r3, [pc, #384]	; (80009fc <MX_GPIO_Init+0x1d0>)
 800087c:	695a      	ldr	r2, [r3, #20]
 800087e:	4b5f      	ldr	r3, [pc, #380]	; (80009fc <MX_GPIO_Init+0x1d0>)
 8000880:	2180      	movs	r1, #128	; 0x80
 8000882:	0289      	lsls	r1, r1, #10
 8000884:	430a      	orrs	r2, r1
 8000886:	615a      	str	r2, [r3, #20]
 8000888:	4b5c      	ldr	r3, [pc, #368]	; (80009fc <MX_GPIO_Init+0x1d0>)
 800088a:	695a      	ldr	r2, [r3, #20]
 800088c:	2380      	movs	r3, #128	; 0x80
 800088e:	029b      	lsls	r3, r3, #10
 8000890:	4013      	ands	r3, r2
 8000892:	60bb      	str	r3, [r7, #8]
 8000894:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000896:	4b59      	ldr	r3, [pc, #356]	; (80009fc <MX_GPIO_Init+0x1d0>)
 8000898:	695a      	ldr	r2, [r3, #20]
 800089a:	4b58      	ldr	r3, [pc, #352]	; (80009fc <MX_GPIO_Init+0x1d0>)
 800089c:	2180      	movs	r1, #128	; 0x80
 800089e:	02c9      	lsls	r1, r1, #11
 80008a0:	430a      	orrs	r2, r1
 80008a2:	615a      	str	r2, [r3, #20]
 80008a4:	4b55      	ldr	r3, [pc, #340]	; (80009fc <MX_GPIO_Init+0x1d0>)
 80008a6:	695a      	ldr	r2, [r3, #20]
 80008a8:	2380      	movs	r3, #128	; 0x80
 80008aa:	02db      	lsls	r3, r3, #11
 80008ac:	4013      	ands	r3, r2
 80008ae:	607b      	str	r3, [r7, #4]
 80008b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|Timer1_OUT_Pin, GPIO_PIN_RESET);
 80008b2:	2390      	movs	r3, #144	; 0x90
 80008b4:	05db      	lsls	r3, r3, #23
 80008b6:	2200      	movs	r2, #0
 80008b8:	2130      	movs	r1, #48	; 0x30
 80008ba:	0018      	movs	r0, r3
 80008bc:	f000 ff97 	bl	80017ee <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CLow_GPIO_Port, CLow_Pin, GPIO_PIN_SET);
 80008c0:	2380      	movs	r3, #128	; 0x80
 80008c2:	021b      	lsls	r3, r3, #8
 80008c4:	484e      	ldr	r0, [pc, #312]	; (8000a00 <MX_GPIO_Init+0x1d4>)
 80008c6:	2201      	movs	r2, #1
 80008c8:	0019      	movs	r1, r3
 80008ca:	f000 ff90 	bl	80017ee <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BLow_Pin|ALow_Pin, GPIO_PIN_SET);
 80008ce:	4b4d      	ldr	r3, [pc, #308]	; (8000a04 <MX_GPIO_Init+0x1d8>)
 80008d0:	2201      	movs	r2, #1
 80008d2:	21c0      	movs	r1, #192	; 0xc0
 80008d4:	0018      	movs	r0, r3
 80008d6:	f000 ff8a 	bl	80017ee <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_BLUE_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 80008da:	23c0      	movs	r3, #192	; 0xc0
 80008dc:	009b      	lsls	r3, r3, #2
 80008de:	4849      	ldr	r0, [pc, #292]	; (8000a04 <MX_GPIO_Init+0x1d8>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	0019      	movs	r1, r3
 80008e4:	f000 ff83 	bl	80017ee <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ZC_C_Pin ZC_A_Pin ZC_B_Pin */
  GPIO_InitStruct.Pin = ZC_C_Pin|ZC_A_Pin|ZC_B_Pin;
 80008e8:	193b      	adds	r3, r7, r4
 80008ea:	4a47      	ldr	r2, [pc, #284]	; (8000a08 <MX_GPIO_Init+0x1dc>)
 80008ec:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008ee:	193b      	adds	r3, r7, r4
 80008f0:	2284      	movs	r2, #132	; 0x84
 80008f2:	0392      	lsls	r2, r2, #14
 80008f4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008f6:	193b      	adds	r3, r7, r4
 80008f8:	2201      	movs	r2, #1
 80008fa:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008fc:	193b      	adds	r3, r7, r4
 80008fe:	4a41      	ldr	r2, [pc, #260]	; (8000a04 <MX_GPIO_Init+0x1d8>)
 8000900:	0019      	movs	r1, r3
 8000902:	0010      	movs	r0, r2
 8000904:	f000 fde6 	bl	80014d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PushButton_Pin */
  GPIO_InitStruct.Pin = PushButton_Pin;
 8000908:	193b      	adds	r3, r7, r4
 800090a:	2201      	movs	r2, #1
 800090c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800090e:	193b      	adds	r3, r7, r4
 8000910:	2200      	movs	r2, #0
 8000912:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000914:	193b      	adds	r3, r7, r4
 8000916:	2200      	movs	r2, #0
 8000918:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(PushButton_GPIO_Port, &GPIO_InitStruct);
 800091a:	193a      	adds	r2, r7, r4
 800091c:	2390      	movs	r3, #144	; 0x90
 800091e:	05db      	lsls	r3, r3, #23
 8000920:	0011      	movs	r1, r2
 8000922:	0018      	movs	r0, r3
 8000924:	f000 fdd6 	bl	80014d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 Timer1_OUT_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|Timer1_OUT_Pin;
 8000928:	193b      	adds	r3, r7, r4
 800092a:	2230      	movs	r2, #48	; 0x30
 800092c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092e:	193b      	adds	r3, r7, r4
 8000930:	2201      	movs	r2, #1
 8000932:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000934:	193b      	adds	r3, r7, r4
 8000936:	2200      	movs	r2, #0
 8000938:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093a:	193b      	adds	r3, r7, r4
 800093c:	2200      	movs	r2, #0
 800093e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000940:	193a      	adds	r2, r7, r4
 8000942:	2390      	movs	r3, #144	; 0x90
 8000944:	05db      	lsls	r3, r3, #23
 8000946:	0011      	movs	r1, r2
 8000948:	0018      	movs	r0, r3
 800094a:	f000 fdc3 	bl	80014d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLow_Pin */
  GPIO_InitStruct.Pin = CLow_Pin;
 800094e:	0021      	movs	r1, r4
 8000950:	187b      	adds	r3, r7, r1
 8000952:	2280      	movs	r2, #128	; 0x80
 8000954:	0212      	lsls	r2, r2, #8
 8000956:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000958:	000c      	movs	r4, r1
 800095a:	193b      	adds	r3, r7, r4
 800095c:	2201      	movs	r2, #1
 800095e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000960:	193b      	adds	r3, r7, r4
 8000962:	2201      	movs	r2, #1
 8000964:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000966:	193b      	adds	r3, r7, r4
 8000968:	2203      	movs	r2, #3
 800096a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(CLow_GPIO_Port, &GPIO_InitStruct);
 800096c:	193b      	adds	r3, r7, r4
 800096e:	4a24      	ldr	r2, [pc, #144]	; (8000a00 <MX_GPIO_Init+0x1d4>)
 8000970:	0019      	movs	r1, r3
 8000972:	0010      	movs	r0, r2
 8000974:	f000 fdae 	bl	80014d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : BLow_Pin ALow_Pin */
  GPIO_InitStruct.Pin = BLow_Pin|ALow_Pin;
 8000978:	193b      	adds	r3, r7, r4
 800097a:	22c0      	movs	r2, #192	; 0xc0
 800097c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800097e:	193b      	adds	r3, r7, r4
 8000980:	2201      	movs	r2, #1
 8000982:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000984:	193b      	adds	r3, r7, r4
 8000986:	2201      	movs	r2, #1
 8000988:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800098a:	193b      	adds	r3, r7, r4
 800098c:	2203      	movs	r2, #3
 800098e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000990:	193b      	adds	r3, r7, r4
 8000992:	4a1c      	ldr	r2, [pc, #112]	; (8000a04 <MX_GPIO_Init+0x1d8>)
 8000994:	0019      	movs	r1, r3
 8000996:	0010      	movs	r0, r2
 8000998:	f000 fd9c 	bl	80014d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_BLUE_Pin LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin|LED_GREEN_Pin;
 800099c:	0021      	movs	r1, r4
 800099e:	187b      	adds	r3, r7, r1
 80009a0:	22c0      	movs	r2, #192	; 0xc0
 80009a2:	0092      	lsls	r2, r2, #2
 80009a4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a6:	187b      	adds	r3, r7, r1
 80009a8:	2201      	movs	r2, #1
 80009aa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	187b      	adds	r3, r7, r1
 80009ae:	2200      	movs	r2, #0
 80009b0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b2:	187b      	adds	r3, r7, r1
 80009b4:	2200      	movs	r2, #0
 80009b6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009b8:	187b      	adds	r3, r7, r1
 80009ba:	4a12      	ldr	r2, [pc, #72]	; (8000a04 <MX_GPIO_Init+0x1d8>)
 80009bc:	0019      	movs	r1, r3
 80009be:	0010      	movs	r0, r2
 80009c0:	f000 fd88 	bl	80014d4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 80009c4:	2200      	movs	r2, #0
 80009c6:	2100      	movs	r1, #0
 80009c8:	2005      	movs	r0, #5
 80009ca:	f000 fbb9 	bl	8001140 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 80009ce:	2005      	movs	r0, #5
 80009d0:	f000 fbcb 	bl	800116a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 80009d4:	2200      	movs	r2, #0
 80009d6:	2100      	movs	r1, #0
 80009d8:	2006      	movs	r0, #6
 80009da:	f000 fbb1 	bl	8001140 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 80009de:	2006      	movs	r0, #6
 80009e0:	f000 fbc3 	bl	800116a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80009e4:	2200      	movs	r2, #0
 80009e6:	2100      	movs	r1, #0
 80009e8:	2007      	movs	r0, #7
 80009ea:	f000 fba9 	bl	8001140 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80009ee:	2007      	movs	r0, #7
 80009f0:	f000 fbbb 	bl	800116a <HAL_NVIC_EnableIRQ>

}
 80009f4:	46c0      	nop			; (mov r8, r8)
 80009f6:	46bd      	mov	sp, r7
 80009f8:	b00b      	add	sp, #44	; 0x2c
 80009fa:	bd90      	pop	{r4, r7, pc}
 80009fc:	40021000 	.word	0x40021000
 8000a00:	48000400 	.word	0x48000400
 8000a04:	48000800 	.word	0x48000800
 8000a08:	00008005 	.word	0x00008005

08000a0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a10:	b672      	cpsid	i
}
 8000a12:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a14:	e7fe      	b.n	8000a14 <Error_Handler+0x8>
	...

08000a18 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a1e:	4b0f      	ldr	r3, [pc, #60]	; (8000a5c <HAL_MspInit+0x44>)
 8000a20:	699a      	ldr	r2, [r3, #24]
 8000a22:	4b0e      	ldr	r3, [pc, #56]	; (8000a5c <HAL_MspInit+0x44>)
 8000a24:	2101      	movs	r1, #1
 8000a26:	430a      	orrs	r2, r1
 8000a28:	619a      	str	r2, [r3, #24]
 8000a2a:	4b0c      	ldr	r3, [pc, #48]	; (8000a5c <HAL_MspInit+0x44>)
 8000a2c:	699b      	ldr	r3, [r3, #24]
 8000a2e:	2201      	movs	r2, #1
 8000a30:	4013      	ands	r3, r2
 8000a32:	607b      	str	r3, [r7, #4]
 8000a34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a36:	4b09      	ldr	r3, [pc, #36]	; (8000a5c <HAL_MspInit+0x44>)
 8000a38:	69da      	ldr	r2, [r3, #28]
 8000a3a:	4b08      	ldr	r3, [pc, #32]	; (8000a5c <HAL_MspInit+0x44>)
 8000a3c:	2180      	movs	r1, #128	; 0x80
 8000a3e:	0549      	lsls	r1, r1, #21
 8000a40:	430a      	orrs	r2, r1
 8000a42:	61da      	str	r2, [r3, #28]
 8000a44:	4b05      	ldr	r3, [pc, #20]	; (8000a5c <HAL_MspInit+0x44>)
 8000a46:	69da      	ldr	r2, [r3, #28]
 8000a48:	2380      	movs	r3, #128	; 0x80
 8000a4a:	055b      	lsls	r3, r3, #21
 8000a4c:	4013      	ands	r3, r2
 8000a4e:	603b      	str	r3, [r7, #0]
 8000a50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a52:	46c0      	nop			; (mov r8, r8)
 8000a54:	46bd      	mov	sp, r7
 8000a56:	b002      	add	sp, #8
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	46c0      	nop			; (mov r8, r8)
 8000a5c:	40021000 	.word	0x40021000

08000a60 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b084      	sub	sp, #16
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a4b      	ldr	r2, [pc, #300]	; (8000b9c <HAL_TIM_PWM_MspInit+0x13c>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d000      	beq.n	8000a74 <HAL_TIM_PWM_MspInit+0x14>
 8000a72:	e08e      	b.n	8000b92 <HAL_TIM_PWM_MspInit+0x132>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a74:	4b4a      	ldr	r3, [pc, #296]	; (8000ba0 <HAL_TIM_PWM_MspInit+0x140>)
 8000a76:	699a      	ldr	r2, [r3, #24]
 8000a78:	4b49      	ldr	r3, [pc, #292]	; (8000ba0 <HAL_TIM_PWM_MspInit+0x140>)
 8000a7a:	2180      	movs	r1, #128	; 0x80
 8000a7c:	0109      	lsls	r1, r1, #4
 8000a7e:	430a      	orrs	r2, r1
 8000a80:	619a      	str	r2, [r3, #24]
 8000a82:	4b47      	ldr	r3, [pc, #284]	; (8000ba0 <HAL_TIM_PWM_MspInit+0x140>)
 8000a84:	699a      	ldr	r2, [r3, #24]
 8000a86:	2380      	movs	r3, #128	; 0x80
 8000a88:	011b      	lsls	r3, r3, #4
 8000a8a:	4013      	ands	r3, r2
 8000a8c:	60fb      	str	r3, [r7, #12]
 8000a8e:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH2 Init */
    hdma_tim1_ch2.Instance = DMA1_Channel3;
 8000a90:	4b44      	ldr	r3, [pc, #272]	; (8000ba4 <HAL_TIM_PWM_MspInit+0x144>)
 8000a92:	4a45      	ldr	r2, [pc, #276]	; (8000ba8 <HAL_TIM_PWM_MspInit+0x148>)
 8000a94:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a96:	4b43      	ldr	r3, [pc, #268]	; (8000ba4 <HAL_TIM_PWM_MspInit+0x144>)
 8000a98:	2210      	movs	r2, #16
 8000a9a:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a9c:	4b41      	ldr	r3, [pc, #260]	; (8000ba4 <HAL_TIM_PWM_MspInit+0x144>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8000aa2:	4b40      	ldr	r3, [pc, #256]	; (8000ba4 <HAL_TIM_PWM_MspInit+0x144>)
 8000aa4:	2280      	movs	r2, #128	; 0x80
 8000aa6:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000aa8:	4b3e      	ldr	r3, [pc, #248]	; (8000ba4 <HAL_TIM_PWM_MspInit+0x144>)
 8000aaa:	2280      	movs	r2, #128	; 0x80
 8000aac:	0052      	lsls	r2, r2, #1
 8000aae:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ab0:	4b3c      	ldr	r3, [pc, #240]	; (8000ba4 <HAL_TIM_PWM_MspInit+0x144>)
 8000ab2:	2280      	movs	r2, #128	; 0x80
 8000ab4:	00d2      	lsls	r2, r2, #3
 8000ab6:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch2.Init.Mode = DMA_CIRCULAR;
 8000ab8:	4b3a      	ldr	r3, [pc, #232]	; (8000ba4 <HAL_TIM_PWM_MspInit+0x144>)
 8000aba:	2220      	movs	r2, #32
 8000abc:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000abe:	4b39      	ldr	r3, [pc, #228]	; (8000ba4 <HAL_TIM_PWM_MspInit+0x144>)
 8000ac0:	22c0      	movs	r2, #192	; 0xc0
 8000ac2:	0192      	lsls	r2, r2, #6
 8000ac4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch2) != HAL_OK)
 8000ac6:	4b37      	ldr	r3, [pc, #220]	; (8000ba4 <HAL_TIM_PWM_MspInit+0x144>)
 8000ac8:	0018      	movs	r0, r3
 8000aca:	f000 fb6b 	bl	80011a4 <HAL_DMA_Init>
 8000ace:	1e03      	subs	r3, r0, #0
 8000ad0:	d001      	beq.n	8000ad6 <HAL_TIM_PWM_MspInit+0x76>
    {
      Error_Handler();
 8000ad2:	f7ff ff9b 	bl	8000a0c <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim1_ch2);
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	4a32      	ldr	r2, [pc, #200]	; (8000ba4 <HAL_TIM_PWM_MspInit+0x144>)
 8000ada:	629a      	str	r2, [r3, #40]	; 0x28
 8000adc:	4b31      	ldr	r3, [pc, #196]	; (8000ba4 <HAL_TIM_PWM_MspInit+0x144>)
 8000ade:	687a      	ldr	r2, [r7, #4]
 8000ae0:	625a      	str	r2, [r3, #36]	; 0x24

    /* TIM1_CH3_UP Init */
    hdma_tim1_ch3_up.Instance = DMA1_Channel5;
 8000ae2:	4b32      	ldr	r3, [pc, #200]	; (8000bac <HAL_TIM_PWM_MspInit+0x14c>)
 8000ae4:	4a32      	ldr	r2, [pc, #200]	; (8000bb0 <HAL_TIM_PWM_MspInit+0x150>)
 8000ae6:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch3_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ae8:	4b30      	ldr	r3, [pc, #192]	; (8000bac <HAL_TIM_PWM_MspInit+0x14c>)
 8000aea:	2210      	movs	r2, #16
 8000aec:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch3_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8000aee:	4b2f      	ldr	r3, [pc, #188]	; (8000bac <HAL_TIM_PWM_MspInit+0x14c>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch3_up.Init.MemInc = DMA_MINC_ENABLE;
 8000af4:	4b2d      	ldr	r3, [pc, #180]	; (8000bac <HAL_TIM_PWM_MspInit+0x14c>)
 8000af6:	2280      	movs	r2, #128	; 0x80
 8000af8:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch3_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000afa:	4b2c      	ldr	r3, [pc, #176]	; (8000bac <HAL_TIM_PWM_MspInit+0x14c>)
 8000afc:	2280      	movs	r2, #128	; 0x80
 8000afe:	0052      	lsls	r2, r2, #1
 8000b00:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch3_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b02:	4b2a      	ldr	r3, [pc, #168]	; (8000bac <HAL_TIM_PWM_MspInit+0x14c>)
 8000b04:	2280      	movs	r2, #128	; 0x80
 8000b06:	00d2      	lsls	r2, r2, #3
 8000b08:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch3_up.Init.Mode = DMA_CIRCULAR;
 8000b0a:	4b28      	ldr	r3, [pc, #160]	; (8000bac <HAL_TIM_PWM_MspInit+0x14c>)
 8000b0c:	2220      	movs	r2, #32
 8000b0e:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch3_up.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000b10:	4b26      	ldr	r3, [pc, #152]	; (8000bac <HAL_TIM_PWM_MspInit+0x14c>)
 8000b12:	22c0      	movs	r2, #192	; 0xc0
 8000b14:	0192      	lsls	r2, r2, #6
 8000b16:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch3_up) != HAL_OK)
 8000b18:	4b24      	ldr	r3, [pc, #144]	; (8000bac <HAL_TIM_PWM_MspInit+0x14c>)
 8000b1a:	0018      	movs	r0, r3
 8000b1c:	f000 fb42 	bl	80011a4 <HAL_DMA_Init>
 8000b20:	1e03      	subs	r3, r0, #0
 8000b22:	d001      	beq.n	8000b28 <HAL_TIM_PWM_MspInit+0xc8>
    {
      Error_Handler();
 8000b24:	f7ff ff72 	bl	8000a0c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim1_ch3_up);
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	4a20      	ldr	r2, [pc, #128]	; (8000bac <HAL_TIM_PWM_MspInit+0x14c>)
 8000b2c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b2e:	4b1f      	ldr	r3, [pc, #124]	; (8000bac <HAL_TIM_PWM_MspInit+0x14c>)
 8000b30:	687a      	ldr	r2, [r7, #4]
 8000b32:	625a      	str	r2, [r3, #36]	; 0x24
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_ch3_up);
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	4a1d      	ldr	r2, [pc, #116]	; (8000bac <HAL_TIM_PWM_MspInit+0x14c>)
 8000b38:	621a      	str	r2, [r3, #32]
 8000b3a:	4b1c      	ldr	r3, [pc, #112]	; (8000bac <HAL_TIM_PWM_MspInit+0x14c>)
 8000b3c:	687a      	ldr	r2, [r7, #4]
 8000b3e:	625a      	str	r2, [r3, #36]	; 0x24

    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 8000b40:	4b1c      	ldr	r3, [pc, #112]	; (8000bb4 <HAL_TIM_PWM_MspInit+0x154>)
 8000b42:	4a1d      	ldr	r2, [pc, #116]	; (8000bb8 <HAL_TIM_PWM_MspInit+0x158>)
 8000b44:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b46:	4b1b      	ldr	r3, [pc, #108]	; (8000bb4 <HAL_TIM_PWM_MspInit+0x154>)
 8000b48:	2210      	movs	r2, #16
 8000b4a:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b4c:	4b19      	ldr	r3, [pc, #100]	; (8000bb4 <HAL_TIM_PWM_MspInit+0x154>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000b52:	4b18      	ldr	r3, [pc, #96]	; (8000bb4 <HAL_TIM_PWM_MspInit+0x154>)
 8000b54:	2280      	movs	r2, #128	; 0x80
 8000b56:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b58:	4b16      	ldr	r3, [pc, #88]	; (8000bb4 <HAL_TIM_PWM_MspInit+0x154>)
 8000b5a:	2280      	movs	r2, #128	; 0x80
 8000b5c:	0052      	lsls	r2, r2, #1
 8000b5e:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b60:	4b14      	ldr	r3, [pc, #80]	; (8000bb4 <HAL_TIM_PWM_MspInit+0x154>)
 8000b62:	2280      	movs	r2, #128	; 0x80
 8000b64:	00d2      	lsls	r2, r2, #3
 8000b66:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.Mode = DMA_CIRCULAR;
 8000b68:	4b12      	ldr	r3, [pc, #72]	; (8000bb4 <HAL_TIM_PWM_MspInit+0x154>)
 8000b6a:	2220      	movs	r2, #32
 8000b6c:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000b6e:	4b11      	ldr	r3, [pc, #68]	; (8000bb4 <HAL_TIM_PWM_MspInit+0x154>)
 8000b70:	22c0      	movs	r2, #192	; 0xc0
 8000b72:	0192      	lsls	r2, r2, #6
 8000b74:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8000b76:	4b0f      	ldr	r3, [pc, #60]	; (8000bb4 <HAL_TIM_PWM_MspInit+0x154>)
 8000b78:	0018      	movs	r0, r3
 8000b7a:	f000 fb13 	bl	80011a4 <HAL_DMA_Init>
 8000b7e:	1e03      	subs	r3, r0, #0
 8000b80:	d001      	beq.n	8000b86 <HAL_TIM_PWM_MspInit+0x126>
    {
      Error_Handler();
 8000b82:	f7ff ff43 	bl	8000a0c <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	4a0a      	ldr	r2, [pc, #40]	; (8000bb4 <HAL_TIM_PWM_MspInit+0x154>)
 8000b8a:	625a      	str	r2, [r3, #36]	; 0x24
 8000b8c:	4b09      	ldr	r3, [pc, #36]	; (8000bb4 <HAL_TIM_PWM_MspInit+0x154>)
 8000b8e:	687a      	ldr	r2, [r7, #4]
 8000b90:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000b92:	46c0      	nop			; (mov r8, r8)
 8000b94:	46bd      	mov	sp, r7
 8000b96:	b004      	add	sp, #16
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	46c0      	nop			; (mov r8, r8)
 8000b9c:	40012c00 	.word	0x40012c00
 8000ba0:	40021000 	.word	0x40021000
 8000ba4:	20000264 	.word	0x20000264
 8000ba8:	40020030 	.word	0x40020030
 8000bac:	20000220 	.word	0x20000220
 8000bb0:	40020058 	.word	0x40020058
 8000bb4:	200001dc 	.word	0x200001dc
 8000bb8:	4002001c 	.word	0x4002001c

08000bbc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b084      	sub	sp, #16
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681a      	ldr	r2, [r3, #0]
 8000bc8:	2380      	movs	r3, #128	; 0x80
 8000bca:	05db      	lsls	r3, r3, #23
 8000bcc:	429a      	cmp	r2, r3
 8000bce:	d114      	bne.n	8000bfa <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000bd0:	4b14      	ldr	r3, [pc, #80]	; (8000c24 <HAL_TIM_Base_MspInit+0x68>)
 8000bd2:	69da      	ldr	r2, [r3, #28]
 8000bd4:	4b13      	ldr	r3, [pc, #76]	; (8000c24 <HAL_TIM_Base_MspInit+0x68>)
 8000bd6:	2101      	movs	r1, #1
 8000bd8:	430a      	orrs	r2, r1
 8000bda:	61da      	str	r2, [r3, #28]
 8000bdc:	4b11      	ldr	r3, [pc, #68]	; (8000c24 <HAL_TIM_Base_MspInit+0x68>)
 8000bde:	69db      	ldr	r3, [r3, #28]
 8000be0:	2201      	movs	r2, #1
 8000be2:	4013      	ands	r3, r2
 8000be4:	60fb      	str	r3, [r7, #12]
 8000be6:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000be8:	2200      	movs	r2, #0
 8000bea:	2100      	movs	r1, #0
 8000bec:	200f      	movs	r0, #15
 8000bee:	f000 faa7 	bl	8001140 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000bf2:	200f      	movs	r0, #15
 8000bf4:	f000 fab9 	bl	800116a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000bf8:	e010      	b.n	8000c1c <HAL_TIM_Base_MspInit+0x60>
  else if(htim_base->Instance==TIM6)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4a0a      	ldr	r2, [pc, #40]	; (8000c28 <HAL_TIM_Base_MspInit+0x6c>)
 8000c00:	4293      	cmp	r3, r2
 8000c02:	d10b      	bne.n	8000c1c <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000c04:	4b07      	ldr	r3, [pc, #28]	; (8000c24 <HAL_TIM_Base_MspInit+0x68>)
 8000c06:	69da      	ldr	r2, [r3, #28]
 8000c08:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <HAL_TIM_Base_MspInit+0x68>)
 8000c0a:	2110      	movs	r1, #16
 8000c0c:	430a      	orrs	r2, r1
 8000c0e:	61da      	str	r2, [r3, #28]
 8000c10:	4b04      	ldr	r3, [pc, #16]	; (8000c24 <HAL_TIM_Base_MspInit+0x68>)
 8000c12:	69db      	ldr	r3, [r3, #28]
 8000c14:	2210      	movs	r2, #16
 8000c16:	4013      	ands	r3, r2
 8000c18:	60bb      	str	r3, [r7, #8]
 8000c1a:	68bb      	ldr	r3, [r7, #8]
}
 8000c1c:	46c0      	nop			; (mov r8, r8)
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	b004      	add	sp, #16
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	40021000 	.word	0x40021000
 8000c28:	40001000 	.word	0x40001000

08000c2c <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8000c2c:	b590      	push	{r4, r7, lr}
 8000c2e:	b08b      	sub	sp, #44	; 0x2c
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c34:	2414      	movs	r4, #20
 8000c36:	193b      	adds	r3, r7, r4
 8000c38:	0018      	movs	r0, r3
 8000c3a:	2314      	movs	r3, #20
 8000c3c:	001a      	movs	r2, r3
 8000c3e:	2100      	movs	r1, #0
 8000c40:	f004 f8f4 	bl	8004e2c <memset>
  if(htim_ic->Instance==TIM3)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a33      	ldr	r2, [pc, #204]	; (8000d18 <HAL_TIM_IC_MspInit+0xec>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d15f      	bne.n	8000d0e <HAL_TIM_IC_MspInit+0xe2>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000c4e:	4b33      	ldr	r3, [pc, #204]	; (8000d1c <HAL_TIM_IC_MspInit+0xf0>)
 8000c50:	69da      	ldr	r2, [r3, #28]
 8000c52:	4b32      	ldr	r3, [pc, #200]	; (8000d1c <HAL_TIM_IC_MspInit+0xf0>)
 8000c54:	2102      	movs	r1, #2
 8000c56:	430a      	orrs	r2, r1
 8000c58:	61da      	str	r2, [r3, #28]
 8000c5a:	4b30      	ldr	r3, [pc, #192]	; (8000d1c <HAL_TIM_IC_MspInit+0xf0>)
 8000c5c:	69db      	ldr	r3, [r3, #28]
 8000c5e:	2202      	movs	r2, #2
 8000c60:	4013      	ands	r3, r2
 8000c62:	613b      	str	r3, [r7, #16]
 8000c64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c66:	4b2d      	ldr	r3, [pc, #180]	; (8000d1c <HAL_TIM_IC_MspInit+0xf0>)
 8000c68:	695a      	ldr	r2, [r3, #20]
 8000c6a:	4b2c      	ldr	r3, [pc, #176]	; (8000d1c <HAL_TIM_IC_MspInit+0xf0>)
 8000c6c:	2180      	movs	r1, #128	; 0x80
 8000c6e:	0289      	lsls	r1, r1, #10
 8000c70:	430a      	orrs	r2, r1
 8000c72:	615a      	str	r2, [r3, #20]
 8000c74:	4b29      	ldr	r3, [pc, #164]	; (8000d1c <HAL_TIM_IC_MspInit+0xf0>)
 8000c76:	695a      	ldr	r2, [r3, #20]
 8000c78:	2380      	movs	r3, #128	; 0x80
 8000c7a:	029b      	lsls	r3, r3, #10
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	60fb      	str	r3, [r7, #12]
 8000c80:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = Proshot_IN_Pin;
 8000c82:	0021      	movs	r1, r4
 8000c84:	187b      	adds	r3, r7, r1
 8000c86:	2240      	movs	r2, #64	; 0x40
 8000c88:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8a:	187b      	adds	r3, r7, r1
 8000c8c:	2202      	movs	r2, #2
 8000c8e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c90:	187b      	adds	r3, r7, r1
 8000c92:	2200      	movs	r2, #0
 8000c94:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c96:	187b      	adds	r3, r7, r1
 8000c98:	2200      	movs	r2, #0
 8000c9a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000c9c:	187b      	adds	r3, r7, r1
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(Proshot_IN_GPIO_Port, &GPIO_InitStruct);
 8000ca2:	187a      	adds	r2, r7, r1
 8000ca4:	2390      	movs	r3, #144	; 0x90
 8000ca6:	05db      	lsls	r3, r3, #23
 8000ca8:	0011      	movs	r1, r2
 8000caa:	0018      	movs	r0, r3
 8000cac:	f000 fc12 	bl	80014d4 <HAL_GPIO_Init>

    /* TIM3 DMA Init */
    /* TIM3_CH1_TRIG Init */
    hdma_tim3_ch1_trig.Instance = DMA1_Channel4;
 8000cb0:	4b1b      	ldr	r3, [pc, #108]	; (8000d20 <HAL_TIM_IC_MspInit+0xf4>)
 8000cb2:	4a1c      	ldr	r2, [pc, #112]	; (8000d24 <HAL_TIM_IC_MspInit+0xf8>)
 8000cb4:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000cb6:	4b1a      	ldr	r3, [pc, #104]	; (8000d20 <HAL_TIM_IC_MspInit+0xf4>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cbc:	4b18      	ldr	r3, [pc, #96]	; (8000d20 <HAL_TIM_IC_MspInit+0xf4>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 8000cc2:	4b17      	ldr	r3, [pc, #92]	; (8000d20 <HAL_TIM_IC_MspInit+0xf4>)
 8000cc4:	2280      	movs	r2, #128	; 0x80
 8000cc6:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000cc8:	4b15      	ldr	r3, [pc, #84]	; (8000d20 <HAL_TIM_IC_MspInit+0xf4>)
 8000cca:	2280      	movs	r2, #128	; 0x80
 8000ccc:	0052      	lsls	r2, r2, #1
 8000cce:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000cd0:	4b13      	ldr	r3, [pc, #76]	; (8000d20 <HAL_TIM_IC_MspInit+0xf4>)
 8000cd2:	2280      	movs	r2, #128	; 0x80
 8000cd4:	00d2      	lsls	r2, r2, #3
 8000cd6:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.Mode = DMA_NORMAL;
 8000cd8:	4b11      	ldr	r3, [pc, #68]	; (8000d20 <HAL_TIM_IC_MspInit+0xf4>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000cde:	4b10      	ldr	r3, [pc, #64]	; (8000d20 <HAL_TIM_IC_MspInit+0xf4>)
 8000ce0:	22c0      	movs	r2, #192	; 0xc0
 8000ce2:	0192      	lsls	r2, r2, #6
 8000ce4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 8000ce6:	4b0e      	ldr	r3, [pc, #56]	; (8000d20 <HAL_TIM_IC_MspInit+0xf4>)
 8000ce8:	0018      	movs	r0, r3
 8000cea:	f000 fa5b 	bl	80011a4 <HAL_DMA_Init>
 8000cee:	1e03      	subs	r3, r0, #0
 8000cf0:	d001      	beq.n	8000cf6 <HAL_TIM_IC_MspInit+0xca>
    {
      Error_Handler();
 8000cf2:	f7ff fe8b 	bl	8000a0c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_ic,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	4a09      	ldr	r2, [pc, #36]	; (8000d20 <HAL_TIM_IC_MspInit+0xf4>)
 8000cfa:	625a      	str	r2, [r3, #36]	; 0x24
 8000cfc:	4b08      	ldr	r3, [pc, #32]	; (8000d20 <HAL_TIM_IC_MspInit+0xf4>)
 8000cfe:	687a      	ldr	r2, [r7, #4]
 8000d00:	625a      	str	r2, [r3, #36]	; 0x24
    __HAL_LINKDMA(htim_ic,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	4a06      	ldr	r2, [pc, #24]	; (8000d20 <HAL_TIM_IC_MspInit+0xf4>)
 8000d06:	639a      	str	r2, [r3, #56]	; 0x38
 8000d08:	4b05      	ldr	r3, [pc, #20]	; (8000d20 <HAL_TIM_IC_MspInit+0xf4>)
 8000d0a:	687a      	ldr	r2, [r7, #4]
 8000d0c:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000d0e:	46c0      	nop			; (mov r8, r8)
 8000d10:	46bd      	mov	sp, r7
 8000d12:	b00b      	add	sp, #44	; 0x2c
 8000d14:	bd90      	pop	{r4, r7, pc}
 8000d16:	46c0      	nop			; (mov r8, r8)
 8000d18:	40000400 	.word	0x40000400
 8000d1c:	40021000 	.word	0x40021000
 8000d20:	200002a8 	.word	0x200002a8
 8000d24:	40020044 	.word	0x40020044

08000d28 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d28:	b590      	push	{r4, r7, lr}
 8000d2a:	b089      	sub	sp, #36	; 0x24
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d30:	240c      	movs	r4, #12
 8000d32:	193b      	adds	r3, r7, r4
 8000d34:	0018      	movs	r0, r3
 8000d36:	2314      	movs	r3, #20
 8000d38:	001a      	movs	r2, r3
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	f004 f876 	bl	8004e2c <memset>
  if(htim->Instance==TIM1)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a16      	ldr	r2, [pc, #88]	; (8000da0 <HAL_TIM_MspPostInit+0x78>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d125      	bne.n	8000d96 <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d4a:	4b16      	ldr	r3, [pc, #88]	; (8000da4 <HAL_TIM_MspPostInit+0x7c>)
 8000d4c:	695a      	ldr	r2, [r3, #20]
 8000d4e:	4b15      	ldr	r3, [pc, #84]	; (8000da4 <HAL_TIM_MspPostInit+0x7c>)
 8000d50:	2180      	movs	r1, #128	; 0x80
 8000d52:	0289      	lsls	r1, r1, #10
 8000d54:	430a      	orrs	r2, r1
 8000d56:	615a      	str	r2, [r3, #20]
 8000d58:	4b12      	ldr	r3, [pc, #72]	; (8000da4 <HAL_TIM_MspPostInit+0x7c>)
 8000d5a:	695a      	ldr	r2, [r3, #20]
 8000d5c:	2380      	movs	r3, #128	; 0x80
 8000d5e:	029b      	lsls	r3, r3, #10
 8000d60:	4013      	ands	r3, r2
 8000d62:	60bb      	str	r3, [r7, #8]
 8000d64:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = AHigh_PWM_Pin|BHigh_PWM_Pin|CHigh_PWM_Pin;
 8000d66:	193b      	adds	r3, r7, r4
 8000d68:	22e0      	movs	r2, #224	; 0xe0
 8000d6a:	00d2      	lsls	r2, r2, #3
 8000d6c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d6e:	0021      	movs	r1, r4
 8000d70:	187b      	adds	r3, r7, r1
 8000d72:	2202      	movs	r2, #2
 8000d74:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d76:	187b      	adds	r3, r7, r1
 8000d78:	2200      	movs	r2, #0
 8000d7a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7c:	187b      	adds	r3, r7, r1
 8000d7e:	2200      	movs	r2, #0
 8000d80:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000d82:	187b      	adds	r3, r7, r1
 8000d84:	2202      	movs	r2, #2
 8000d86:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d88:	187a      	adds	r2, r7, r1
 8000d8a:	2390      	movs	r3, #144	; 0x90
 8000d8c:	05db      	lsls	r3, r3, #23
 8000d8e:	0011      	movs	r1, r2
 8000d90:	0018      	movs	r0, r3
 8000d92:	f000 fb9f 	bl	80014d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000d96:	46c0      	nop			; (mov r8, r8)
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	b009      	add	sp, #36	; 0x24
 8000d9c:	bd90      	pop	{r4, r7, pc}
 8000d9e:	46c0      	nop			; (mov r8, r8)
 8000da0:	40012c00 	.word	0x40012c00
 8000da4:	40021000 	.word	0x40021000

08000da8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dac:	e7fe      	b.n	8000dac <NMI_Handler+0x4>

08000dae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dae:	b580      	push	{r7, lr}
 8000db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000db2:	e7fe      	b.n	8000db2 <HardFault_Handler+0x4>

08000db4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000db8:	46c0      	nop			; (mov r8, r8)
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}

08000dbe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dbe:	b580      	push	{r7, lr}
 8000dc0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dc2:	46c0      	nop			; (mov r8, r8)
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}

08000dc8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dcc:	f000 f8cc 	bl	8000f68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dd0:	46c0      	nop			; (mov r8, r8)
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
	...

08000dd8 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */
	//EXTI->IMR &= ~(1<<0);
	it_count_a++;
 8000ddc:	4b05      	ldr	r3, [pc, #20]	; (8000df4 <EXTI0_1_IRQHandler+0x1c>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	1c5a      	adds	r2, r3, #1
 8000de2:	4b04      	ldr	r3, [pc, #16]	; (8000df4 <EXTI0_1_IRQHandler+0x1c>)
 8000de4:	601a      	str	r2, [r3, #0]
  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ZC_A_Pin);
 8000de6:	2001      	movs	r0, #1
 8000de8:	f000 fd1e 	bl	8001828 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8000dec:	46c0      	nop			; (mov r8, r8)
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	46c0      	nop			; (mov r8, r8)
 8000df4:	20000058 	.word	0x20000058

08000df8 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */
	//EXTI->IMR &= ~(1<<2);
	it_count_b++;
 8000dfc:	4b05      	ldr	r3, [pc, #20]	; (8000e14 <EXTI2_3_IRQHandler+0x1c>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	1c5a      	adds	r2, r3, #1
 8000e02:	4b04      	ldr	r3, [pc, #16]	; (8000e14 <EXTI2_3_IRQHandler+0x1c>)
 8000e04:	601a      	str	r2, [r3, #0]
  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ZC_B_Pin);
 8000e06:	2004      	movs	r0, #4
 8000e08:	f000 fd0e 	bl	8001828 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8000e0c:	46c0      	nop			; (mov r8, r8)
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	46c0      	nop			; (mov r8, r8)
 8000e14:	2000005c 	.word	0x2000005c

08000e18 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */
	//EXTI->IMR &= ~(1<<15);
	it_count_c++;
 8000e1c:	4b06      	ldr	r3, [pc, #24]	; (8000e38 <EXTI4_15_IRQHandler+0x20>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	1c5a      	adds	r2, r3, #1
 8000e22:	4b05      	ldr	r3, [pc, #20]	; (8000e38 <EXTI4_15_IRQHandler+0x20>)
 8000e24:	601a      	str	r2, [r3, #0]
  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ZC_C_Pin);
 8000e26:	2380      	movs	r3, #128	; 0x80
 8000e28:	021b      	lsls	r3, r3, #8
 8000e2a:	0018      	movs	r0, r3
 8000e2c:	f000 fcfc 	bl	8001828 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000e30:	46c0      	nop			; (mov r8, r8)
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	46c0      	nop			; (mov r8, r8)
 8000e38:	20000060 	.word	0x20000060

08000e3c <DMA1_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 and 5 interrupts.
  */
void DMA1_Channel4_5_IRQHandler(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 8000e40:	4b05      	ldr	r3, [pc, #20]	; (8000e58 <DMA1_Channel4_5_IRQHandler+0x1c>)
 8000e42:	0018      	movs	r0, r3
 8000e44:	f000 fa5c 	bl	8001300 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_tim1_ch3_up);
 8000e48:	4b04      	ldr	r3, [pc, #16]	; (8000e5c <DMA1_Channel4_5_IRQHandler+0x20>)
 8000e4a:	0018      	movs	r0, r3
 8000e4c:	f000 fa58 	bl	8001300 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 8000e50:	46c0      	nop			; (mov r8, r8)
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	46c0      	nop			; (mov r8, r8)
 8000e58:	200002a8 	.word	0x200002a8
 8000e5c:	20000220 	.word	0x20000220

08000e60 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000e64:	4b03      	ldr	r3, [pc, #12]	; (8000e74 <TIM2_IRQHandler+0x14>)
 8000e66:	0018      	movs	r0, r3
 8000e68:	f001 fe16 	bl	8002a98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000e6c:	46c0      	nop			; (mov r8, r8)
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	46c0      	nop			; (mov r8, r8)
 8000e74:	2000013c 	.word	0x2000013c

08000e78 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000e7c:	46c0      	nop			; (mov r8, r8)
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
	...

08000e84 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
       ldr   r0, =_estack
 8000e84:	480d      	ldr	r0, [pc, #52]	; (8000ebc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e86:	4685      	mov	sp, r0
  
  /* Call the clock system initialization function.*/
  bl  SystemInit
 8000e88:	f7ff fff6 	bl	8000e78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e8c:	480c      	ldr	r0, [pc, #48]	; (8000ec0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e8e:	490d      	ldr	r1, [pc, #52]	; (8000ec4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e90:	4a0d      	ldr	r2, [pc, #52]	; (8000ec8 <LoopForever+0xe>)
  movs r3, #0
 8000e92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e94:	e002      	b.n	8000e9c <LoopCopyDataInit>

08000e96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e9a:	3304      	adds	r3, #4

08000e9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ea0:	d3f9      	bcc.n	8000e96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ea2:	4a0a      	ldr	r2, [pc, #40]	; (8000ecc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ea4:	4c0a      	ldr	r4, [pc, #40]	; (8000ed0 <LoopForever+0x16>)
  movs r3, #0
 8000ea6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ea8:	e001      	b.n	8000eae <LoopFillZerobss>

08000eaa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eaa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eac:	3204      	adds	r2, #4

08000eae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eb0:	d3fb      	bcc.n	8000eaa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000eb2:	f003 ff97 	bl	8004de4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000eb6:	f7ff fa9d 	bl	80003f4 <main>

08000eba <LoopForever>:

LoopForever:
    b LoopForever
 8000eba:	e7fe      	b.n	8000eba <LoopForever>
       ldr   r0, =_estack
 8000ebc:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000ec0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ec4:	2000003c 	.word	0x2000003c
  ldr r2, =_sidata
 8000ec8:	08004ed4 	.word	0x08004ed4
  ldr r2, =_sbss
 8000ecc:	2000003c 	.word	0x2000003c
  ldr r4, =_ebss
 8000ed0:	200002f0 	.word	0x200002f0

08000ed4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ed4:	e7fe      	b.n	8000ed4 <ADC1_COMP_IRQHandler>
	...

08000ed8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000edc:	4b07      	ldr	r3, [pc, #28]	; (8000efc <HAL_Init+0x24>)
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	4b06      	ldr	r3, [pc, #24]	; (8000efc <HAL_Init+0x24>)
 8000ee2:	2110      	movs	r1, #16
 8000ee4:	430a      	orrs	r2, r1
 8000ee6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000ee8:	2003      	movs	r0, #3
 8000eea:	f000 f809 	bl	8000f00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000eee:	f7ff fd93 	bl	8000a18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ef2:	2300      	movs	r3, #0
}
 8000ef4:	0018      	movs	r0, r3
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	46c0      	nop			; (mov r8, r8)
 8000efc:	40022000 	.word	0x40022000

08000f00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f00:	b590      	push	{r4, r7, lr}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f08:	4b14      	ldr	r3, [pc, #80]	; (8000f5c <HAL_InitTick+0x5c>)
 8000f0a:	681c      	ldr	r4, [r3, #0]
 8000f0c:	4b14      	ldr	r3, [pc, #80]	; (8000f60 <HAL_InitTick+0x60>)
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	0019      	movs	r1, r3
 8000f12:	23fa      	movs	r3, #250	; 0xfa
 8000f14:	0098      	lsls	r0, r3, #2
 8000f16:	f7ff f8f7 	bl	8000108 <__udivsi3>
 8000f1a:	0003      	movs	r3, r0
 8000f1c:	0019      	movs	r1, r3
 8000f1e:	0020      	movs	r0, r4
 8000f20:	f7ff f8f2 	bl	8000108 <__udivsi3>
 8000f24:	0003      	movs	r3, r0
 8000f26:	0018      	movs	r0, r3
 8000f28:	f000 f92f 	bl	800118a <HAL_SYSTICK_Config>
 8000f2c:	1e03      	subs	r3, r0, #0
 8000f2e:	d001      	beq.n	8000f34 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000f30:	2301      	movs	r3, #1
 8000f32:	e00f      	b.n	8000f54 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2b03      	cmp	r3, #3
 8000f38:	d80b      	bhi.n	8000f52 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f3a:	6879      	ldr	r1, [r7, #4]
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	425b      	negs	r3, r3
 8000f40:	2200      	movs	r2, #0
 8000f42:	0018      	movs	r0, r3
 8000f44:	f000 f8fc 	bl	8001140 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f48:	4b06      	ldr	r3, [pc, #24]	; (8000f64 <HAL_InitTick+0x64>)
 8000f4a:	687a      	ldr	r2, [r7, #4]
 8000f4c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	e000      	b.n	8000f54 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000f52:	2301      	movs	r3, #1
}
 8000f54:	0018      	movs	r0, r3
 8000f56:	46bd      	mov	sp, r7
 8000f58:	b003      	add	sp, #12
 8000f5a:	bd90      	pop	{r4, r7, pc}
 8000f5c:	20000000 	.word	0x20000000
 8000f60:	20000008 	.word	0x20000008
 8000f64:	20000004 	.word	0x20000004

08000f68 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f6c:	4b05      	ldr	r3, [pc, #20]	; (8000f84 <HAL_IncTick+0x1c>)
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	001a      	movs	r2, r3
 8000f72:	4b05      	ldr	r3, [pc, #20]	; (8000f88 <HAL_IncTick+0x20>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	18d2      	adds	r2, r2, r3
 8000f78:	4b03      	ldr	r3, [pc, #12]	; (8000f88 <HAL_IncTick+0x20>)
 8000f7a:	601a      	str	r2, [r3, #0]
}
 8000f7c:	46c0      	nop			; (mov r8, r8)
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	46c0      	nop			; (mov r8, r8)
 8000f84:	20000008 	.word	0x20000008
 8000f88:	200002ec 	.word	0x200002ec

08000f8c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f90:	4b02      	ldr	r3, [pc, #8]	; (8000f9c <HAL_GetTick+0x10>)
 8000f92:	681b      	ldr	r3, [r3, #0]
}
 8000f94:	0018      	movs	r0, r3
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	46c0      	nop			; (mov r8, r8)
 8000f9c:	200002ec 	.word	0x200002ec

08000fa0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fa8:	f7ff fff0 	bl	8000f8c <HAL_GetTick>
 8000fac:	0003      	movs	r3, r0
 8000fae:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	3301      	adds	r3, #1
 8000fb8:	d005      	beq.n	8000fc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fba:	4b0a      	ldr	r3, [pc, #40]	; (8000fe4 <HAL_Delay+0x44>)
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	001a      	movs	r2, r3
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	189b      	adds	r3, r3, r2
 8000fc4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000fc6:	46c0      	nop			; (mov r8, r8)
 8000fc8:	f7ff ffe0 	bl	8000f8c <HAL_GetTick>
 8000fcc:	0002      	movs	r2, r0
 8000fce:	68bb      	ldr	r3, [r7, #8]
 8000fd0:	1ad3      	subs	r3, r2, r3
 8000fd2:	68fa      	ldr	r2, [r7, #12]
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	d8f7      	bhi.n	8000fc8 <HAL_Delay+0x28>
  {
  }
}
 8000fd8:	46c0      	nop			; (mov r8, r8)
 8000fda:	46c0      	nop			; (mov r8, r8)
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	b004      	add	sp, #16
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	46c0      	nop			; (mov r8, r8)
 8000fe4:	20000008 	.word	0x20000008

08000fe8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	0002      	movs	r2, r0
 8000ff0:	1dfb      	adds	r3, r7, #7
 8000ff2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ff4:	1dfb      	adds	r3, r7, #7
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	2b7f      	cmp	r3, #127	; 0x7f
 8000ffa:	d809      	bhi.n	8001010 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ffc:	1dfb      	adds	r3, r7, #7
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	001a      	movs	r2, r3
 8001002:	231f      	movs	r3, #31
 8001004:	401a      	ands	r2, r3
 8001006:	4b04      	ldr	r3, [pc, #16]	; (8001018 <__NVIC_EnableIRQ+0x30>)
 8001008:	2101      	movs	r1, #1
 800100a:	4091      	lsls	r1, r2
 800100c:	000a      	movs	r2, r1
 800100e:	601a      	str	r2, [r3, #0]
  }
}
 8001010:	46c0      	nop			; (mov r8, r8)
 8001012:	46bd      	mov	sp, r7
 8001014:	b002      	add	sp, #8
 8001016:	bd80      	pop	{r7, pc}
 8001018:	e000e100 	.word	0xe000e100

0800101c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800101c:	b590      	push	{r4, r7, lr}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	0002      	movs	r2, r0
 8001024:	6039      	str	r1, [r7, #0]
 8001026:	1dfb      	adds	r3, r7, #7
 8001028:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800102a:	1dfb      	adds	r3, r7, #7
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	2b7f      	cmp	r3, #127	; 0x7f
 8001030:	d828      	bhi.n	8001084 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001032:	4a2f      	ldr	r2, [pc, #188]	; (80010f0 <__NVIC_SetPriority+0xd4>)
 8001034:	1dfb      	adds	r3, r7, #7
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	b25b      	sxtb	r3, r3
 800103a:	089b      	lsrs	r3, r3, #2
 800103c:	33c0      	adds	r3, #192	; 0xc0
 800103e:	009b      	lsls	r3, r3, #2
 8001040:	589b      	ldr	r3, [r3, r2]
 8001042:	1dfa      	adds	r2, r7, #7
 8001044:	7812      	ldrb	r2, [r2, #0]
 8001046:	0011      	movs	r1, r2
 8001048:	2203      	movs	r2, #3
 800104a:	400a      	ands	r2, r1
 800104c:	00d2      	lsls	r2, r2, #3
 800104e:	21ff      	movs	r1, #255	; 0xff
 8001050:	4091      	lsls	r1, r2
 8001052:	000a      	movs	r2, r1
 8001054:	43d2      	mvns	r2, r2
 8001056:	401a      	ands	r2, r3
 8001058:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	019b      	lsls	r3, r3, #6
 800105e:	22ff      	movs	r2, #255	; 0xff
 8001060:	401a      	ands	r2, r3
 8001062:	1dfb      	adds	r3, r7, #7
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	0018      	movs	r0, r3
 8001068:	2303      	movs	r3, #3
 800106a:	4003      	ands	r3, r0
 800106c:	00db      	lsls	r3, r3, #3
 800106e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001070:	481f      	ldr	r0, [pc, #124]	; (80010f0 <__NVIC_SetPriority+0xd4>)
 8001072:	1dfb      	adds	r3, r7, #7
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	b25b      	sxtb	r3, r3
 8001078:	089b      	lsrs	r3, r3, #2
 800107a:	430a      	orrs	r2, r1
 800107c:	33c0      	adds	r3, #192	; 0xc0
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001082:	e031      	b.n	80010e8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001084:	4a1b      	ldr	r2, [pc, #108]	; (80010f4 <__NVIC_SetPriority+0xd8>)
 8001086:	1dfb      	adds	r3, r7, #7
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	0019      	movs	r1, r3
 800108c:	230f      	movs	r3, #15
 800108e:	400b      	ands	r3, r1
 8001090:	3b08      	subs	r3, #8
 8001092:	089b      	lsrs	r3, r3, #2
 8001094:	3306      	adds	r3, #6
 8001096:	009b      	lsls	r3, r3, #2
 8001098:	18d3      	adds	r3, r2, r3
 800109a:	3304      	adds	r3, #4
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	1dfa      	adds	r2, r7, #7
 80010a0:	7812      	ldrb	r2, [r2, #0]
 80010a2:	0011      	movs	r1, r2
 80010a4:	2203      	movs	r2, #3
 80010a6:	400a      	ands	r2, r1
 80010a8:	00d2      	lsls	r2, r2, #3
 80010aa:	21ff      	movs	r1, #255	; 0xff
 80010ac:	4091      	lsls	r1, r2
 80010ae:	000a      	movs	r2, r1
 80010b0:	43d2      	mvns	r2, r2
 80010b2:	401a      	ands	r2, r3
 80010b4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	019b      	lsls	r3, r3, #6
 80010ba:	22ff      	movs	r2, #255	; 0xff
 80010bc:	401a      	ands	r2, r3
 80010be:	1dfb      	adds	r3, r7, #7
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	0018      	movs	r0, r3
 80010c4:	2303      	movs	r3, #3
 80010c6:	4003      	ands	r3, r0
 80010c8:	00db      	lsls	r3, r3, #3
 80010ca:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010cc:	4809      	ldr	r0, [pc, #36]	; (80010f4 <__NVIC_SetPriority+0xd8>)
 80010ce:	1dfb      	adds	r3, r7, #7
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	001c      	movs	r4, r3
 80010d4:	230f      	movs	r3, #15
 80010d6:	4023      	ands	r3, r4
 80010d8:	3b08      	subs	r3, #8
 80010da:	089b      	lsrs	r3, r3, #2
 80010dc:	430a      	orrs	r2, r1
 80010de:	3306      	adds	r3, #6
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	18c3      	adds	r3, r0, r3
 80010e4:	3304      	adds	r3, #4
 80010e6:	601a      	str	r2, [r3, #0]
}
 80010e8:	46c0      	nop			; (mov r8, r8)
 80010ea:	46bd      	mov	sp, r7
 80010ec:	b003      	add	sp, #12
 80010ee:	bd90      	pop	{r4, r7, pc}
 80010f0:	e000e100 	.word	0xe000e100
 80010f4:	e000ed00 	.word	0xe000ed00

080010f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	1e5a      	subs	r2, r3, #1
 8001104:	2380      	movs	r3, #128	; 0x80
 8001106:	045b      	lsls	r3, r3, #17
 8001108:	429a      	cmp	r2, r3
 800110a:	d301      	bcc.n	8001110 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800110c:	2301      	movs	r3, #1
 800110e:	e010      	b.n	8001132 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001110:	4b0a      	ldr	r3, [pc, #40]	; (800113c <SysTick_Config+0x44>)
 8001112:	687a      	ldr	r2, [r7, #4]
 8001114:	3a01      	subs	r2, #1
 8001116:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001118:	2301      	movs	r3, #1
 800111a:	425b      	negs	r3, r3
 800111c:	2103      	movs	r1, #3
 800111e:	0018      	movs	r0, r3
 8001120:	f7ff ff7c 	bl	800101c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001124:	4b05      	ldr	r3, [pc, #20]	; (800113c <SysTick_Config+0x44>)
 8001126:	2200      	movs	r2, #0
 8001128:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800112a:	4b04      	ldr	r3, [pc, #16]	; (800113c <SysTick_Config+0x44>)
 800112c:	2207      	movs	r2, #7
 800112e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001130:	2300      	movs	r3, #0
}
 8001132:	0018      	movs	r0, r3
 8001134:	46bd      	mov	sp, r7
 8001136:	b002      	add	sp, #8
 8001138:	bd80      	pop	{r7, pc}
 800113a:	46c0      	nop			; (mov r8, r8)
 800113c:	e000e010 	.word	0xe000e010

08001140 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001140:	b580      	push	{r7, lr}
 8001142:	b084      	sub	sp, #16
 8001144:	af00      	add	r7, sp, #0
 8001146:	60b9      	str	r1, [r7, #8]
 8001148:	607a      	str	r2, [r7, #4]
 800114a:	210f      	movs	r1, #15
 800114c:	187b      	adds	r3, r7, r1
 800114e:	1c02      	adds	r2, r0, #0
 8001150:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001152:	68ba      	ldr	r2, [r7, #8]
 8001154:	187b      	adds	r3, r7, r1
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	b25b      	sxtb	r3, r3
 800115a:	0011      	movs	r1, r2
 800115c:	0018      	movs	r0, r3
 800115e:	f7ff ff5d 	bl	800101c <__NVIC_SetPriority>
}
 8001162:	46c0      	nop			; (mov r8, r8)
 8001164:	46bd      	mov	sp, r7
 8001166:	b004      	add	sp, #16
 8001168:	bd80      	pop	{r7, pc}

0800116a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800116a:	b580      	push	{r7, lr}
 800116c:	b082      	sub	sp, #8
 800116e:	af00      	add	r7, sp, #0
 8001170:	0002      	movs	r2, r0
 8001172:	1dfb      	adds	r3, r7, #7
 8001174:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001176:	1dfb      	adds	r3, r7, #7
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	b25b      	sxtb	r3, r3
 800117c:	0018      	movs	r0, r3
 800117e:	f7ff ff33 	bl	8000fe8 <__NVIC_EnableIRQ>
}
 8001182:	46c0      	nop			; (mov r8, r8)
 8001184:	46bd      	mov	sp, r7
 8001186:	b002      	add	sp, #8
 8001188:	bd80      	pop	{r7, pc}

0800118a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800118a:	b580      	push	{r7, lr}
 800118c:	b082      	sub	sp, #8
 800118e:	af00      	add	r7, sp, #0
 8001190:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	0018      	movs	r0, r3
 8001196:	f7ff ffaf 	bl	80010f8 <SysTick_Config>
 800119a:	0003      	movs	r3, r0
}
 800119c:	0018      	movs	r0, r3
 800119e:	46bd      	mov	sp, r7
 80011a0:	b002      	add	sp, #8
 80011a2:	bd80      	pop	{r7, pc}

080011a4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80011ac:	2300      	movs	r3, #0
 80011ae:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d101      	bne.n	80011ba <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80011b6:	2301      	movs	r3, #1
 80011b8:	e036      	b.n	8001228 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2221      	movs	r2, #33	; 0x21
 80011be:	2102      	movs	r1, #2
 80011c0:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	4a18      	ldr	r2, [pc, #96]	; (8001230 <HAL_DMA_Init+0x8c>)
 80011ce:	4013      	ands	r3, r2
 80011d0:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80011da:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	68db      	ldr	r3, [r3, #12]
 80011e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	695b      	ldr	r3, [r3, #20]
 80011ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	69db      	ldr	r3, [r3, #28]
 80011f8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80011fa:	68fa      	ldr	r2, [r7, #12]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	68fa      	ldr	r2, [r7, #12]
 8001206:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	0018      	movs	r0, r3
 800120c:	f000 f946 	bl	800149c <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2200      	movs	r2, #0
 8001214:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2221      	movs	r2, #33	; 0x21
 800121a:	2101      	movs	r1, #1
 800121c:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2220      	movs	r2, #32
 8001222:	2100      	movs	r1, #0
 8001224:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001226:	2300      	movs	r3, #0
}
 8001228:	0018      	movs	r0, r3
 800122a:	46bd      	mov	sp, r7
 800122c:	b004      	add	sp, #16
 800122e:	bd80      	pop	{r7, pc}
 8001230:	ffffc00f 	.word	0xffffc00f

08001234 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b086      	sub	sp, #24
 8001238:	af00      	add	r7, sp, #0
 800123a:	60f8      	str	r0, [r7, #12]
 800123c:	60b9      	str	r1, [r7, #8]
 800123e:	607a      	str	r2, [r7, #4]
 8001240:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001242:	2317      	movs	r3, #23
 8001244:	18fb      	adds	r3, r7, r3
 8001246:	2200      	movs	r2, #0
 8001248:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	2220      	movs	r2, #32
 800124e:	5c9b      	ldrb	r3, [r3, r2]
 8001250:	2b01      	cmp	r3, #1
 8001252:	d101      	bne.n	8001258 <HAL_DMA_Start_IT+0x24>
 8001254:	2302      	movs	r3, #2
 8001256:	e04f      	b.n	80012f8 <HAL_DMA_Start_IT+0xc4>
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	2220      	movs	r2, #32
 800125c:	2101      	movs	r1, #1
 800125e:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	2221      	movs	r2, #33	; 0x21
 8001264:	5c9b      	ldrb	r3, [r3, r2]
 8001266:	b2db      	uxtb	r3, r3
 8001268:	2b01      	cmp	r3, #1
 800126a:	d13a      	bne.n	80012e2 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	2221      	movs	r2, #33	; 0x21
 8001270:	2102      	movs	r1, #2
 8001272:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	2200      	movs	r2, #0
 8001278:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	2101      	movs	r1, #1
 8001286:	438a      	bics	r2, r1
 8001288:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	687a      	ldr	r2, [r7, #4]
 800128e:	68b9      	ldr	r1, [r7, #8]
 8001290:	68f8      	ldr	r0, [r7, #12]
 8001292:	f000 f8d7 	bl	8001444 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800129a:	2b00      	cmp	r3, #0
 800129c:	d008      	beq.n	80012b0 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	210e      	movs	r1, #14
 80012aa:	430a      	orrs	r2, r1
 80012ac:	601a      	str	r2, [r3, #0]
 80012ae:	e00f      	b.n	80012d0 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	210a      	movs	r1, #10
 80012bc:	430a      	orrs	r2, r1
 80012be:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	2104      	movs	r1, #4
 80012cc:	438a      	bics	r2, r1
 80012ce:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	681a      	ldr	r2, [r3, #0]
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	2101      	movs	r1, #1
 80012dc:	430a      	orrs	r2, r1
 80012de:	601a      	str	r2, [r3, #0]
 80012e0:	e007      	b.n	80012f2 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	2220      	movs	r2, #32
 80012e6:	2100      	movs	r1, #0
 80012e8:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 80012ea:	2317      	movs	r3, #23
 80012ec:	18fb      	adds	r3, r7, r3
 80012ee:	2202      	movs	r2, #2
 80012f0:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80012f2:	2317      	movs	r3, #23
 80012f4:	18fb      	adds	r3, r7, r3
 80012f6:	781b      	ldrb	r3, [r3, #0]
}
 80012f8:	0018      	movs	r0, r3
 80012fa:	46bd      	mov	sp, r7
 80012fc:	b006      	add	sp, #24
 80012fe:	bd80      	pop	{r7, pc}

08001300 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131c:	2204      	movs	r2, #4
 800131e:	409a      	lsls	r2, r3
 8001320:	0013      	movs	r3, r2
 8001322:	68fa      	ldr	r2, [r7, #12]
 8001324:	4013      	ands	r3, r2
 8001326:	d024      	beq.n	8001372 <HAL_DMA_IRQHandler+0x72>
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	2204      	movs	r2, #4
 800132c:	4013      	ands	r3, r2
 800132e:	d020      	beq.n	8001372 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	2220      	movs	r2, #32
 8001338:	4013      	ands	r3, r2
 800133a:	d107      	bne.n	800134c <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	2104      	movs	r1, #4
 8001348:	438a      	bics	r2, r1
 800134a:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001354:	2104      	movs	r1, #4
 8001356:	4091      	lsls	r1, r2
 8001358:	000a      	movs	r2, r1
 800135a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001360:	2b00      	cmp	r3, #0
 8001362:	d100      	bne.n	8001366 <HAL_DMA_IRQHandler+0x66>
 8001364:	e06a      	b.n	800143c <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800136a:	687a      	ldr	r2, [r7, #4]
 800136c:	0010      	movs	r0, r2
 800136e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001370:	e064      	b.n	800143c <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001376:	2202      	movs	r2, #2
 8001378:	409a      	lsls	r2, r3
 800137a:	0013      	movs	r3, r2
 800137c:	68fa      	ldr	r2, [r7, #12]
 800137e:	4013      	ands	r3, r2
 8001380:	d02b      	beq.n	80013da <HAL_DMA_IRQHandler+0xda>
 8001382:	68bb      	ldr	r3, [r7, #8]
 8001384:	2202      	movs	r2, #2
 8001386:	4013      	ands	r3, r2
 8001388:	d027      	beq.n	80013da <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	2220      	movs	r2, #32
 8001392:	4013      	ands	r3, r2
 8001394:	d10b      	bne.n	80013ae <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	210a      	movs	r1, #10
 80013a2:	438a      	bics	r2, r1
 80013a4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2221      	movs	r2, #33	; 0x21
 80013aa:	2101      	movs	r1, #1
 80013ac:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013b6:	2102      	movs	r1, #2
 80013b8:	4091      	lsls	r1, r2
 80013ba:	000a      	movs	r2, r1
 80013bc:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2220      	movs	r2, #32
 80013c2:	2100      	movs	r1, #0
 80013c4:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d036      	beq.n	800143c <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013d2:	687a      	ldr	r2, [r7, #4]
 80013d4:	0010      	movs	r0, r2
 80013d6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80013d8:	e030      	b.n	800143c <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013de:	2208      	movs	r2, #8
 80013e0:	409a      	lsls	r2, r3
 80013e2:	0013      	movs	r3, r2
 80013e4:	68fa      	ldr	r2, [r7, #12]
 80013e6:	4013      	ands	r3, r2
 80013e8:	d028      	beq.n	800143c <HAL_DMA_IRQHandler+0x13c>
 80013ea:	68bb      	ldr	r3, [r7, #8]
 80013ec:	2208      	movs	r2, #8
 80013ee:	4013      	ands	r3, r2
 80013f0:	d024      	beq.n	800143c <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	210e      	movs	r1, #14
 80013fe:	438a      	bics	r2, r1
 8001400:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800140a:	2101      	movs	r1, #1
 800140c:	4091      	lsls	r1, r2
 800140e:	000a      	movs	r2, r1
 8001410:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2201      	movs	r2, #1
 8001416:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2221      	movs	r2, #33	; 0x21
 800141c:	2101      	movs	r1, #1
 800141e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2220      	movs	r2, #32
 8001424:	2100      	movs	r1, #0
 8001426:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142c:	2b00      	cmp	r3, #0
 800142e:	d005      	beq.n	800143c <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001434:	687a      	ldr	r2, [r7, #4]
 8001436:	0010      	movs	r0, r2
 8001438:	4798      	blx	r3
    }
  }
}
 800143a:	e7ff      	b.n	800143c <HAL_DMA_IRQHandler+0x13c>
 800143c:	46c0      	nop			; (mov r8, r8)
 800143e:	46bd      	mov	sp, r7
 8001440:	b004      	add	sp, #16
 8001442:	bd80      	pop	{r7, pc}

08001444 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b084      	sub	sp, #16
 8001448:	af00      	add	r7, sp, #0
 800144a:	60f8      	str	r0, [r7, #12]
 800144c:	60b9      	str	r1, [r7, #8]
 800144e:	607a      	str	r2, [r7, #4]
 8001450:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800145a:	2101      	movs	r1, #1
 800145c:	4091      	lsls	r1, r2
 800145e:	000a      	movs	r2, r1
 8001460:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	683a      	ldr	r2, [r7, #0]
 8001468:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	2b10      	cmp	r3, #16
 8001470:	d108      	bne.n	8001484 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	687a      	ldr	r2, [r7, #4]
 8001478:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	68ba      	ldr	r2, [r7, #8]
 8001480:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001482:	e007      	b.n	8001494 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	68ba      	ldr	r2, [r7, #8]
 800148a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	687a      	ldr	r2, [r7, #4]
 8001492:	60da      	str	r2, [r3, #12]
}
 8001494:	46c0      	nop			; (mov r8, r8)
 8001496:	46bd      	mov	sp, r7
 8001498:	b004      	add	sp, #16
 800149a:	bd80      	pop	{r7, pc}

0800149c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a08      	ldr	r2, [pc, #32]	; (80014cc <DMA_CalcBaseAndBitshift+0x30>)
 80014aa:	4694      	mov	ip, r2
 80014ac:	4463      	add	r3, ip
 80014ae:	2114      	movs	r1, #20
 80014b0:	0018      	movs	r0, r3
 80014b2:	f7fe fe29 	bl	8000108 <__udivsi3>
 80014b6:	0003      	movs	r3, r0
 80014b8:	009a      	lsls	r2, r3, #2
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4a03      	ldr	r2, [pc, #12]	; (80014d0 <DMA_CalcBaseAndBitshift+0x34>)
 80014c2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 80014c4:	46c0      	nop			; (mov r8, r8)
 80014c6:	46bd      	mov	sp, r7
 80014c8:	b002      	add	sp, #8
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	bffdfff8 	.word	0xbffdfff8
 80014d0:	40020000 	.word	0x40020000

080014d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b086      	sub	sp, #24
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014de:	2300      	movs	r3, #0
 80014e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014e2:	e14f      	b.n	8001784 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	2101      	movs	r1, #1
 80014ea:	697a      	ldr	r2, [r7, #20]
 80014ec:	4091      	lsls	r1, r2
 80014ee:	000a      	movs	r2, r1
 80014f0:	4013      	ands	r3, r2
 80014f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d100      	bne.n	80014fc <HAL_GPIO_Init+0x28>
 80014fa:	e140      	b.n	800177e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	2203      	movs	r2, #3
 8001502:	4013      	ands	r3, r2
 8001504:	2b01      	cmp	r3, #1
 8001506:	d005      	beq.n	8001514 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	2203      	movs	r2, #3
 800150e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001510:	2b02      	cmp	r3, #2
 8001512:	d130      	bne.n	8001576 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	005b      	lsls	r3, r3, #1
 800151e:	2203      	movs	r2, #3
 8001520:	409a      	lsls	r2, r3
 8001522:	0013      	movs	r3, r2
 8001524:	43da      	mvns	r2, r3
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	4013      	ands	r3, r2
 800152a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	68da      	ldr	r2, [r3, #12]
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	005b      	lsls	r3, r3, #1
 8001534:	409a      	lsls	r2, r3
 8001536:	0013      	movs	r3, r2
 8001538:	693a      	ldr	r2, [r7, #16]
 800153a:	4313      	orrs	r3, r2
 800153c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	693a      	ldr	r2, [r7, #16]
 8001542:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800154a:	2201      	movs	r2, #1
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	409a      	lsls	r2, r3
 8001550:	0013      	movs	r3, r2
 8001552:	43da      	mvns	r2, r3
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	4013      	ands	r3, r2
 8001558:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	091b      	lsrs	r3, r3, #4
 8001560:	2201      	movs	r2, #1
 8001562:	401a      	ands	r2, r3
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	409a      	lsls	r2, r3
 8001568:	0013      	movs	r3, r2
 800156a:	693a      	ldr	r2, [r7, #16]
 800156c:	4313      	orrs	r3, r2
 800156e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	693a      	ldr	r2, [r7, #16]
 8001574:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	2203      	movs	r2, #3
 800157c:	4013      	ands	r3, r2
 800157e:	2b03      	cmp	r3, #3
 8001580:	d017      	beq.n	80015b2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	68db      	ldr	r3, [r3, #12]
 8001586:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	005b      	lsls	r3, r3, #1
 800158c:	2203      	movs	r2, #3
 800158e:	409a      	lsls	r2, r3
 8001590:	0013      	movs	r3, r2
 8001592:	43da      	mvns	r2, r3
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	4013      	ands	r3, r2
 8001598:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	689a      	ldr	r2, [r3, #8]
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	005b      	lsls	r3, r3, #1
 80015a2:	409a      	lsls	r2, r3
 80015a4:	0013      	movs	r3, r2
 80015a6:	693a      	ldr	r2, [r7, #16]
 80015a8:	4313      	orrs	r3, r2
 80015aa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	693a      	ldr	r2, [r7, #16]
 80015b0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	2203      	movs	r2, #3
 80015b8:	4013      	ands	r3, r2
 80015ba:	2b02      	cmp	r3, #2
 80015bc:	d123      	bne.n	8001606 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	08da      	lsrs	r2, r3, #3
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	3208      	adds	r2, #8
 80015c6:	0092      	lsls	r2, r2, #2
 80015c8:	58d3      	ldr	r3, [r2, r3]
 80015ca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	2207      	movs	r2, #7
 80015d0:	4013      	ands	r3, r2
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	220f      	movs	r2, #15
 80015d6:	409a      	lsls	r2, r3
 80015d8:	0013      	movs	r3, r2
 80015da:	43da      	mvns	r2, r3
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	4013      	ands	r3, r2
 80015e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	691a      	ldr	r2, [r3, #16]
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	2107      	movs	r1, #7
 80015ea:	400b      	ands	r3, r1
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	409a      	lsls	r2, r3
 80015f0:	0013      	movs	r3, r2
 80015f2:	693a      	ldr	r2, [r7, #16]
 80015f4:	4313      	orrs	r3, r2
 80015f6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	08da      	lsrs	r2, r3, #3
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	3208      	adds	r2, #8
 8001600:	0092      	lsls	r2, r2, #2
 8001602:	6939      	ldr	r1, [r7, #16]
 8001604:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	005b      	lsls	r3, r3, #1
 8001610:	2203      	movs	r2, #3
 8001612:	409a      	lsls	r2, r3
 8001614:	0013      	movs	r3, r2
 8001616:	43da      	mvns	r2, r3
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	4013      	ands	r3, r2
 800161c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	2203      	movs	r2, #3
 8001624:	401a      	ands	r2, r3
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	005b      	lsls	r3, r3, #1
 800162a:	409a      	lsls	r2, r3
 800162c:	0013      	movs	r3, r2
 800162e:	693a      	ldr	r2, [r7, #16]
 8001630:	4313      	orrs	r3, r2
 8001632:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	693a      	ldr	r2, [r7, #16]
 8001638:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	685a      	ldr	r2, [r3, #4]
 800163e:	23c0      	movs	r3, #192	; 0xc0
 8001640:	029b      	lsls	r3, r3, #10
 8001642:	4013      	ands	r3, r2
 8001644:	d100      	bne.n	8001648 <HAL_GPIO_Init+0x174>
 8001646:	e09a      	b.n	800177e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001648:	4b54      	ldr	r3, [pc, #336]	; (800179c <HAL_GPIO_Init+0x2c8>)
 800164a:	699a      	ldr	r2, [r3, #24]
 800164c:	4b53      	ldr	r3, [pc, #332]	; (800179c <HAL_GPIO_Init+0x2c8>)
 800164e:	2101      	movs	r1, #1
 8001650:	430a      	orrs	r2, r1
 8001652:	619a      	str	r2, [r3, #24]
 8001654:	4b51      	ldr	r3, [pc, #324]	; (800179c <HAL_GPIO_Init+0x2c8>)
 8001656:	699b      	ldr	r3, [r3, #24]
 8001658:	2201      	movs	r2, #1
 800165a:	4013      	ands	r3, r2
 800165c:	60bb      	str	r3, [r7, #8]
 800165e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001660:	4a4f      	ldr	r2, [pc, #316]	; (80017a0 <HAL_GPIO_Init+0x2cc>)
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	089b      	lsrs	r3, r3, #2
 8001666:	3302      	adds	r3, #2
 8001668:	009b      	lsls	r3, r3, #2
 800166a:	589b      	ldr	r3, [r3, r2]
 800166c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	2203      	movs	r2, #3
 8001672:	4013      	ands	r3, r2
 8001674:	009b      	lsls	r3, r3, #2
 8001676:	220f      	movs	r2, #15
 8001678:	409a      	lsls	r2, r3
 800167a:	0013      	movs	r3, r2
 800167c:	43da      	mvns	r2, r3
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	4013      	ands	r3, r2
 8001682:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001684:	687a      	ldr	r2, [r7, #4]
 8001686:	2390      	movs	r3, #144	; 0x90
 8001688:	05db      	lsls	r3, r3, #23
 800168a:	429a      	cmp	r2, r3
 800168c:	d013      	beq.n	80016b6 <HAL_GPIO_Init+0x1e2>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4a44      	ldr	r2, [pc, #272]	; (80017a4 <HAL_GPIO_Init+0x2d0>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d00d      	beq.n	80016b2 <HAL_GPIO_Init+0x1de>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4a43      	ldr	r2, [pc, #268]	; (80017a8 <HAL_GPIO_Init+0x2d4>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d007      	beq.n	80016ae <HAL_GPIO_Init+0x1da>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4a42      	ldr	r2, [pc, #264]	; (80017ac <HAL_GPIO_Init+0x2d8>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d101      	bne.n	80016aa <HAL_GPIO_Init+0x1d6>
 80016a6:	2303      	movs	r3, #3
 80016a8:	e006      	b.n	80016b8 <HAL_GPIO_Init+0x1e4>
 80016aa:	2305      	movs	r3, #5
 80016ac:	e004      	b.n	80016b8 <HAL_GPIO_Init+0x1e4>
 80016ae:	2302      	movs	r3, #2
 80016b0:	e002      	b.n	80016b8 <HAL_GPIO_Init+0x1e4>
 80016b2:	2301      	movs	r3, #1
 80016b4:	e000      	b.n	80016b8 <HAL_GPIO_Init+0x1e4>
 80016b6:	2300      	movs	r3, #0
 80016b8:	697a      	ldr	r2, [r7, #20]
 80016ba:	2103      	movs	r1, #3
 80016bc:	400a      	ands	r2, r1
 80016be:	0092      	lsls	r2, r2, #2
 80016c0:	4093      	lsls	r3, r2
 80016c2:	693a      	ldr	r2, [r7, #16]
 80016c4:	4313      	orrs	r3, r2
 80016c6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80016c8:	4935      	ldr	r1, [pc, #212]	; (80017a0 <HAL_GPIO_Init+0x2cc>)
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	089b      	lsrs	r3, r3, #2
 80016ce:	3302      	adds	r3, #2
 80016d0:	009b      	lsls	r3, r3, #2
 80016d2:	693a      	ldr	r2, [r7, #16]
 80016d4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016d6:	4b36      	ldr	r3, [pc, #216]	; (80017b0 <HAL_GPIO_Init+0x2dc>)
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	43da      	mvns	r2, r3
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	4013      	ands	r3, r2
 80016e4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	685a      	ldr	r2, [r3, #4]
 80016ea:	2380      	movs	r3, #128	; 0x80
 80016ec:	035b      	lsls	r3, r3, #13
 80016ee:	4013      	ands	r3, r2
 80016f0:	d003      	beq.n	80016fa <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80016f2:	693a      	ldr	r2, [r7, #16]
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	4313      	orrs	r3, r2
 80016f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80016fa:	4b2d      	ldr	r3, [pc, #180]	; (80017b0 <HAL_GPIO_Init+0x2dc>)
 80016fc:	693a      	ldr	r2, [r7, #16]
 80016fe:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001700:	4b2b      	ldr	r3, [pc, #172]	; (80017b0 <HAL_GPIO_Init+0x2dc>)
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	43da      	mvns	r2, r3
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	4013      	ands	r3, r2
 800170e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	685a      	ldr	r2, [r3, #4]
 8001714:	2380      	movs	r3, #128	; 0x80
 8001716:	039b      	lsls	r3, r3, #14
 8001718:	4013      	ands	r3, r2
 800171a:	d003      	beq.n	8001724 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 800171c:	693a      	ldr	r2, [r7, #16]
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	4313      	orrs	r3, r2
 8001722:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001724:	4b22      	ldr	r3, [pc, #136]	; (80017b0 <HAL_GPIO_Init+0x2dc>)
 8001726:	693a      	ldr	r2, [r7, #16]
 8001728:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800172a:	4b21      	ldr	r3, [pc, #132]	; (80017b0 <HAL_GPIO_Init+0x2dc>)
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	43da      	mvns	r2, r3
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	4013      	ands	r3, r2
 8001738:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	685a      	ldr	r2, [r3, #4]
 800173e:	2380      	movs	r3, #128	; 0x80
 8001740:	029b      	lsls	r3, r3, #10
 8001742:	4013      	ands	r3, r2
 8001744:	d003      	beq.n	800174e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001746:	693a      	ldr	r2, [r7, #16]
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	4313      	orrs	r3, r2
 800174c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800174e:	4b18      	ldr	r3, [pc, #96]	; (80017b0 <HAL_GPIO_Init+0x2dc>)
 8001750:	693a      	ldr	r2, [r7, #16]
 8001752:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001754:	4b16      	ldr	r3, [pc, #88]	; (80017b0 <HAL_GPIO_Init+0x2dc>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	43da      	mvns	r2, r3
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	4013      	ands	r3, r2
 8001762:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	685a      	ldr	r2, [r3, #4]
 8001768:	2380      	movs	r3, #128	; 0x80
 800176a:	025b      	lsls	r3, r3, #9
 800176c:	4013      	ands	r3, r2
 800176e:	d003      	beq.n	8001778 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001770:	693a      	ldr	r2, [r7, #16]
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	4313      	orrs	r3, r2
 8001776:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001778:	4b0d      	ldr	r3, [pc, #52]	; (80017b0 <HAL_GPIO_Init+0x2dc>)
 800177a:	693a      	ldr	r2, [r7, #16]
 800177c:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	3301      	adds	r3, #1
 8001782:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	40da      	lsrs	r2, r3
 800178c:	1e13      	subs	r3, r2, #0
 800178e:	d000      	beq.n	8001792 <HAL_GPIO_Init+0x2be>
 8001790:	e6a8      	b.n	80014e4 <HAL_GPIO_Init+0x10>
  } 
}
 8001792:	46c0      	nop			; (mov r8, r8)
 8001794:	46c0      	nop			; (mov r8, r8)
 8001796:	46bd      	mov	sp, r7
 8001798:	b006      	add	sp, #24
 800179a:	bd80      	pop	{r7, pc}
 800179c:	40021000 	.word	0x40021000
 80017a0:	40010000 	.word	0x40010000
 80017a4:	48000400 	.word	0x48000400
 80017a8:	48000800 	.word	0x48000800
 80017ac:	48000c00 	.word	0x48000c00
 80017b0:	40010400 	.word	0x40010400

080017b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
 80017bc:	000a      	movs	r2, r1
 80017be:	1cbb      	adds	r3, r7, #2
 80017c0:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	691b      	ldr	r3, [r3, #16]
 80017c6:	1cba      	adds	r2, r7, #2
 80017c8:	8812      	ldrh	r2, [r2, #0]
 80017ca:	4013      	ands	r3, r2
 80017cc:	d004      	beq.n	80017d8 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80017ce:	230f      	movs	r3, #15
 80017d0:	18fb      	adds	r3, r7, r3
 80017d2:	2201      	movs	r2, #1
 80017d4:	701a      	strb	r2, [r3, #0]
 80017d6:	e003      	b.n	80017e0 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80017d8:	230f      	movs	r3, #15
 80017da:	18fb      	adds	r3, r7, r3
 80017dc:	2200      	movs	r2, #0
 80017de:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80017e0:	230f      	movs	r3, #15
 80017e2:	18fb      	adds	r3, r7, r3
 80017e4:	781b      	ldrb	r3, [r3, #0]
  }
 80017e6:	0018      	movs	r0, r3
 80017e8:	46bd      	mov	sp, r7
 80017ea:	b004      	add	sp, #16
 80017ec:	bd80      	pop	{r7, pc}

080017ee <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017ee:	b580      	push	{r7, lr}
 80017f0:	b082      	sub	sp, #8
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	6078      	str	r0, [r7, #4]
 80017f6:	0008      	movs	r0, r1
 80017f8:	0011      	movs	r1, r2
 80017fa:	1cbb      	adds	r3, r7, #2
 80017fc:	1c02      	adds	r2, r0, #0
 80017fe:	801a      	strh	r2, [r3, #0]
 8001800:	1c7b      	adds	r3, r7, #1
 8001802:	1c0a      	adds	r2, r1, #0
 8001804:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001806:	1c7b      	adds	r3, r7, #1
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d004      	beq.n	8001818 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800180e:	1cbb      	adds	r3, r7, #2
 8001810:	881a      	ldrh	r2, [r3, #0]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001816:	e003      	b.n	8001820 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001818:	1cbb      	adds	r3, r7, #2
 800181a:	881a      	ldrh	r2, [r3, #0]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001820:	46c0      	nop			; (mov r8, r8)
 8001822:	46bd      	mov	sp, r7
 8001824:	b002      	add	sp, #8
 8001826:	bd80      	pop	{r7, pc}

08001828 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	0002      	movs	r2, r0
 8001830:	1dbb      	adds	r3, r7, #6
 8001832:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001834:	4b09      	ldr	r3, [pc, #36]	; (800185c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001836:	695b      	ldr	r3, [r3, #20]
 8001838:	1dba      	adds	r2, r7, #6
 800183a:	8812      	ldrh	r2, [r2, #0]
 800183c:	4013      	ands	r3, r2
 800183e:	d008      	beq.n	8001852 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001840:	4b06      	ldr	r3, [pc, #24]	; (800185c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001842:	1dba      	adds	r2, r7, #6
 8001844:	8812      	ldrh	r2, [r2, #0]
 8001846:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001848:	1dbb      	adds	r3, r7, #6
 800184a:	881b      	ldrh	r3, [r3, #0]
 800184c:	0018      	movs	r0, r3
 800184e:	f003 f8f5 	bl	8004a3c <HAL_GPIO_EXTI_Callback>
  }
}
 8001852:	46c0      	nop			; (mov r8, r8)
 8001854:	46bd      	mov	sp, r7
 8001856:	b002      	add	sp, #8
 8001858:	bd80      	pop	{r7, pc}
 800185a:	46c0      	nop			; (mov r8, r8)
 800185c:	40010400 	.word	0x40010400

08001860 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b088      	sub	sp, #32
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d101      	bne.n	8001872 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e301      	b.n	8001e76 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	2201      	movs	r2, #1
 8001878:	4013      	ands	r3, r2
 800187a:	d100      	bne.n	800187e <HAL_RCC_OscConfig+0x1e>
 800187c:	e08d      	b.n	800199a <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800187e:	4bc3      	ldr	r3, [pc, #780]	; (8001b8c <HAL_RCC_OscConfig+0x32c>)
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	220c      	movs	r2, #12
 8001884:	4013      	ands	r3, r2
 8001886:	2b04      	cmp	r3, #4
 8001888:	d00e      	beq.n	80018a8 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800188a:	4bc0      	ldr	r3, [pc, #768]	; (8001b8c <HAL_RCC_OscConfig+0x32c>)
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	220c      	movs	r2, #12
 8001890:	4013      	ands	r3, r2
 8001892:	2b08      	cmp	r3, #8
 8001894:	d116      	bne.n	80018c4 <HAL_RCC_OscConfig+0x64>
 8001896:	4bbd      	ldr	r3, [pc, #756]	; (8001b8c <HAL_RCC_OscConfig+0x32c>)
 8001898:	685a      	ldr	r2, [r3, #4]
 800189a:	2380      	movs	r3, #128	; 0x80
 800189c:	025b      	lsls	r3, r3, #9
 800189e:	401a      	ands	r2, r3
 80018a0:	2380      	movs	r3, #128	; 0x80
 80018a2:	025b      	lsls	r3, r3, #9
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d10d      	bne.n	80018c4 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018a8:	4bb8      	ldr	r3, [pc, #736]	; (8001b8c <HAL_RCC_OscConfig+0x32c>)
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	2380      	movs	r3, #128	; 0x80
 80018ae:	029b      	lsls	r3, r3, #10
 80018b0:	4013      	ands	r3, r2
 80018b2:	d100      	bne.n	80018b6 <HAL_RCC_OscConfig+0x56>
 80018b4:	e070      	b.n	8001998 <HAL_RCC_OscConfig+0x138>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d000      	beq.n	80018c0 <HAL_RCC_OscConfig+0x60>
 80018be:	e06b      	b.n	8001998 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	e2d8      	b.n	8001e76 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d107      	bne.n	80018dc <HAL_RCC_OscConfig+0x7c>
 80018cc:	4baf      	ldr	r3, [pc, #700]	; (8001b8c <HAL_RCC_OscConfig+0x32c>)
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	4bae      	ldr	r3, [pc, #696]	; (8001b8c <HAL_RCC_OscConfig+0x32c>)
 80018d2:	2180      	movs	r1, #128	; 0x80
 80018d4:	0249      	lsls	r1, r1, #9
 80018d6:	430a      	orrs	r2, r1
 80018d8:	601a      	str	r2, [r3, #0]
 80018da:	e02f      	b.n	800193c <HAL_RCC_OscConfig+0xdc>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d10c      	bne.n	80018fe <HAL_RCC_OscConfig+0x9e>
 80018e4:	4ba9      	ldr	r3, [pc, #676]	; (8001b8c <HAL_RCC_OscConfig+0x32c>)
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	4ba8      	ldr	r3, [pc, #672]	; (8001b8c <HAL_RCC_OscConfig+0x32c>)
 80018ea:	49a9      	ldr	r1, [pc, #676]	; (8001b90 <HAL_RCC_OscConfig+0x330>)
 80018ec:	400a      	ands	r2, r1
 80018ee:	601a      	str	r2, [r3, #0]
 80018f0:	4ba6      	ldr	r3, [pc, #664]	; (8001b8c <HAL_RCC_OscConfig+0x32c>)
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	4ba5      	ldr	r3, [pc, #660]	; (8001b8c <HAL_RCC_OscConfig+0x32c>)
 80018f6:	49a7      	ldr	r1, [pc, #668]	; (8001b94 <HAL_RCC_OscConfig+0x334>)
 80018f8:	400a      	ands	r2, r1
 80018fa:	601a      	str	r2, [r3, #0]
 80018fc:	e01e      	b.n	800193c <HAL_RCC_OscConfig+0xdc>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	2b05      	cmp	r3, #5
 8001904:	d10e      	bne.n	8001924 <HAL_RCC_OscConfig+0xc4>
 8001906:	4ba1      	ldr	r3, [pc, #644]	; (8001b8c <HAL_RCC_OscConfig+0x32c>)
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	4ba0      	ldr	r3, [pc, #640]	; (8001b8c <HAL_RCC_OscConfig+0x32c>)
 800190c:	2180      	movs	r1, #128	; 0x80
 800190e:	02c9      	lsls	r1, r1, #11
 8001910:	430a      	orrs	r2, r1
 8001912:	601a      	str	r2, [r3, #0]
 8001914:	4b9d      	ldr	r3, [pc, #628]	; (8001b8c <HAL_RCC_OscConfig+0x32c>)
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	4b9c      	ldr	r3, [pc, #624]	; (8001b8c <HAL_RCC_OscConfig+0x32c>)
 800191a:	2180      	movs	r1, #128	; 0x80
 800191c:	0249      	lsls	r1, r1, #9
 800191e:	430a      	orrs	r2, r1
 8001920:	601a      	str	r2, [r3, #0]
 8001922:	e00b      	b.n	800193c <HAL_RCC_OscConfig+0xdc>
 8001924:	4b99      	ldr	r3, [pc, #612]	; (8001b8c <HAL_RCC_OscConfig+0x32c>)
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	4b98      	ldr	r3, [pc, #608]	; (8001b8c <HAL_RCC_OscConfig+0x32c>)
 800192a:	4999      	ldr	r1, [pc, #612]	; (8001b90 <HAL_RCC_OscConfig+0x330>)
 800192c:	400a      	ands	r2, r1
 800192e:	601a      	str	r2, [r3, #0]
 8001930:	4b96      	ldr	r3, [pc, #600]	; (8001b8c <HAL_RCC_OscConfig+0x32c>)
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	4b95      	ldr	r3, [pc, #596]	; (8001b8c <HAL_RCC_OscConfig+0x32c>)
 8001936:	4997      	ldr	r1, [pc, #604]	; (8001b94 <HAL_RCC_OscConfig+0x334>)
 8001938:	400a      	ands	r2, r1
 800193a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d014      	beq.n	800196e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001944:	f7ff fb22 	bl	8000f8c <HAL_GetTick>
 8001948:	0003      	movs	r3, r0
 800194a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800194c:	e008      	b.n	8001960 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800194e:	f7ff fb1d 	bl	8000f8c <HAL_GetTick>
 8001952:	0002      	movs	r2, r0
 8001954:	69bb      	ldr	r3, [r7, #24]
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	2b64      	cmp	r3, #100	; 0x64
 800195a:	d901      	bls.n	8001960 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 800195c:	2303      	movs	r3, #3
 800195e:	e28a      	b.n	8001e76 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001960:	4b8a      	ldr	r3, [pc, #552]	; (8001b8c <HAL_RCC_OscConfig+0x32c>)
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	2380      	movs	r3, #128	; 0x80
 8001966:	029b      	lsls	r3, r3, #10
 8001968:	4013      	ands	r3, r2
 800196a:	d0f0      	beq.n	800194e <HAL_RCC_OscConfig+0xee>
 800196c:	e015      	b.n	800199a <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800196e:	f7ff fb0d 	bl	8000f8c <HAL_GetTick>
 8001972:	0003      	movs	r3, r0
 8001974:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001976:	e008      	b.n	800198a <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001978:	f7ff fb08 	bl	8000f8c <HAL_GetTick>
 800197c:	0002      	movs	r2, r0
 800197e:	69bb      	ldr	r3, [r7, #24]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	2b64      	cmp	r3, #100	; 0x64
 8001984:	d901      	bls.n	800198a <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001986:	2303      	movs	r3, #3
 8001988:	e275      	b.n	8001e76 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800198a:	4b80      	ldr	r3, [pc, #512]	; (8001b8c <HAL_RCC_OscConfig+0x32c>)
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	2380      	movs	r3, #128	; 0x80
 8001990:	029b      	lsls	r3, r3, #10
 8001992:	4013      	ands	r3, r2
 8001994:	d1f0      	bne.n	8001978 <HAL_RCC_OscConfig+0x118>
 8001996:	e000      	b.n	800199a <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001998:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	2202      	movs	r2, #2
 80019a0:	4013      	ands	r3, r2
 80019a2:	d100      	bne.n	80019a6 <HAL_RCC_OscConfig+0x146>
 80019a4:	e069      	b.n	8001a7a <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80019a6:	4b79      	ldr	r3, [pc, #484]	; (8001b8c <HAL_RCC_OscConfig+0x32c>)
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	220c      	movs	r2, #12
 80019ac:	4013      	ands	r3, r2
 80019ae:	d00b      	beq.n	80019c8 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80019b0:	4b76      	ldr	r3, [pc, #472]	; (8001b8c <HAL_RCC_OscConfig+0x32c>)
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	220c      	movs	r2, #12
 80019b6:	4013      	ands	r3, r2
 80019b8:	2b08      	cmp	r3, #8
 80019ba:	d11c      	bne.n	80019f6 <HAL_RCC_OscConfig+0x196>
 80019bc:	4b73      	ldr	r3, [pc, #460]	; (8001b8c <HAL_RCC_OscConfig+0x32c>)
 80019be:	685a      	ldr	r2, [r3, #4]
 80019c0:	2380      	movs	r3, #128	; 0x80
 80019c2:	025b      	lsls	r3, r3, #9
 80019c4:	4013      	ands	r3, r2
 80019c6:	d116      	bne.n	80019f6 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019c8:	4b70      	ldr	r3, [pc, #448]	; (8001b8c <HAL_RCC_OscConfig+0x32c>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	2202      	movs	r2, #2
 80019ce:	4013      	ands	r3, r2
 80019d0:	d005      	beq.n	80019de <HAL_RCC_OscConfig+0x17e>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	68db      	ldr	r3, [r3, #12]
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d001      	beq.n	80019de <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e24b      	b.n	8001e76 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019de:	4b6b      	ldr	r3, [pc, #428]	; (8001b8c <HAL_RCC_OscConfig+0x32c>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	22f8      	movs	r2, #248	; 0xf8
 80019e4:	4393      	bics	r3, r2
 80019e6:	0019      	movs	r1, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	691b      	ldr	r3, [r3, #16]
 80019ec:	00da      	lsls	r2, r3, #3
 80019ee:	4b67      	ldr	r3, [pc, #412]	; (8001b8c <HAL_RCC_OscConfig+0x32c>)
 80019f0:	430a      	orrs	r2, r1
 80019f2:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019f4:	e041      	b.n	8001a7a <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	68db      	ldr	r3, [r3, #12]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d024      	beq.n	8001a48 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019fe:	4b63      	ldr	r3, [pc, #396]	; (8001b8c <HAL_RCC_OscConfig+0x32c>)
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	4b62      	ldr	r3, [pc, #392]	; (8001b8c <HAL_RCC_OscConfig+0x32c>)
 8001a04:	2101      	movs	r1, #1
 8001a06:	430a      	orrs	r2, r1
 8001a08:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a0a:	f7ff fabf 	bl	8000f8c <HAL_GetTick>
 8001a0e:	0003      	movs	r3, r0
 8001a10:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a12:	e008      	b.n	8001a26 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a14:	f7ff faba 	bl	8000f8c <HAL_GetTick>
 8001a18:	0002      	movs	r2, r0
 8001a1a:	69bb      	ldr	r3, [r7, #24]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	d901      	bls.n	8001a26 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e227      	b.n	8001e76 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a26:	4b59      	ldr	r3, [pc, #356]	; (8001b8c <HAL_RCC_OscConfig+0x32c>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	2202      	movs	r2, #2
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	d0f1      	beq.n	8001a14 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a30:	4b56      	ldr	r3, [pc, #344]	; (8001b8c <HAL_RCC_OscConfig+0x32c>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	22f8      	movs	r2, #248	; 0xf8
 8001a36:	4393      	bics	r3, r2
 8001a38:	0019      	movs	r1, r3
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	691b      	ldr	r3, [r3, #16]
 8001a3e:	00da      	lsls	r2, r3, #3
 8001a40:	4b52      	ldr	r3, [pc, #328]	; (8001b8c <HAL_RCC_OscConfig+0x32c>)
 8001a42:	430a      	orrs	r2, r1
 8001a44:	601a      	str	r2, [r3, #0]
 8001a46:	e018      	b.n	8001a7a <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a48:	4b50      	ldr	r3, [pc, #320]	; (8001b8c <HAL_RCC_OscConfig+0x32c>)
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	4b4f      	ldr	r3, [pc, #316]	; (8001b8c <HAL_RCC_OscConfig+0x32c>)
 8001a4e:	2101      	movs	r1, #1
 8001a50:	438a      	bics	r2, r1
 8001a52:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a54:	f7ff fa9a 	bl	8000f8c <HAL_GetTick>
 8001a58:	0003      	movs	r3, r0
 8001a5a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a5c:	e008      	b.n	8001a70 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a5e:	f7ff fa95 	bl	8000f8c <HAL_GetTick>
 8001a62:	0002      	movs	r2, r0
 8001a64:	69bb      	ldr	r3, [r7, #24]
 8001a66:	1ad3      	subs	r3, r2, r3
 8001a68:	2b02      	cmp	r3, #2
 8001a6a:	d901      	bls.n	8001a70 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001a6c:	2303      	movs	r3, #3
 8001a6e:	e202      	b.n	8001e76 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a70:	4b46      	ldr	r3, [pc, #280]	; (8001b8c <HAL_RCC_OscConfig+0x32c>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	2202      	movs	r2, #2
 8001a76:	4013      	ands	r3, r2
 8001a78:	d1f1      	bne.n	8001a5e <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	2208      	movs	r2, #8
 8001a80:	4013      	ands	r3, r2
 8001a82:	d036      	beq.n	8001af2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	69db      	ldr	r3, [r3, #28]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d019      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a8c:	4b3f      	ldr	r3, [pc, #252]	; (8001b8c <HAL_RCC_OscConfig+0x32c>)
 8001a8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a90:	4b3e      	ldr	r3, [pc, #248]	; (8001b8c <HAL_RCC_OscConfig+0x32c>)
 8001a92:	2101      	movs	r1, #1
 8001a94:	430a      	orrs	r2, r1
 8001a96:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a98:	f7ff fa78 	bl	8000f8c <HAL_GetTick>
 8001a9c:	0003      	movs	r3, r0
 8001a9e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aa0:	e008      	b.n	8001ab4 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001aa2:	f7ff fa73 	bl	8000f8c <HAL_GetTick>
 8001aa6:	0002      	movs	r2, r0
 8001aa8:	69bb      	ldr	r3, [r7, #24]
 8001aaa:	1ad3      	subs	r3, r2, r3
 8001aac:	2b02      	cmp	r3, #2
 8001aae:	d901      	bls.n	8001ab4 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	e1e0      	b.n	8001e76 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ab4:	4b35      	ldr	r3, [pc, #212]	; (8001b8c <HAL_RCC_OscConfig+0x32c>)
 8001ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab8:	2202      	movs	r2, #2
 8001aba:	4013      	ands	r3, r2
 8001abc:	d0f1      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x242>
 8001abe:	e018      	b.n	8001af2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ac0:	4b32      	ldr	r3, [pc, #200]	; (8001b8c <HAL_RCC_OscConfig+0x32c>)
 8001ac2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ac4:	4b31      	ldr	r3, [pc, #196]	; (8001b8c <HAL_RCC_OscConfig+0x32c>)
 8001ac6:	2101      	movs	r1, #1
 8001ac8:	438a      	bics	r2, r1
 8001aca:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001acc:	f7ff fa5e 	bl	8000f8c <HAL_GetTick>
 8001ad0:	0003      	movs	r3, r0
 8001ad2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ad4:	e008      	b.n	8001ae8 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ad6:	f7ff fa59 	bl	8000f8c <HAL_GetTick>
 8001ada:	0002      	movs	r2, r0
 8001adc:	69bb      	ldr	r3, [r7, #24]
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	2b02      	cmp	r3, #2
 8001ae2:	d901      	bls.n	8001ae8 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	e1c6      	b.n	8001e76 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ae8:	4b28      	ldr	r3, [pc, #160]	; (8001b8c <HAL_RCC_OscConfig+0x32c>)
 8001aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aec:	2202      	movs	r2, #2
 8001aee:	4013      	ands	r3, r2
 8001af0:	d1f1      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	2204      	movs	r2, #4
 8001af8:	4013      	ands	r3, r2
 8001afa:	d100      	bne.n	8001afe <HAL_RCC_OscConfig+0x29e>
 8001afc:	e0b4      	b.n	8001c68 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001afe:	201f      	movs	r0, #31
 8001b00:	183b      	adds	r3, r7, r0
 8001b02:	2200      	movs	r2, #0
 8001b04:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b06:	4b21      	ldr	r3, [pc, #132]	; (8001b8c <HAL_RCC_OscConfig+0x32c>)
 8001b08:	69da      	ldr	r2, [r3, #28]
 8001b0a:	2380      	movs	r3, #128	; 0x80
 8001b0c:	055b      	lsls	r3, r3, #21
 8001b0e:	4013      	ands	r3, r2
 8001b10:	d110      	bne.n	8001b34 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b12:	4b1e      	ldr	r3, [pc, #120]	; (8001b8c <HAL_RCC_OscConfig+0x32c>)
 8001b14:	69da      	ldr	r2, [r3, #28]
 8001b16:	4b1d      	ldr	r3, [pc, #116]	; (8001b8c <HAL_RCC_OscConfig+0x32c>)
 8001b18:	2180      	movs	r1, #128	; 0x80
 8001b1a:	0549      	lsls	r1, r1, #21
 8001b1c:	430a      	orrs	r2, r1
 8001b1e:	61da      	str	r2, [r3, #28]
 8001b20:	4b1a      	ldr	r3, [pc, #104]	; (8001b8c <HAL_RCC_OscConfig+0x32c>)
 8001b22:	69da      	ldr	r2, [r3, #28]
 8001b24:	2380      	movs	r3, #128	; 0x80
 8001b26:	055b      	lsls	r3, r3, #21
 8001b28:	4013      	ands	r3, r2
 8001b2a:	60fb      	str	r3, [r7, #12]
 8001b2c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001b2e:	183b      	adds	r3, r7, r0
 8001b30:	2201      	movs	r2, #1
 8001b32:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b34:	4b18      	ldr	r3, [pc, #96]	; (8001b98 <HAL_RCC_OscConfig+0x338>)
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	2380      	movs	r3, #128	; 0x80
 8001b3a:	005b      	lsls	r3, r3, #1
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	d11a      	bne.n	8001b76 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b40:	4b15      	ldr	r3, [pc, #84]	; (8001b98 <HAL_RCC_OscConfig+0x338>)
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	4b14      	ldr	r3, [pc, #80]	; (8001b98 <HAL_RCC_OscConfig+0x338>)
 8001b46:	2180      	movs	r1, #128	; 0x80
 8001b48:	0049      	lsls	r1, r1, #1
 8001b4a:	430a      	orrs	r2, r1
 8001b4c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b4e:	f7ff fa1d 	bl	8000f8c <HAL_GetTick>
 8001b52:	0003      	movs	r3, r0
 8001b54:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b56:	e008      	b.n	8001b6a <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b58:	f7ff fa18 	bl	8000f8c <HAL_GetTick>
 8001b5c:	0002      	movs	r2, r0
 8001b5e:	69bb      	ldr	r3, [r7, #24]
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	2b64      	cmp	r3, #100	; 0x64
 8001b64:	d901      	bls.n	8001b6a <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001b66:	2303      	movs	r3, #3
 8001b68:	e185      	b.n	8001e76 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b6a:	4b0b      	ldr	r3, [pc, #44]	; (8001b98 <HAL_RCC_OscConfig+0x338>)
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	2380      	movs	r3, #128	; 0x80
 8001b70:	005b      	lsls	r3, r3, #1
 8001b72:	4013      	ands	r3, r2
 8001b74:	d0f0      	beq.n	8001b58 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d10e      	bne.n	8001b9c <HAL_RCC_OscConfig+0x33c>
 8001b7e:	4b03      	ldr	r3, [pc, #12]	; (8001b8c <HAL_RCC_OscConfig+0x32c>)
 8001b80:	6a1a      	ldr	r2, [r3, #32]
 8001b82:	4b02      	ldr	r3, [pc, #8]	; (8001b8c <HAL_RCC_OscConfig+0x32c>)
 8001b84:	2101      	movs	r1, #1
 8001b86:	430a      	orrs	r2, r1
 8001b88:	621a      	str	r2, [r3, #32]
 8001b8a:	e035      	b.n	8001bf8 <HAL_RCC_OscConfig+0x398>
 8001b8c:	40021000 	.word	0x40021000
 8001b90:	fffeffff 	.word	0xfffeffff
 8001b94:	fffbffff 	.word	0xfffbffff
 8001b98:	40007000 	.word	0x40007000
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d10c      	bne.n	8001bbe <HAL_RCC_OscConfig+0x35e>
 8001ba4:	4bb6      	ldr	r3, [pc, #728]	; (8001e80 <HAL_RCC_OscConfig+0x620>)
 8001ba6:	6a1a      	ldr	r2, [r3, #32]
 8001ba8:	4bb5      	ldr	r3, [pc, #724]	; (8001e80 <HAL_RCC_OscConfig+0x620>)
 8001baa:	2101      	movs	r1, #1
 8001bac:	438a      	bics	r2, r1
 8001bae:	621a      	str	r2, [r3, #32]
 8001bb0:	4bb3      	ldr	r3, [pc, #716]	; (8001e80 <HAL_RCC_OscConfig+0x620>)
 8001bb2:	6a1a      	ldr	r2, [r3, #32]
 8001bb4:	4bb2      	ldr	r3, [pc, #712]	; (8001e80 <HAL_RCC_OscConfig+0x620>)
 8001bb6:	2104      	movs	r1, #4
 8001bb8:	438a      	bics	r2, r1
 8001bba:	621a      	str	r2, [r3, #32]
 8001bbc:	e01c      	b.n	8001bf8 <HAL_RCC_OscConfig+0x398>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	2b05      	cmp	r3, #5
 8001bc4:	d10c      	bne.n	8001be0 <HAL_RCC_OscConfig+0x380>
 8001bc6:	4bae      	ldr	r3, [pc, #696]	; (8001e80 <HAL_RCC_OscConfig+0x620>)
 8001bc8:	6a1a      	ldr	r2, [r3, #32]
 8001bca:	4bad      	ldr	r3, [pc, #692]	; (8001e80 <HAL_RCC_OscConfig+0x620>)
 8001bcc:	2104      	movs	r1, #4
 8001bce:	430a      	orrs	r2, r1
 8001bd0:	621a      	str	r2, [r3, #32]
 8001bd2:	4bab      	ldr	r3, [pc, #684]	; (8001e80 <HAL_RCC_OscConfig+0x620>)
 8001bd4:	6a1a      	ldr	r2, [r3, #32]
 8001bd6:	4baa      	ldr	r3, [pc, #680]	; (8001e80 <HAL_RCC_OscConfig+0x620>)
 8001bd8:	2101      	movs	r1, #1
 8001bda:	430a      	orrs	r2, r1
 8001bdc:	621a      	str	r2, [r3, #32]
 8001bde:	e00b      	b.n	8001bf8 <HAL_RCC_OscConfig+0x398>
 8001be0:	4ba7      	ldr	r3, [pc, #668]	; (8001e80 <HAL_RCC_OscConfig+0x620>)
 8001be2:	6a1a      	ldr	r2, [r3, #32]
 8001be4:	4ba6      	ldr	r3, [pc, #664]	; (8001e80 <HAL_RCC_OscConfig+0x620>)
 8001be6:	2101      	movs	r1, #1
 8001be8:	438a      	bics	r2, r1
 8001bea:	621a      	str	r2, [r3, #32]
 8001bec:	4ba4      	ldr	r3, [pc, #656]	; (8001e80 <HAL_RCC_OscConfig+0x620>)
 8001bee:	6a1a      	ldr	r2, [r3, #32]
 8001bf0:	4ba3      	ldr	r3, [pc, #652]	; (8001e80 <HAL_RCC_OscConfig+0x620>)
 8001bf2:	2104      	movs	r1, #4
 8001bf4:	438a      	bics	r2, r1
 8001bf6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d014      	beq.n	8001c2a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c00:	f7ff f9c4 	bl	8000f8c <HAL_GetTick>
 8001c04:	0003      	movs	r3, r0
 8001c06:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c08:	e009      	b.n	8001c1e <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c0a:	f7ff f9bf 	bl	8000f8c <HAL_GetTick>
 8001c0e:	0002      	movs	r2, r0
 8001c10:	69bb      	ldr	r3, [r7, #24]
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	4a9b      	ldr	r2, [pc, #620]	; (8001e84 <HAL_RCC_OscConfig+0x624>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d901      	bls.n	8001c1e <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e12b      	b.n	8001e76 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c1e:	4b98      	ldr	r3, [pc, #608]	; (8001e80 <HAL_RCC_OscConfig+0x620>)
 8001c20:	6a1b      	ldr	r3, [r3, #32]
 8001c22:	2202      	movs	r2, #2
 8001c24:	4013      	ands	r3, r2
 8001c26:	d0f0      	beq.n	8001c0a <HAL_RCC_OscConfig+0x3aa>
 8001c28:	e013      	b.n	8001c52 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c2a:	f7ff f9af 	bl	8000f8c <HAL_GetTick>
 8001c2e:	0003      	movs	r3, r0
 8001c30:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c32:	e009      	b.n	8001c48 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c34:	f7ff f9aa 	bl	8000f8c <HAL_GetTick>
 8001c38:	0002      	movs	r2, r0
 8001c3a:	69bb      	ldr	r3, [r7, #24]
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	4a91      	ldr	r2, [pc, #580]	; (8001e84 <HAL_RCC_OscConfig+0x624>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d901      	bls.n	8001c48 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001c44:	2303      	movs	r3, #3
 8001c46:	e116      	b.n	8001e76 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c48:	4b8d      	ldr	r3, [pc, #564]	; (8001e80 <HAL_RCC_OscConfig+0x620>)
 8001c4a:	6a1b      	ldr	r3, [r3, #32]
 8001c4c:	2202      	movs	r2, #2
 8001c4e:	4013      	ands	r3, r2
 8001c50:	d1f0      	bne.n	8001c34 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001c52:	231f      	movs	r3, #31
 8001c54:	18fb      	adds	r3, r7, r3
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d105      	bne.n	8001c68 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c5c:	4b88      	ldr	r3, [pc, #544]	; (8001e80 <HAL_RCC_OscConfig+0x620>)
 8001c5e:	69da      	ldr	r2, [r3, #28]
 8001c60:	4b87      	ldr	r3, [pc, #540]	; (8001e80 <HAL_RCC_OscConfig+0x620>)
 8001c62:	4989      	ldr	r1, [pc, #548]	; (8001e88 <HAL_RCC_OscConfig+0x628>)
 8001c64:	400a      	ands	r2, r1
 8001c66:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	2210      	movs	r2, #16
 8001c6e:	4013      	ands	r3, r2
 8001c70:	d063      	beq.n	8001d3a <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	695b      	ldr	r3, [r3, #20]
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d12a      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001c7a:	4b81      	ldr	r3, [pc, #516]	; (8001e80 <HAL_RCC_OscConfig+0x620>)
 8001c7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c7e:	4b80      	ldr	r3, [pc, #512]	; (8001e80 <HAL_RCC_OscConfig+0x620>)
 8001c80:	2104      	movs	r1, #4
 8001c82:	430a      	orrs	r2, r1
 8001c84:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001c86:	4b7e      	ldr	r3, [pc, #504]	; (8001e80 <HAL_RCC_OscConfig+0x620>)
 8001c88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c8a:	4b7d      	ldr	r3, [pc, #500]	; (8001e80 <HAL_RCC_OscConfig+0x620>)
 8001c8c:	2101      	movs	r1, #1
 8001c8e:	430a      	orrs	r2, r1
 8001c90:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c92:	f7ff f97b 	bl	8000f8c <HAL_GetTick>
 8001c96:	0003      	movs	r3, r0
 8001c98:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001c9a:	e008      	b.n	8001cae <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001c9c:	f7ff f976 	bl	8000f8c <HAL_GetTick>
 8001ca0:	0002      	movs	r2, r0
 8001ca2:	69bb      	ldr	r3, [r7, #24]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d901      	bls.n	8001cae <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e0e3      	b.n	8001e76 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001cae:	4b74      	ldr	r3, [pc, #464]	; (8001e80 <HAL_RCC_OscConfig+0x620>)
 8001cb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cb2:	2202      	movs	r2, #2
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	d0f1      	beq.n	8001c9c <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001cb8:	4b71      	ldr	r3, [pc, #452]	; (8001e80 <HAL_RCC_OscConfig+0x620>)
 8001cba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cbc:	22f8      	movs	r2, #248	; 0xf8
 8001cbe:	4393      	bics	r3, r2
 8001cc0:	0019      	movs	r1, r3
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	699b      	ldr	r3, [r3, #24]
 8001cc6:	00da      	lsls	r2, r3, #3
 8001cc8:	4b6d      	ldr	r3, [pc, #436]	; (8001e80 <HAL_RCC_OscConfig+0x620>)
 8001cca:	430a      	orrs	r2, r1
 8001ccc:	635a      	str	r2, [r3, #52]	; 0x34
 8001cce:	e034      	b.n	8001d3a <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	695b      	ldr	r3, [r3, #20]
 8001cd4:	3305      	adds	r3, #5
 8001cd6:	d111      	bne.n	8001cfc <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001cd8:	4b69      	ldr	r3, [pc, #420]	; (8001e80 <HAL_RCC_OscConfig+0x620>)
 8001cda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cdc:	4b68      	ldr	r3, [pc, #416]	; (8001e80 <HAL_RCC_OscConfig+0x620>)
 8001cde:	2104      	movs	r1, #4
 8001ce0:	438a      	bics	r2, r1
 8001ce2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001ce4:	4b66      	ldr	r3, [pc, #408]	; (8001e80 <HAL_RCC_OscConfig+0x620>)
 8001ce6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ce8:	22f8      	movs	r2, #248	; 0xf8
 8001cea:	4393      	bics	r3, r2
 8001cec:	0019      	movs	r1, r3
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	699b      	ldr	r3, [r3, #24]
 8001cf2:	00da      	lsls	r2, r3, #3
 8001cf4:	4b62      	ldr	r3, [pc, #392]	; (8001e80 <HAL_RCC_OscConfig+0x620>)
 8001cf6:	430a      	orrs	r2, r1
 8001cf8:	635a      	str	r2, [r3, #52]	; 0x34
 8001cfa:	e01e      	b.n	8001d3a <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001cfc:	4b60      	ldr	r3, [pc, #384]	; (8001e80 <HAL_RCC_OscConfig+0x620>)
 8001cfe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d00:	4b5f      	ldr	r3, [pc, #380]	; (8001e80 <HAL_RCC_OscConfig+0x620>)
 8001d02:	2104      	movs	r1, #4
 8001d04:	430a      	orrs	r2, r1
 8001d06:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001d08:	4b5d      	ldr	r3, [pc, #372]	; (8001e80 <HAL_RCC_OscConfig+0x620>)
 8001d0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d0c:	4b5c      	ldr	r3, [pc, #368]	; (8001e80 <HAL_RCC_OscConfig+0x620>)
 8001d0e:	2101      	movs	r1, #1
 8001d10:	438a      	bics	r2, r1
 8001d12:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d14:	f7ff f93a 	bl	8000f8c <HAL_GetTick>
 8001d18:	0003      	movs	r3, r0
 8001d1a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001d1c:	e008      	b.n	8001d30 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001d1e:	f7ff f935 	bl	8000f8c <HAL_GetTick>
 8001d22:	0002      	movs	r2, r0
 8001d24:	69bb      	ldr	r3, [r7, #24]
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d901      	bls.n	8001d30 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	e0a2      	b.n	8001e76 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001d30:	4b53      	ldr	r3, [pc, #332]	; (8001e80 <HAL_RCC_OscConfig+0x620>)
 8001d32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d34:	2202      	movs	r2, #2
 8001d36:	4013      	ands	r3, r2
 8001d38:	d1f1      	bne.n	8001d1e <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6a1b      	ldr	r3, [r3, #32]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d100      	bne.n	8001d44 <HAL_RCC_OscConfig+0x4e4>
 8001d42:	e097      	b.n	8001e74 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d44:	4b4e      	ldr	r3, [pc, #312]	; (8001e80 <HAL_RCC_OscConfig+0x620>)
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	220c      	movs	r2, #12
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	2b08      	cmp	r3, #8
 8001d4e:	d100      	bne.n	8001d52 <HAL_RCC_OscConfig+0x4f2>
 8001d50:	e06b      	b.n	8001e2a <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6a1b      	ldr	r3, [r3, #32]
 8001d56:	2b02      	cmp	r3, #2
 8001d58:	d14c      	bne.n	8001df4 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d5a:	4b49      	ldr	r3, [pc, #292]	; (8001e80 <HAL_RCC_OscConfig+0x620>)
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	4b48      	ldr	r3, [pc, #288]	; (8001e80 <HAL_RCC_OscConfig+0x620>)
 8001d60:	494a      	ldr	r1, [pc, #296]	; (8001e8c <HAL_RCC_OscConfig+0x62c>)
 8001d62:	400a      	ands	r2, r1
 8001d64:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d66:	f7ff f911 	bl	8000f8c <HAL_GetTick>
 8001d6a:	0003      	movs	r3, r0
 8001d6c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d6e:	e008      	b.n	8001d82 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d70:	f7ff f90c 	bl	8000f8c <HAL_GetTick>
 8001d74:	0002      	movs	r2, r0
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	d901      	bls.n	8001d82 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	e079      	b.n	8001e76 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d82:	4b3f      	ldr	r3, [pc, #252]	; (8001e80 <HAL_RCC_OscConfig+0x620>)
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	2380      	movs	r3, #128	; 0x80
 8001d88:	049b      	lsls	r3, r3, #18
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	d1f0      	bne.n	8001d70 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d8e:	4b3c      	ldr	r3, [pc, #240]	; (8001e80 <HAL_RCC_OscConfig+0x620>)
 8001d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d92:	220f      	movs	r2, #15
 8001d94:	4393      	bics	r3, r2
 8001d96:	0019      	movs	r1, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d9c:	4b38      	ldr	r3, [pc, #224]	; (8001e80 <HAL_RCC_OscConfig+0x620>)
 8001d9e:	430a      	orrs	r2, r1
 8001da0:	62da      	str	r2, [r3, #44]	; 0x2c
 8001da2:	4b37      	ldr	r3, [pc, #220]	; (8001e80 <HAL_RCC_OscConfig+0x620>)
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	4a3a      	ldr	r2, [pc, #232]	; (8001e90 <HAL_RCC_OscConfig+0x630>)
 8001da8:	4013      	ands	r3, r2
 8001daa:	0019      	movs	r1, r3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db4:	431a      	orrs	r2, r3
 8001db6:	4b32      	ldr	r3, [pc, #200]	; (8001e80 <HAL_RCC_OscConfig+0x620>)
 8001db8:	430a      	orrs	r2, r1
 8001dba:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001dbc:	4b30      	ldr	r3, [pc, #192]	; (8001e80 <HAL_RCC_OscConfig+0x620>)
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	4b2f      	ldr	r3, [pc, #188]	; (8001e80 <HAL_RCC_OscConfig+0x620>)
 8001dc2:	2180      	movs	r1, #128	; 0x80
 8001dc4:	0449      	lsls	r1, r1, #17
 8001dc6:	430a      	orrs	r2, r1
 8001dc8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dca:	f7ff f8df 	bl	8000f8c <HAL_GetTick>
 8001dce:	0003      	movs	r3, r0
 8001dd0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001dd2:	e008      	b.n	8001de6 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dd4:	f7ff f8da 	bl	8000f8c <HAL_GetTick>
 8001dd8:	0002      	movs	r2, r0
 8001dda:	69bb      	ldr	r3, [r7, #24]
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	2b02      	cmp	r3, #2
 8001de0:	d901      	bls.n	8001de6 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001de2:	2303      	movs	r3, #3
 8001de4:	e047      	b.n	8001e76 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001de6:	4b26      	ldr	r3, [pc, #152]	; (8001e80 <HAL_RCC_OscConfig+0x620>)
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	2380      	movs	r3, #128	; 0x80
 8001dec:	049b      	lsls	r3, r3, #18
 8001dee:	4013      	ands	r3, r2
 8001df0:	d0f0      	beq.n	8001dd4 <HAL_RCC_OscConfig+0x574>
 8001df2:	e03f      	b.n	8001e74 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001df4:	4b22      	ldr	r3, [pc, #136]	; (8001e80 <HAL_RCC_OscConfig+0x620>)
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	4b21      	ldr	r3, [pc, #132]	; (8001e80 <HAL_RCC_OscConfig+0x620>)
 8001dfa:	4924      	ldr	r1, [pc, #144]	; (8001e8c <HAL_RCC_OscConfig+0x62c>)
 8001dfc:	400a      	ands	r2, r1
 8001dfe:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e00:	f7ff f8c4 	bl	8000f8c <HAL_GetTick>
 8001e04:	0003      	movs	r3, r0
 8001e06:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e08:	e008      	b.n	8001e1c <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e0a:	f7ff f8bf 	bl	8000f8c <HAL_GetTick>
 8001e0e:	0002      	movs	r2, r0
 8001e10:	69bb      	ldr	r3, [r7, #24]
 8001e12:	1ad3      	subs	r3, r2, r3
 8001e14:	2b02      	cmp	r3, #2
 8001e16:	d901      	bls.n	8001e1c <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001e18:	2303      	movs	r3, #3
 8001e1a:	e02c      	b.n	8001e76 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e1c:	4b18      	ldr	r3, [pc, #96]	; (8001e80 <HAL_RCC_OscConfig+0x620>)
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	2380      	movs	r3, #128	; 0x80
 8001e22:	049b      	lsls	r3, r3, #18
 8001e24:	4013      	ands	r3, r2
 8001e26:	d1f0      	bne.n	8001e0a <HAL_RCC_OscConfig+0x5aa>
 8001e28:	e024      	b.n	8001e74 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6a1b      	ldr	r3, [r3, #32]
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d101      	bne.n	8001e36 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e01f      	b.n	8001e76 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001e36:	4b12      	ldr	r3, [pc, #72]	; (8001e80 <HAL_RCC_OscConfig+0x620>)
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001e3c:	4b10      	ldr	r3, [pc, #64]	; (8001e80 <HAL_RCC_OscConfig+0x620>)
 8001e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e40:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e42:	697a      	ldr	r2, [r7, #20]
 8001e44:	2380      	movs	r3, #128	; 0x80
 8001e46:	025b      	lsls	r3, r3, #9
 8001e48:	401a      	ands	r2, r3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	d10e      	bne.n	8001e70 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	220f      	movs	r2, #15
 8001e56:	401a      	ands	r2, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d107      	bne.n	8001e70 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001e60:	697a      	ldr	r2, [r7, #20]
 8001e62:	23f0      	movs	r3, #240	; 0xf0
 8001e64:	039b      	lsls	r3, r3, #14
 8001e66:	401a      	ands	r2, r3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d001      	beq.n	8001e74 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e000      	b.n	8001e76 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001e74:	2300      	movs	r3, #0
}
 8001e76:	0018      	movs	r0, r3
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	b008      	add	sp, #32
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	46c0      	nop			; (mov r8, r8)
 8001e80:	40021000 	.word	0x40021000
 8001e84:	00001388 	.word	0x00001388
 8001e88:	efffffff 	.word	0xefffffff
 8001e8c:	feffffff 	.word	0xfeffffff
 8001e90:	ffc2ffff 	.word	0xffc2ffff

08001e94 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d101      	bne.n	8001ea8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e0b3      	b.n	8002010 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ea8:	4b5b      	ldr	r3, [pc, #364]	; (8002018 <HAL_RCC_ClockConfig+0x184>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	2201      	movs	r2, #1
 8001eae:	4013      	ands	r3, r2
 8001eb0:	683a      	ldr	r2, [r7, #0]
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d911      	bls.n	8001eda <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eb6:	4b58      	ldr	r3, [pc, #352]	; (8002018 <HAL_RCC_ClockConfig+0x184>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	2201      	movs	r2, #1
 8001ebc:	4393      	bics	r3, r2
 8001ebe:	0019      	movs	r1, r3
 8001ec0:	4b55      	ldr	r3, [pc, #340]	; (8002018 <HAL_RCC_ClockConfig+0x184>)
 8001ec2:	683a      	ldr	r2, [r7, #0]
 8001ec4:	430a      	orrs	r2, r1
 8001ec6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ec8:	4b53      	ldr	r3, [pc, #332]	; (8002018 <HAL_RCC_ClockConfig+0x184>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	2201      	movs	r2, #1
 8001ece:	4013      	ands	r3, r2
 8001ed0:	683a      	ldr	r2, [r7, #0]
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d001      	beq.n	8001eda <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e09a      	b.n	8002010 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	2202      	movs	r2, #2
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	d015      	beq.n	8001f10 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	2204      	movs	r2, #4
 8001eea:	4013      	ands	r3, r2
 8001eec:	d006      	beq.n	8001efc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001eee:	4b4b      	ldr	r3, [pc, #300]	; (800201c <HAL_RCC_ClockConfig+0x188>)
 8001ef0:	685a      	ldr	r2, [r3, #4]
 8001ef2:	4b4a      	ldr	r3, [pc, #296]	; (800201c <HAL_RCC_ClockConfig+0x188>)
 8001ef4:	21e0      	movs	r1, #224	; 0xe0
 8001ef6:	00c9      	lsls	r1, r1, #3
 8001ef8:	430a      	orrs	r2, r1
 8001efa:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001efc:	4b47      	ldr	r3, [pc, #284]	; (800201c <HAL_RCC_ClockConfig+0x188>)
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	22f0      	movs	r2, #240	; 0xf0
 8001f02:	4393      	bics	r3, r2
 8001f04:	0019      	movs	r1, r3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	689a      	ldr	r2, [r3, #8]
 8001f0a:	4b44      	ldr	r3, [pc, #272]	; (800201c <HAL_RCC_ClockConfig+0x188>)
 8001f0c:	430a      	orrs	r2, r1
 8001f0e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	2201      	movs	r2, #1
 8001f16:	4013      	ands	r3, r2
 8001f18:	d040      	beq.n	8001f9c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d107      	bne.n	8001f32 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f22:	4b3e      	ldr	r3, [pc, #248]	; (800201c <HAL_RCC_ClockConfig+0x188>)
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	2380      	movs	r3, #128	; 0x80
 8001f28:	029b      	lsls	r3, r3, #10
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	d114      	bne.n	8001f58 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e06e      	b.n	8002010 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	2b02      	cmp	r3, #2
 8001f38:	d107      	bne.n	8001f4a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f3a:	4b38      	ldr	r3, [pc, #224]	; (800201c <HAL_RCC_ClockConfig+0x188>)
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	2380      	movs	r3, #128	; 0x80
 8001f40:	049b      	lsls	r3, r3, #18
 8001f42:	4013      	ands	r3, r2
 8001f44:	d108      	bne.n	8001f58 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e062      	b.n	8002010 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f4a:	4b34      	ldr	r3, [pc, #208]	; (800201c <HAL_RCC_ClockConfig+0x188>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	2202      	movs	r2, #2
 8001f50:	4013      	ands	r3, r2
 8001f52:	d101      	bne.n	8001f58 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e05b      	b.n	8002010 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f58:	4b30      	ldr	r3, [pc, #192]	; (800201c <HAL_RCC_ClockConfig+0x188>)
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	2203      	movs	r2, #3
 8001f5e:	4393      	bics	r3, r2
 8001f60:	0019      	movs	r1, r3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	685a      	ldr	r2, [r3, #4]
 8001f66:	4b2d      	ldr	r3, [pc, #180]	; (800201c <HAL_RCC_ClockConfig+0x188>)
 8001f68:	430a      	orrs	r2, r1
 8001f6a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f6c:	f7ff f80e 	bl	8000f8c <HAL_GetTick>
 8001f70:	0003      	movs	r3, r0
 8001f72:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f74:	e009      	b.n	8001f8a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f76:	f7ff f809 	bl	8000f8c <HAL_GetTick>
 8001f7a:	0002      	movs	r2, r0
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	1ad3      	subs	r3, r2, r3
 8001f80:	4a27      	ldr	r2, [pc, #156]	; (8002020 <HAL_RCC_ClockConfig+0x18c>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d901      	bls.n	8001f8a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	e042      	b.n	8002010 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f8a:	4b24      	ldr	r3, [pc, #144]	; (800201c <HAL_RCC_ClockConfig+0x188>)
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	220c      	movs	r2, #12
 8001f90:	401a      	ands	r2, r3
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d1ec      	bne.n	8001f76 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f9c:	4b1e      	ldr	r3, [pc, #120]	; (8002018 <HAL_RCC_ClockConfig+0x184>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	683a      	ldr	r2, [r7, #0]
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d211      	bcs.n	8001fce <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001faa:	4b1b      	ldr	r3, [pc, #108]	; (8002018 <HAL_RCC_ClockConfig+0x184>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	2201      	movs	r2, #1
 8001fb0:	4393      	bics	r3, r2
 8001fb2:	0019      	movs	r1, r3
 8001fb4:	4b18      	ldr	r3, [pc, #96]	; (8002018 <HAL_RCC_ClockConfig+0x184>)
 8001fb6:	683a      	ldr	r2, [r7, #0]
 8001fb8:	430a      	orrs	r2, r1
 8001fba:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fbc:	4b16      	ldr	r3, [pc, #88]	; (8002018 <HAL_RCC_ClockConfig+0x184>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	683a      	ldr	r2, [r7, #0]
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d001      	beq.n	8001fce <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e020      	b.n	8002010 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	2204      	movs	r2, #4
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	d009      	beq.n	8001fec <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001fd8:	4b10      	ldr	r3, [pc, #64]	; (800201c <HAL_RCC_ClockConfig+0x188>)
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	4a11      	ldr	r2, [pc, #68]	; (8002024 <HAL_RCC_ClockConfig+0x190>)
 8001fde:	4013      	ands	r3, r2
 8001fe0:	0019      	movs	r1, r3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	68da      	ldr	r2, [r3, #12]
 8001fe6:	4b0d      	ldr	r3, [pc, #52]	; (800201c <HAL_RCC_ClockConfig+0x188>)
 8001fe8:	430a      	orrs	r2, r1
 8001fea:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001fec:	f000 f820 	bl	8002030 <HAL_RCC_GetSysClockFreq>
 8001ff0:	0001      	movs	r1, r0
 8001ff2:	4b0a      	ldr	r3, [pc, #40]	; (800201c <HAL_RCC_ClockConfig+0x188>)
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	091b      	lsrs	r3, r3, #4
 8001ff8:	220f      	movs	r2, #15
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	4a0a      	ldr	r2, [pc, #40]	; (8002028 <HAL_RCC_ClockConfig+0x194>)
 8001ffe:	5cd3      	ldrb	r3, [r2, r3]
 8002000:	000a      	movs	r2, r1
 8002002:	40da      	lsrs	r2, r3
 8002004:	4b09      	ldr	r3, [pc, #36]	; (800202c <HAL_RCC_ClockConfig+0x198>)
 8002006:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002008:	2003      	movs	r0, #3
 800200a:	f7fe ff79 	bl	8000f00 <HAL_InitTick>
  
  return HAL_OK;
 800200e:	2300      	movs	r3, #0
}
 8002010:	0018      	movs	r0, r3
 8002012:	46bd      	mov	sp, r7
 8002014:	b004      	add	sp, #16
 8002016:	bd80      	pop	{r7, pc}
 8002018:	40022000 	.word	0x40022000
 800201c:	40021000 	.word	0x40021000
 8002020:	00001388 	.word	0x00001388
 8002024:	fffff8ff 	.word	0xfffff8ff
 8002028:	08004e54 	.word	0x08004e54
 800202c:	20000000 	.word	0x20000000

08002030 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b086      	sub	sp, #24
 8002034:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002036:	2300      	movs	r3, #0
 8002038:	60fb      	str	r3, [r7, #12]
 800203a:	2300      	movs	r3, #0
 800203c:	60bb      	str	r3, [r7, #8]
 800203e:	2300      	movs	r3, #0
 8002040:	617b      	str	r3, [r7, #20]
 8002042:	2300      	movs	r3, #0
 8002044:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002046:	2300      	movs	r3, #0
 8002048:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800204a:	4b20      	ldr	r3, [pc, #128]	; (80020cc <HAL_RCC_GetSysClockFreq+0x9c>)
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	220c      	movs	r2, #12
 8002054:	4013      	ands	r3, r2
 8002056:	2b04      	cmp	r3, #4
 8002058:	d002      	beq.n	8002060 <HAL_RCC_GetSysClockFreq+0x30>
 800205a:	2b08      	cmp	r3, #8
 800205c:	d003      	beq.n	8002066 <HAL_RCC_GetSysClockFreq+0x36>
 800205e:	e02c      	b.n	80020ba <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002060:	4b1b      	ldr	r3, [pc, #108]	; (80020d0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002062:	613b      	str	r3, [r7, #16]
      break;
 8002064:	e02c      	b.n	80020c0 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	0c9b      	lsrs	r3, r3, #18
 800206a:	220f      	movs	r2, #15
 800206c:	4013      	ands	r3, r2
 800206e:	4a19      	ldr	r2, [pc, #100]	; (80020d4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002070:	5cd3      	ldrb	r3, [r2, r3]
 8002072:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002074:	4b15      	ldr	r3, [pc, #84]	; (80020cc <HAL_RCC_GetSysClockFreq+0x9c>)
 8002076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002078:	220f      	movs	r2, #15
 800207a:	4013      	ands	r3, r2
 800207c:	4a16      	ldr	r2, [pc, #88]	; (80020d8 <HAL_RCC_GetSysClockFreq+0xa8>)
 800207e:	5cd3      	ldrb	r3, [r2, r3]
 8002080:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002082:	68fa      	ldr	r2, [r7, #12]
 8002084:	2380      	movs	r3, #128	; 0x80
 8002086:	025b      	lsls	r3, r3, #9
 8002088:	4013      	ands	r3, r2
 800208a:	d009      	beq.n	80020a0 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800208c:	68b9      	ldr	r1, [r7, #8]
 800208e:	4810      	ldr	r0, [pc, #64]	; (80020d0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002090:	f7fe f83a 	bl	8000108 <__udivsi3>
 8002094:	0003      	movs	r3, r0
 8002096:	001a      	movs	r2, r3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	4353      	muls	r3, r2
 800209c:	617b      	str	r3, [r7, #20]
 800209e:	e009      	b.n	80020b4 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80020a0:	6879      	ldr	r1, [r7, #4]
 80020a2:	000a      	movs	r2, r1
 80020a4:	0152      	lsls	r2, r2, #5
 80020a6:	1a52      	subs	r2, r2, r1
 80020a8:	0193      	lsls	r3, r2, #6
 80020aa:	1a9b      	subs	r3, r3, r2
 80020ac:	00db      	lsls	r3, r3, #3
 80020ae:	185b      	adds	r3, r3, r1
 80020b0:	021b      	lsls	r3, r3, #8
 80020b2:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	613b      	str	r3, [r7, #16]
      break;
 80020b8:	e002      	b.n	80020c0 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80020ba:	4b05      	ldr	r3, [pc, #20]	; (80020d0 <HAL_RCC_GetSysClockFreq+0xa0>)
 80020bc:	613b      	str	r3, [r7, #16]
      break;
 80020be:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80020c0:	693b      	ldr	r3, [r7, #16]
}
 80020c2:	0018      	movs	r0, r3
 80020c4:	46bd      	mov	sp, r7
 80020c6:	b006      	add	sp, #24
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	46c0      	nop			; (mov r8, r8)
 80020cc:	40021000 	.word	0x40021000
 80020d0:	007a1200 	.word	0x007a1200
 80020d4:	08004e64 	.word	0x08004e64
 80020d8:	08004e74 	.word	0x08004e74

080020dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d101      	bne.n	80020ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e042      	b.n	8002174 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	223d      	movs	r2, #61	; 0x3d
 80020f2:	5c9b      	ldrb	r3, [r3, r2]
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d107      	bne.n	800210a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	223c      	movs	r2, #60	; 0x3c
 80020fe:	2100      	movs	r1, #0
 8002100:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	0018      	movs	r0, r3
 8002106:	f7fe fd59 	bl	8000bbc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	223d      	movs	r2, #61	; 0x3d
 800210e:	2102      	movs	r1, #2
 8002110:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	3304      	adds	r3, #4
 800211a:	0019      	movs	r1, r3
 800211c:	0010      	movs	r0, r2
 800211e:	f001 f9ad 	bl	800347c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2246      	movs	r2, #70	; 0x46
 8002126:	2101      	movs	r1, #1
 8002128:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	223e      	movs	r2, #62	; 0x3e
 800212e:	2101      	movs	r1, #1
 8002130:	5499      	strb	r1, [r3, r2]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	223f      	movs	r2, #63	; 0x3f
 8002136:	2101      	movs	r1, #1
 8002138:	5499      	strb	r1, [r3, r2]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2240      	movs	r2, #64	; 0x40
 800213e:	2101      	movs	r1, #1
 8002140:	5499      	strb	r1, [r3, r2]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2241      	movs	r2, #65	; 0x41
 8002146:	2101      	movs	r1, #1
 8002148:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2242      	movs	r2, #66	; 0x42
 800214e:	2101      	movs	r1, #1
 8002150:	5499      	strb	r1, [r3, r2]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2243      	movs	r2, #67	; 0x43
 8002156:	2101      	movs	r1, #1
 8002158:	5499      	strb	r1, [r3, r2]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2244      	movs	r2, #68	; 0x44
 800215e:	2101      	movs	r1, #1
 8002160:	5499      	strb	r1, [r3, r2]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2245      	movs	r2, #69	; 0x45
 8002166:	2101      	movs	r1, #1
 8002168:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	223d      	movs	r2, #61	; 0x3d
 800216e:	2101      	movs	r1, #1
 8002170:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002172:	2300      	movs	r3, #0
}
 8002174:	0018      	movs	r0, r3
 8002176:	46bd      	mov	sp, r7
 8002178:	b002      	add	sp, #8
 800217a:	bd80      	pop	{r7, pc}

0800217c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b084      	sub	sp, #16
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	223d      	movs	r2, #61	; 0x3d
 8002188:	5c9b      	ldrb	r3, [r3, r2]
 800218a:	b2db      	uxtb	r3, r3
 800218c:	2b01      	cmp	r3, #1
 800218e:	d001      	beq.n	8002194 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e033      	b.n	80021fc <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	223d      	movs	r2, #61	; 0x3d
 8002198:	2102      	movs	r1, #2
 800219a:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a18      	ldr	r2, [pc, #96]	; (8002204 <HAL_TIM_Base_Start+0x88>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d00f      	beq.n	80021c6 <HAL_TIM_Base_Start+0x4a>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	2380      	movs	r3, #128	; 0x80
 80021ac:	05db      	lsls	r3, r3, #23
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d009      	beq.n	80021c6 <HAL_TIM_Base_Start+0x4a>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a14      	ldr	r2, [pc, #80]	; (8002208 <HAL_TIM_Base_Start+0x8c>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d004      	beq.n	80021c6 <HAL_TIM_Base_Start+0x4a>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a12      	ldr	r2, [pc, #72]	; (800220c <HAL_TIM_Base_Start+0x90>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d111      	bne.n	80021ea <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	2207      	movs	r2, #7
 80021ce:	4013      	ands	r3, r2
 80021d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	2b06      	cmp	r3, #6
 80021d6:	d010      	beq.n	80021fa <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	2101      	movs	r1, #1
 80021e4:	430a      	orrs	r2, r1
 80021e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021e8:	e007      	b.n	80021fa <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	2101      	movs	r1, #1
 80021f6:	430a      	orrs	r2, r1
 80021f8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80021fa:	2300      	movs	r3, #0
}
 80021fc:	0018      	movs	r0, r3
 80021fe:	46bd      	mov	sp, r7
 8002200:	b004      	add	sp, #16
 8002202:	bd80      	pop	{r7, pc}
 8002204:	40012c00 	.word	0x40012c00
 8002208:	40000400 	.word	0x40000400
 800220c:	40014000 	.word	0x40014000

08002210 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b084      	sub	sp, #16
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	223d      	movs	r2, #61	; 0x3d
 800221c:	5c9b      	ldrb	r3, [r3, r2]
 800221e:	b2db      	uxtb	r3, r3
 8002220:	2b01      	cmp	r3, #1
 8002222:	d001      	beq.n	8002228 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e03b      	b.n	80022a0 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	223d      	movs	r2, #61	; 0x3d
 800222c:	2102      	movs	r1, #2
 800222e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	68da      	ldr	r2, [r3, #12]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	2101      	movs	r1, #1
 800223c:	430a      	orrs	r2, r1
 800223e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a18      	ldr	r2, [pc, #96]	; (80022a8 <HAL_TIM_Base_Start_IT+0x98>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d00f      	beq.n	800226a <HAL_TIM_Base_Start_IT+0x5a>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	2380      	movs	r3, #128	; 0x80
 8002250:	05db      	lsls	r3, r3, #23
 8002252:	429a      	cmp	r2, r3
 8002254:	d009      	beq.n	800226a <HAL_TIM_Base_Start_IT+0x5a>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a14      	ldr	r2, [pc, #80]	; (80022ac <HAL_TIM_Base_Start_IT+0x9c>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d004      	beq.n	800226a <HAL_TIM_Base_Start_IT+0x5a>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a12      	ldr	r2, [pc, #72]	; (80022b0 <HAL_TIM_Base_Start_IT+0xa0>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d111      	bne.n	800228e <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	2207      	movs	r2, #7
 8002272:	4013      	ands	r3, r2
 8002274:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2b06      	cmp	r3, #6
 800227a:	d010      	beq.n	800229e <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	2101      	movs	r1, #1
 8002288:	430a      	orrs	r2, r1
 800228a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800228c:	e007      	b.n	800229e <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	2101      	movs	r1, #1
 800229a:	430a      	orrs	r2, r1
 800229c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800229e:	2300      	movs	r3, #0
}
 80022a0:	0018      	movs	r0, r3
 80022a2:	46bd      	mov	sp, r7
 80022a4:	b004      	add	sp, #16
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	40012c00 	.word	0x40012c00
 80022ac:	40000400 	.word	0x40000400
 80022b0:	40014000 	.word	0x40014000

080022b4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d101      	bne.n	80022c6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e042      	b.n	800234c <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	223d      	movs	r2, #61	; 0x3d
 80022ca:	5c9b      	ldrb	r3, [r3, r2]
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d107      	bne.n	80022e2 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	223c      	movs	r2, #60	; 0x3c
 80022d6:	2100      	movs	r1, #0
 80022d8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	0018      	movs	r0, r3
 80022de:	f7fe fbbf 	bl	8000a60 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	223d      	movs	r2, #61	; 0x3d
 80022e6:	2102      	movs	r1, #2
 80022e8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	3304      	adds	r3, #4
 80022f2:	0019      	movs	r1, r3
 80022f4:	0010      	movs	r0, r2
 80022f6:	f001 f8c1 	bl	800347c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2246      	movs	r2, #70	; 0x46
 80022fe:	2101      	movs	r1, #1
 8002300:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	223e      	movs	r2, #62	; 0x3e
 8002306:	2101      	movs	r1, #1
 8002308:	5499      	strb	r1, [r3, r2]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	223f      	movs	r2, #63	; 0x3f
 800230e:	2101      	movs	r1, #1
 8002310:	5499      	strb	r1, [r3, r2]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2240      	movs	r2, #64	; 0x40
 8002316:	2101      	movs	r1, #1
 8002318:	5499      	strb	r1, [r3, r2]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2241      	movs	r2, #65	; 0x41
 800231e:	2101      	movs	r1, #1
 8002320:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2242      	movs	r2, #66	; 0x42
 8002326:	2101      	movs	r1, #1
 8002328:	5499      	strb	r1, [r3, r2]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2243      	movs	r2, #67	; 0x43
 800232e:	2101      	movs	r1, #1
 8002330:	5499      	strb	r1, [r3, r2]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2244      	movs	r2, #68	; 0x44
 8002336:	2101      	movs	r1, #1
 8002338:	5499      	strb	r1, [r3, r2]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2245      	movs	r2, #69	; 0x45
 800233e:	2101      	movs	r1, #1
 8002340:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	223d      	movs	r2, #61	; 0x3d
 8002346:	2101      	movs	r1, #1
 8002348:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800234a:	2300      	movs	r3, #0
}
 800234c:	0018      	movs	r0, r3
 800234e:	46bd      	mov	sp, r7
 8002350:	b002      	add	sp, #8
 8002352:	bd80      	pop	{r7, pc}

08002354 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b086      	sub	sp, #24
 8002358:	af00      	add	r7, sp, #0
 800235a:	60f8      	str	r0, [r7, #12]
 800235c:	60b9      	str	r1, [r7, #8]
 800235e:	607a      	str	r2, [r7, #4]
 8002360:	001a      	movs	r2, r3
 8002362:	1cbb      	adds	r3, r7, #2
 8002364:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002366:	2317      	movs	r3, #23
 8002368:	18fb      	adds	r3, r7, r3
 800236a:	2200      	movs	r2, #0
 800236c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d108      	bne.n	8002386 <HAL_TIM_PWM_Start_DMA+0x32>
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	223e      	movs	r2, #62	; 0x3e
 8002378:	5c9b      	ldrb	r3, [r3, r2]
 800237a:	b2db      	uxtb	r3, r3
 800237c:	3b02      	subs	r3, #2
 800237e:	425a      	negs	r2, r3
 8002380:	4153      	adcs	r3, r2
 8002382:	b2db      	uxtb	r3, r3
 8002384:	e01f      	b.n	80023c6 <HAL_TIM_PWM_Start_DMA+0x72>
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	2b04      	cmp	r3, #4
 800238a:	d108      	bne.n	800239e <HAL_TIM_PWM_Start_DMA+0x4a>
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	223f      	movs	r2, #63	; 0x3f
 8002390:	5c9b      	ldrb	r3, [r3, r2]
 8002392:	b2db      	uxtb	r3, r3
 8002394:	3b02      	subs	r3, #2
 8002396:	425a      	negs	r2, r3
 8002398:	4153      	adcs	r3, r2
 800239a:	b2db      	uxtb	r3, r3
 800239c:	e013      	b.n	80023c6 <HAL_TIM_PWM_Start_DMA+0x72>
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	2b08      	cmp	r3, #8
 80023a2:	d108      	bne.n	80023b6 <HAL_TIM_PWM_Start_DMA+0x62>
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2240      	movs	r2, #64	; 0x40
 80023a8:	5c9b      	ldrb	r3, [r3, r2]
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	3b02      	subs	r3, #2
 80023ae:	425a      	negs	r2, r3
 80023b0:	4153      	adcs	r3, r2
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	e007      	b.n	80023c6 <HAL_TIM_PWM_Start_DMA+0x72>
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	2241      	movs	r2, #65	; 0x41
 80023ba:	5c9b      	ldrb	r3, [r3, r2]
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	3b02      	subs	r3, #2
 80023c0:	425a      	negs	r2, r3
 80023c2:	4153      	adcs	r3, r2
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d001      	beq.n	80023ce <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 80023ca:	2302      	movs	r3, #2
 80023cc:	e164      	b.n	8002698 <HAL_TIM_PWM_Start_DMA+0x344>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d108      	bne.n	80023e6 <HAL_TIM_PWM_Start_DMA+0x92>
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	223e      	movs	r2, #62	; 0x3e
 80023d8:	5c9b      	ldrb	r3, [r3, r2]
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	3b01      	subs	r3, #1
 80023de:	425a      	negs	r2, r3
 80023e0:	4153      	adcs	r3, r2
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	e01f      	b.n	8002426 <HAL_TIM_PWM_Start_DMA+0xd2>
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	2b04      	cmp	r3, #4
 80023ea:	d108      	bne.n	80023fe <HAL_TIM_PWM_Start_DMA+0xaa>
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	223f      	movs	r2, #63	; 0x3f
 80023f0:	5c9b      	ldrb	r3, [r3, r2]
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	3b01      	subs	r3, #1
 80023f6:	425a      	negs	r2, r3
 80023f8:	4153      	adcs	r3, r2
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	e013      	b.n	8002426 <HAL_TIM_PWM_Start_DMA+0xd2>
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	2b08      	cmp	r3, #8
 8002402:	d108      	bne.n	8002416 <HAL_TIM_PWM_Start_DMA+0xc2>
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2240      	movs	r2, #64	; 0x40
 8002408:	5c9b      	ldrb	r3, [r3, r2]
 800240a:	b2db      	uxtb	r3, r3
 800240c:	3b01      	subs	r3, #1
 800240e:	425a      	negs	r2, r3
 8002410:	4153      	adcs	r3, r2
 8002412:	b2db      	uxtb	r3, r3
 8002414:	e007      	b.n	8002426 <HAL_TIM_PWM_Start_DMA+0xd2>
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2241      	movs	r2, #65	; 0x41
 800241a:	5c9b      	ldrb	r3, [r3, r2]
 800241c:	b2db      	uxtb	r3, r3
 800241e:	3b01      	subs	r3, #1
 8002420:	425a      	negs	r2, r3
 8002422:	4153      	adcs	r3, r2
 8002424:	b2db      	uxtb	r3, r3
 8002426:	2b00      	cmp	r3, #0
 8002428:	d025      	beq.n	8002476 <HAL_TIM_PWM_Start_DMA+0x122>
  {
    if ((pData == NULL) || (Length == 0U))
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d003      	beq.n	8002438 <HAL_TIM_PWM_Start_DMA+0xe4>
 8002430:	1cbb      	adds	r3, r7, #2
 8002432:	881b      	ldrh	r3, [r3, #0]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d101      	bne.n	800243c <HAL_TIM_PWM_Start_DMA+0xe8>
    {
      return HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	e12d      	b.n	8002698 <HAL_TIM_PWM_Start_DMA+0x344>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d104      	bne.n	800244c <HAL_TIM_PWM_Start_DMA+0xf8>
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	223e      	movs	r2, #62	; 0x3e
 8002446:	2102      	movs	r1, #2
 8002448:	5499      	strb	r1, [r3, r2]
 800244a:	e016      	b.n	800247a <HAL_TIM_PWM_Start_DMA+0x126>
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	2b04      	cmp	r3, #4
 8002450:	d104      	bne.n	800245c <HAL_TIM_PWM_Start_DMA+0x108>
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	223f      	movs	r2, #63	; 0x3f
 8002456:	2102      	movs	r1, #2
 8002458:	5499      	strb	r1, [r3, r2]
 800245a:	e00e      	b.n	800247a <HAL_TIM_PWM_Start_DMA+0x126>
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	2b08      	cmp	r3, #8
 8002460:	d104      	bne.n	800246c <HAL_TIM_PWM_Start_DMA+0x118>
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2240      	movs	r2, #64	; 0x40
 8002466:	2102      	movs	r1, #2
 8002468:	5499      	strb	r1, [r3, r2]
 800246a:	e006      	b.n	800247a <HAL_TIM_PWM_Start_DMA+0x126>
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2241      	movs	r2, #65	; 0x41
 8002470:	2102      	movs	r1, #2
 8002472:	5499      	strb	r1, [r3, r2]
 8002474:	e001      	b.n	800247a <HAL_TIM_PWM_Start_DMA+0x126>
    }
  }
  else
  {
    return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e10e      	b.n	8002698 <HAL_TIM_PWM_Start_DMA+0x344>
  }

  switch (Channel)
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	2b0c      	cmp	r3, #12
 800247e:	d100      	bne.n	8002482 <HAL_TIM_PWM_Start_DMA+0x12e>
 8002480:	e080      	b.n	8002584 <HAL_TIM_PWM_Start_DMA+0x230>
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	2b0c      	cmp	r3, #12
 8002486:	d900      	bls.n	800248a <HAL_TIM_PWM_Start_DMA+0x136>
 8002488:	e0a1      	b.n	80025ce <HAL_TIM_PWM_Start_DMA+0x27a>
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	2b08      	cmp	r3, #8
 800248e:	d054      	beq.n	800253a <HAL_TIM_PWM_Start_DMA+0x1e6>
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	2b08      	cmp	r3, #8
 8002494:	d900      	bls.n	8002498 <HAL_TIM_PWM_Start_DMA+0x144>
 8002496:	e09a      	b.n	80025ce <HAL_TIM_PWM_Start_DMA+0x27a>
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d003      	beq.n	80024a6 <HAL_TIM_PWM_Start_DMA+0x152>
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	2b04      	cmp	r3, #4
 80024a2:	d025      	beq.n	80024f0 <HAL_TIM_PWM_Start_DMA+0x19c>
 80024a4:	e093      	b.n	80025ce <HAL_TIM_PWM_Start_DMA+0x27a>
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024aa:	4a7d      	ldr	r2, [pc, #500]	; (80026a0 <HAL_TIM_PWM_Start_DMA+0x34c>)
 80024ac:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b2:	4a7c      	ldr	r2, [pc, #496]	; (80026a4 <HAL_TIM_PWM_Start_DMA+0x350>)
 80024b4:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ba:	4a7b      	ldr	r2, [pc, #492]	; (80026a8 <HAL_TIM_PWM_Start_DMA+0x354>)
 80024bc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80024c2:	6879      	ldr	r1, [r7, #4]
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	3334      	adds	r3, #52	; 0x34
 80024ca:	001a      	movs	r2, r3
 80024cc:	1cbb      	adds	r3, r7, #2
 80024ce:	881b      	ldrh	r3, [r3, #0]
 80024d0:	f7fe feb0 	bl	8001234 <HAL_DMA_Start_IT>
 80024d4:	1e03      	subs	r3, r0, #0
 80024d6:	d001      	beq.n	80024dc <HAL_TIM_PWM_Start_DMA+0x188>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e0dd      	b.n	8002698 <HAL_TIM_PWM_Start_DMA+0x344>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	68da      	ldr	r2, [r3, #12]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	2180      	movs	r1, #128	; 0x80
 80024e8:	0089      	lsls	r1, r1, #2
 80024ea:	430a      	orrs	r2, r1
 80024ec:	60da      	str	r2, [r3, #12]
      break;
 80024ee:	e073      	b.n	80025d8 <HAL_TIM_PWM_Start_DMA+0x284>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024f4:	4a6a      	ldr	r2, [pc, #424]	; (80026a0 <HAL_TIM_PWM_Start_DMA+0x34c>)
 80024f6:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024fc:	4a69      	ldr	r2, [pc, #420]	; (80026a4 <HAL_TIM_PWM_Start_DMA+0x350>)
 80024fe:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002504:	4a68      	ldr	r2, [pc, #416]	; (80026a8 <HAL_TIM_PWM_Start_DMA+0x354>)
 8002506:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800250c:	6879      	ldr	r1, [r7, #4]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	3338      	adds	r3, #56	; 0x38
 8002514:	001a      	movs	r2, r3
 8002516:	1cbb      	adds	r3, r7, #2
 8002518:	881b      	ldrh	r3, [r3, #0]
 800251a:	f7fe fe8b 	bl	8001234 <HAL_DMA_Start_IT>
 800251e:	1e03      	subs	r3, r0, #0
 8002520:	d001      	beq.n	8002526 <HAL_TIM_PWM_Start_DMA+0x1d2>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e0b8      	b.n	8002698 <HAL_TIM_PWM_Start_DMA+0x344>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	68da      	ldr	r2, [r3, #12]
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	2180      	movs	r1, #128	; 0x80
 8002532:	00c9      	lsls	r1, r1, #3
 8002534:	430a      	orrs	r2, r1
 8002536:	60da      	str	r2, [r3, #12]
      break;
 8002538:	e04e      	b.n	80025d8 <HAL_TIM_PWM_Start_DMA+0x284>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800253e:	4a58      	ldr	r2, [pc, #352]	; (80026a0 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8002540:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002546:	4a57      	ldr	r2, [pc, #348]	; (80026a4 <HAL_TIM_PWM_Start_DMA+0x350>)
 8002548:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800254e:	4a56      	ldr	r2, [pc, #344]	; (80026a8 <HAL_TIM_PWM_Start_DMA+0x354>)
 8002550:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8002556:	6879      	ldr	r1, [r7, #4]
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	333c      	adds	r3, #60	; 0x3c
 800255e:	001a      	movs	r2, r3
 8002560:	1cbb      	adds	r3, r7, #2
 8002562:	881b      	ldrh	r3, [r3, #0]
 8002564:	f7fe fe66 	bl	8001234 <HAL_DMA_Start_IT>
 8002568:	1e03      	subs	r3, r0, #0
 800256a:	d001      	beq.n	8002570 <HAL_TIM_PWM_Start_DMA+0x21c>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e093      	b.n	8002698 <HAL_TIM_PWM_Start_DMA+0x344>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	68da      	ldr	r2, [r3, #12]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	2180      	movs	r1, #128	; 0x80
 800257c:	0109      	lsls	r1, r1, #4
 800257e:	430a      	orrs	r2, r1
 8002580:	60da      	str	r2, [r3, #12]
      break;
 8002582:	e029      	b.n	80025d8 <HAL_TIM_PWM_Start_DMA+0x284>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002588:	4a45      	ldr	r2, [pc, #276]	; (80026a0 <HAL_TIM_PWM_Start_DMA+0x34c>)
 800258a:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002590:	4a44      	ldr	r2, [pc, #272]	; (80026a4 <HAL_TIM_PWM_Start_DMA+0x350>)
 8002592:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002598:	4a43      	ldr	r2, [pc, #268]	; (80026a8 <HAL_TIM_PWM_Start_DMA+0x354>)
 800259a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80025a0:	6879      	ldr	r1, [r7, #4]
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	3340      	adds	r3, #64	; 0x40
 80025a8:	001a      	movs	r2, r3
 80025aa:	1cbb      	adds	r3, r7, #2
 80025ac:	881b      	ldrh	r3, [r3, #0]
 80025ae:	f7fe fe41 	bl	8001234 <HAL_DMA_Start_IT>
 80025b2:	1e03      	subs	r3, r0, #0
 80025b4:	d001      	beq.n	80025ba <HAL_TIM_PWM_Start_DMA+0x266>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e06e      	b.n	8002698 <HAL_TIM_PWM_Start_DMA+0x344>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	68da      	ldr	r2, [r3, #12]
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	2180      	movs	r1, #128	; 0x80
 80025c6:	0149      	lsls	r1, r1, #5
 80025c8:	430a      	orrs	r2, r1
 80025ca:	60da      	str	r2, [r3, #12]
      break;
 80025cc:	e004      	b.n	80025d8 <HAL_TIM_PWM_Start_DMA+0x284>
    }

    default:
      status = HAL_ERROR;
 80025ce:	2317      	movs	r3, #23
 80025d0:	18fb      	adds	r3, r7, r3
 80025d2:	2201      	movs	r2, #1
 80025d4:	701a      	strb	r2, [r3, #0]
      break;
 80025d6:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 80025d8:	2317      	movs	r3, #23
 80025da:	18fb      	adds	r3, r7, r3
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d157      	bne.n	8002692 <HAL_TIM_PWM_Start_DMA+0x33e>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	68b9      	ldr	r1, [r7, #8]
 80025e8:	2201      	movs	r2, #1
 80025ea:	0018      	movs	r0, r3
 80025ec:	f001 fb80 	bl	8003cf0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a2d      	ldr	r2, [pc, #180]	; (80026ac <HAL_TIM_PWM_Start_DMA+0x358>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d00e      	beq.n	8002618 <HAL_TIM_PWM_Start_DMA+0x2c4>
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a2c      	ldr	r2, [pc, #176]	; (80026b0 <HAL_TIM_PWM_Start_DMA+0x35c>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d009      	beq.n	8002618 <HAL_TIM_PWM_Start_DMA+0x2c4>
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a2a      	ldr	r2, [pc, #168]	; (80026b4 <HAL_TIM_PWM_Start_DMA+0x360>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d004      	beq.n	8002618 <HAL_TIM_PWM_Start_DMA+0x2c4>
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a29      	ldr	r2, [pc, #164]	; (80026b8 <HAL_TIM_PWM_Start_DMA+0x364>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d101      	bne.n	800261c <HAL_TIM_PWM_Start_DMA+0x2c8>
 8002618:	2301      	movs	r3, #1
 800261a:	e000      	b.n	800261e <HAL_TIM_PWM_Start_DMA+0x2ca>
 800261c:	2300      	movs	r3, #0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d008      	beq.n	8002634 <HAL_TIM_PWM_Start_DMA+0x2e0>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	2180      	movs	r1, #128	; 0x80
 800262e:	0209      	lsls	r1, r1, #8
 8002630:	430a      	orrs	r2, r1
 8002632:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a1c      	ldr	r2, [pc, #112]	; (80026ac <HAL_TIM_PWM_Start_DMA+0x358>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d00f      	beq.n	800265e <HAL_TIM_PWM_Start_DMA+0x30a>
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	2380      	movs	r3, #128	; 0x80
 8002644:	05db      	lsls	r3, r3, #23
 8002646:	429a      	cmp	r2, r3
 8002648:	d009      	beq.n	800265e <HAL_TIM_PWM_Start_DMA+0x30a>
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a1b      	ldr	r2, [pc, #108]	; (80026bc <HAL_TIM_PWM_Start_DMA+0x368>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d004      	beq.n	800265e <HAL_TIM_PWM_Start_DMA+0x30a>
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a15      	ldr	r2, [pc, #84]	; (80026b0 <HAL_TIM_PWM_Start_DMA+0x35c>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d111      	bne.n	8002682 <HAL_TIM_PWM_Start_DMA+0x32e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	2207      	movs	r2, #7
 8002666:	4013      	ands	r3, r2
 8002668:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	2b06      	cmp	r3, #6
 800266e:	d010      	beq.n	8002692 <HAL_TIM_PWM_Start_DMA+0x33e>
      {
        __HAL_TIM_ENABLE(htim);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	2101      	movs	r1, #1
 800267c:	430a      	orrs	r2, r1
 800267e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002680:	e007      	b.n	8002692 <HAL_TIM_PWM_Start_DMA+0x33e>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	2101      	movs	r1, #1
 800268e:	430a      	orrs	r2, r1
 8002690:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002692:	2317      	movs	r3, #23
 8002694:	18fb      	adds	r3, r7, r3
 8002696:	781b      	ldrb	r3, [r3, #0]
}
 8002698:	0018      	movs	r0, r3
 800269a:	46bd      	mov	sp, r7
 800269c:	b006      	add	sp, #24
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	08003235 	.word	0x08003235
 80026a4:	080032df 	.word	0x080032df
 80026a8:	080031a1 	.word	0x080031a1
 80026ac:	40012c00 	.word	0x40012c00
 80026b0:	40014000 	.word	0x40014000
 80026b4:	40014400 	.word	0x40014400
 80026b8:	40014800 	.word	0x40014800
 80026bc:	40000400 	.word	0x40000400

080026c0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d101      	bne.n	80026d2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e042      	b.n	8002758 <HAL_TIM_IC_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	223d      	movs	r2, #61	; 0x3d
 80026d6:	5c9b      	ldrb	r3, [r3, r2]
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d107      	bne.n	80026ee <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	223c      	movs	r2, #60	; 0x3c
 80026e2:	2100      	movs	r1, #0
 80026e4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	0018      	movs	r0, r3
 80026ea:	f7fe fa9f 	bl	8000c2c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	223d      	movs	r2, #61	; 0x3d
 80026f2:	2102      	movs	r1, #2
 80026f4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	3304      	adds	r3, #4
 80026fe:	0019      	movs	r1, r3
 8002700:	0010      	movs	r0, r2
 8002702:	f000 febb 	bl	800347c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2246      	movs	r2, #70	; 0x46
 800270a:	2101      	movs	r1, #1
 800270c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	223e      	movs	r2, #62	; 0x3e
 8002712:	2101      	movs	r1, #1
 8002714:	5499      	strb	r1, [r3, r2]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	223f      	movs	r2, #63	; 0x3f
 800271a:	2101      	movs	r1, #1
 800271c:	5499      	strb	r1, [r3, r2]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2240      	movs	r2, #64	; 0x40
 8002722:	2101      	movs	r1, #1
 8002724:	5499      	strb	r1, [r3, r2]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2241      	movs	r2, #65	; 0x41
 800272a:	2101      	movs	r1, #1
 800272c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2242      	movs	r2, #66	; 0x42
 8002732:	2101      	movs	r1, #1
 8002734:	5499      	strb	r1, [r3, r2]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2243      	movs	r2, #67	; 0x43
 800273a:	2101      	movs	r1, #1
 800273c:	5499      	strb	r1, [r3, r2]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2244      	movs	r2, #68	; 0x44
 8002742:	2101      	movs	r1, #1
 8002744:	5499      	strb	r1, [r3, r2]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2245      	movs	r2, #69	; 0x45
 800274a:	2101      	movs	r1, #1
 800274c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	223d      	movs	r2, #61	; 0x3d
 8002752:	2101      	movs	r1, #1
 8002754:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002756:	2300      	movs	r3, #0
}
 8002758:	0018      	movs	r0, r3
 800275a:	46bd      	mov	sp, r7
 800275c:	b002      	add	sp, #8
 800275e:	bd80      	pop	{r7, pc}

08002760 <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b086      	sub	sp, #24
 8002764:	af00      	add	r7, sp, #0
 8002766:	60f8      	str	r0, [r7, #12]
 8002768:	60b9      	str	r1, [r7, #8]
 800276a:	607a      	str	r2, [r7, #4]
 800276c:	001a      	movs	r2, r3
 800276e:	1cbb      	adds	r3, r7, #2
 8002770:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002772:	2317      	movs	r3, #23
 8002774:	18fb      	adds	r3, r7, r3
 8002776:	2200      	movs	r2, #0
 8002778:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d104      	bne.n	800278a <HAL_TIM_IC_Start_DMA+0x2a>
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	223e      	movs	r2, #62	; 0x3e
 8002784:	5c9b      	ldrb	r3, [r3, r2]
 8002786:	b2db      	uxtb	r3, r3
 8002788:	e013      	b.n	80027b2 <HAL_TIM_IC_Start_DMA+0x52>
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	2b04      	cmp	r3, #4
 800278e:	d104      	bne.n	800279a <HAL_TIM_IC_Start_DMA+0x3a>
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	223f      	movs	r2, #63	; 0x3f
 8002794:	5c9b      	ldrb	r3, [r3, r2]
 8002796:	b2db      	uxtb	r3, r3
 8002798:	e00b      	b.n	80027b2 <HAL_TIM_IC_Start_DMA+0x52>
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	2b08      	cmp	r3, #8
 800279e:	d104      	bne.n	80027aa <HAL_TIM_IC_Start_DMA+0x4a>
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2240      	movs	r2, #64	; 0x40
 80027a4:	5c9b      	ldrb	r3, [r3, r2]
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	e003      	b.n	80027b2 <HAL_TIM_IC_Start_DMA+0x52>
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2241      	movs	r2, #65	; 0x41
 80027ae:	5c9b      	ldrb	r3, [r3, r2]
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	2216      	movs	r2, #22
 80027b4:	18ba      	adds	r2, r7, r2
 80027b6:	7013      	strb	r3, [r2, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d104      	bne.n	80027c8 <HAL_TIM_IC_Start_DMA+0x68>
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2242      	movs	r2, #66	; 0x42
 80027c2:	5c9b      	ldrb	r3, [r3, r2]
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	e013      	b.n	80027f0 <HAL_TIM_IC_Start_DMA+0x90>
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	2b04      	cmp	r3, #4
 80027cc:	d104      	bne.n	80027d8 <HAL_TIM_IC_Start_DMA+0x78>
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2243      	movs	r2, #67	; 0x43
 80027d2:	5c9b      	ldrb	r3, [r3, r2]
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	e00b      	b.n	80027f0 <HAL_TIM_IC_Start_DMA+0x90>
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	2b08      	cmp	r3, #8
 80027dc:	d104      	bne.n	80027e8 <HAL_TIM_IC_Start_DMA+0x88>
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2244      	movs	r2, #68	; 0x44
 80027e2:	5c9b      	ldrb	r3, [r3, r2]
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	e003      	b.n	80027f0 <HAL_TIM_IC_Start_DMA+0x90>
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2245      	movs	r2, #69	; 0x45
 80027ec:	5c9b      	ldrb	r3, [r3, r2]
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	2115      	movs	r1, #21
 80027f2:	187a      	adds	r2, r7, r1
 80027f4:	7013      	strb	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Set the TIM channel state */
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 80027f6:	2316      	movs	r3, #22
 80027f8:	18fb      	adds	r3, r7, r3
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	2b02      	cmp	r3, #2
 80027fe:	d003      	beq.n	8002808 <HAL_TIM_IC_Start_DMA+0xa8>
      || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 8002800:	187b      	adds	r3, r7, r1
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	2b02      	cmp	r3, #2
 8002806:	d101      	bne.n	800280c <HAL_TIM_IC_Start_DMA+0xac>
  {
    return HAL_BUSY;
 8002808:	2302      	movs	r3, #2
 800280a:	e135      	b.n	8002a78 <HAL_TIM_IC_Start_DMA+0x318>
  }
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 800280c:	2316      	movs	r3, #22
 800280e:	18fb      	adds	r3, r7, r3
 8002810:	781b      	ldrb	r3, [r3, #0]
 8002812:	2b01      	cmp	r3, #1
 8002814:	d146      	bne.n	80028a4 <HAL_TIM_IC_Start_DMA+0x144>
           && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 8002816:	2315      	movs	r3, #21
 8002818:	18fb      	adds	r3, r7, r3
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	2b01      	cmp	r3, #1
 800281e:	d141      	bne.n	80028a4 <HAL_TIM_IC_Start_DMA+0x144>
  {
    if ((pData == NULL) || (Length == 0U))
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d003      	beq.n	800282e <HAL_TIM_IC_Start_DMA+0xce>
 8002826:	1cbb      	adds	r3, r7, #2
 8002828:	881b      	ldrh	r3, [r3, #0]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d101      	bne.n	8002832 <HAL_TIM_IC_Start_DMA+0xd2>
    {
      return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e122      	b.n	8002a78 <HAL_TIM_IC_Start_DMA+0x318>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d104      	bne.n	8002842 <HAL_TIM_IC_Start_DMA+0xe2>
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	223e      	movs	r2, #62	; 0x3e
 800283c:	2102      	movs	r1, #2
 800283e:	5499      	strb	r1, [r3, r2]
 8002840:	e013      	b.n	800286a <HAL_TIM_IC_Start_DMA+0x10a>
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	2b04      	cmp	r3, #4
 8002846:	d104      	bne.n	8002852 <HAL_TIM_IC_Start_DMA+0xf2>
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	223f      	movs	r2, #63	; 0x3f
 800284c:	2102      	movs	r1, #2
 800284e:	5499      	strb	r1, [r3, r2]
 8002850:	e00b      	b.n	800286a <HAL_TIM_IC_Start_DMA+0x10a>
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	2b08      	cmp	r3, #8
 8002856:	d104      	bne.n	8002862 <HAL_TIM_IC_Start_DMA+0x102>
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2240      	movs	r2, #64	; 0x40
 800285c:	2102      	movs	r1, #2
 800285e:	5499      	strb	r1, [r3, r2]
 8002860:	e003      	b.n	800286a <HAL_TIM_IC_Start_DMA+0x10a>
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2241      	movs	r2, #65	; 0x41
 8002866:	2102      	movs	r1, #2
 8002868:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d104      	bne.n	800287a <HAL_TIM_IC_Start_DMA+0x11a>
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2242      	movs	r2, #66	; 0x42
 8002874:	2102      	movs	r1, #2
 8002876:	5499      	strb	r1, [r3, r2]
    if ((pData == NULL) || (Length == 0U))
 8002878:	e016      	b.n	80028a8 <HAL_TIM_IC_Start_DMA+0x148>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	2b04      	cmp	r3, #4
 800287e:	d104      	bne.n	800288a <HAL_TIM_IC_Start_DMA+0x12a>
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2243      	movs	r2, #67	; 0x43
 8002884:	2102      	movs	r1, #2
 8002886:	5499      	strb	r1, [r3, r2]
    if ((pData == NULL) || (Length == 0U))
 8002888:	e00e      	b.n	80028a8 <HAL_TIM_IC_Start_DMA+0x148>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	2b08      	cmp	r3, #8
 800288e:	d104      	bne.n	800289a <HAL_TIM_IC_Start_DMA+0x13a>
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2244      	movs	r2, #68	; 0x44
 8002894:	2102      	movs	r1, #2
 8002896:	5499      	strb	r1, [r3, r2]
    if ((pData == NULL) || (Length == 0U))
 8002898:	e006      	b.n	80028a8 <HAL_TIM_IC_Start_DMA+0x148>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2245      	movs	r2, #69	; 0x45
 800289e:	2102      	movs	r1, #2
 80028a0:	5499      	strb	r1, [r3, r2]
    if ((pData == NULL) || (Length == 0U))
 80028a2:	e001      	b.n	80028a8 <HAL_TIM_IC_Start_DMA+0x148>
    }
  }
  else
  {
    return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	e0e7      	b.n	8002a78 <HAL_TIM_IC_Start_DMA+0x318>
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	68b9      	ldr	r1, [r7, #8]
 80028ae:	2201      	movs	r2, #1
 80028b0:	0018      	movs	r0, r3
 80028b2:	f001 fa1d 	bl	8003cf0 <TIM_CCxChannelCmd>

  switch (Channel)
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	2b0c      	cmp	r3, #12
 80028ba:	d100      	bne.n	80028be <HAL_TIM_IC_Start_DMA+0x15e>
 80028bc:	e080      	b.n	80029c0 <HAL_TIM_IC_Start_DMA+0x260>
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	2b0c      	cmp	r3, #12
 80028c2:	d900      	bls.n	80028c6 <HAL_TIM_IC_Start_DMA+0x166>
 80028c4:	e0a1      	b.n	8002a0a <HAL_TIM_IC_Start_DMA+0x2aa>
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	2b08      	cmp	r3, #8
 80028ca:	d054      	beq.n	8002976 <HAL_TIM_IC_Start_DMA+0x216>
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	2b08      	cmp	r3, #8
 80028d0:	d900      	bls.n	80028d4 <HAL_TIM_IC_Start_DMA+0x174>
 80028d2:	e09a      	b.n	8002a0a <HAL_TIM_IC_Start_DMA+0x2aa>
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d003      	beq.n	80028e2 <HAL_TIM_IC_Start_DMA+0x182>
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	2b04      	cmp	r3, #4
 80028de:	d025      	beq.n	800292c <HAL_TIM_IC_Start_DMA+0x1cc>
 80028e0:	e093      	b.n	8002a0a <HAL_TIM_IC_Start_DMA+0x2aa>
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e6:	4a66      	ldr	r2, [pc, #408]	; (8002a80 <HAL_TIM_IC_Start_DMA+0x320>)
 80028e8:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ee:	4a65      	ldr	r2, [pc, #404]	; (8002a84 <HAL_TIM_IC_Start_DMA+0x324>)
 80028f0:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f6:	4a64      	ldr	r2, [pc, #400]	; (8002a88 <HAL_TIM_IC_Start_DMA+0x328>)
 80028f8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	3334      	adds	r3, #52	; 0x34
 8002904:	0019      	movs	r1, r3
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	1cbb      	adds	r3, r7, #2
 800290a:	881b      	ldrh	r3, [r3, #0]
 800290c:	f7fe fc92 	bl	8001234 <HAL_DMA_Start_IT>
 8002910:	1e03      	subs	r3, r0, #0
 8002912:	d001      	beq.n	8002918 <HAL_TIM_IC_Start_DMA+0x1b8>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e0af      	b.n	8002a78 <HAL_TIM_IC_Start_DMA+0x318>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	68da      	ldr	r2, [r3, #12]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	2180      	movs	r1, #128	; 0x80
 8002924:	0089      	lsls	r1, r1, #2
 8002926:	430a      	orrs	r2, r1
 8002928:	60da      	str	r2, [r3, #12]
      break;
 800292a:	e073      	b.n	8002a14 <HAL_TIM_IC_Start_DMA+0x2b4>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002930:	4a53      	ldr	r2, [pc, #332]	; (8002a80 <HAL_TIM_IC_Start_DMA+0x320>)
 8002932:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002938:	4a52      	ldr	r2, [pc, #328]	; (8002a84 <HAL_TIM_IC_Start_DMA+0x324>)
 800293a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002940:	4a51      	ldr	r2, [pc, #324]	; (8002a88 <HAL_TIM_IC_Start_DMA+0x328>)
 8002942:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	3338      	adds	r3, #56	; 0x38
 800294e:	0019      	movs	r1, r3
 8002950:	687a      	ldr	r2, [r7, #4]
 8002952:	1cbb      	adds	r3, r7, #2
 8002954:	881b      	ldrh	r3, [r3, #0]
 8002956:	f7fe fc6d 	bl	8001234 <HAL_DMA_Start_IT>
 800295a:	1e03      	subs	r3, r0, #0
 800295c:	d001      	beq.n	8002962 <HAL_TIM_IC_Start_DMA+0x202>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e08a      	b.n	8002a78 <HAL_TIM_IC_Start_DMA+0x318>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	68da      	ldr	r2, [r3, #12]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2180      	movs	r1, #128	; 0x80
 800296e:	00c9      	lsls	r1, r1, #3
 8002970:	430a      	orrs	r2, r1
 8002972:	60da      	str	r2, [r3, #12]
      break;
 8002974:	e04e      	b.n	8002a14 <HAL_TIM_IC_Start_DMA+0x2b4>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800297a:	4a41      	ldr	r2, [pc, #260]	; (8002a80 <HAL_TIM_IC_Start_DMA+0x320>)
 800297c:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002982:	4a40      	ldr	r2, [pc, #256]	; (8002a84 <HAL_TIM_IC_Start_DMA+0x324>)
 8002984:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800298a:	4a3f      	ldr	r2, [pc, #252]	; (8002a88 <HAL_TIM_IC_Start_DMA+0x328>)
 800298c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	333c      	adds	r3, #60	; 0x3c
 8002998:	0019      	movs	r1, r3
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	1cbb      	adds	r3, r7, #2
 800299e:	881b      	ldrh	r3, [r3, #0]
 80029a0:	f7fe fc48 	bl	8001234 <HAL_DMA_Start_IT>
 80029a4:	1e03      	subs	r3, r0, #0
 80029a6:	d001      	beq.n	80029ac <HAL_TIM_IC_Start_DMA+0x24c>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e065      	b.n	8002a78 <HAL_TIM_IC_Start_DMA+0x318>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	68da      	ldr	r2, [r3, #12]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	2180      	movs	r1, #128	; 0x80
 80029b8:	0109      	lsls	r1, r1, #4
 80029ba:	430a      	orrs	r2, r1
 80029bc:	60da      	str	r2, [r3, #12]
      break;
 80029be:	e029      	b.n	8002a14 <HAL_TIM_IC_Start_DMA+0x2b4>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c4:	4a2e      	ldr	r2, [pc, #184]	; (8002a80 <HAL_TIM_IC_Start_DMA+0x320>)
 80029c6:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029cc:	4a2d      	ldr	r2, [pc, #180]	; (8002a84 <HAL_TIM_IC_Start_DMA+0x324>)
 80029ce:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d4:	4a2c      	ldr	r2, [pc, #176]	; (8002a88 <HAL_TIM_IC_Start_DMA+0x328>)
 80029d6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	3340      	adds	r3, #64	; 0x40
 80029e2:	0019      	movs	r1, r3
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	1cbb      	adds	r3, r7, #2
 80029e8:	881b      	ldrh	r3, [r3, #0]
 80029ea:	f7fe fc23 	bl	8001234 <HAL_DMA_Start_IT>
 80029ee:	1e03      	subs	r3, r0, #0
 80029f0:	d001      	beq.n	80029f6 <HAL_TIM_IC_Start_DMA+0x296>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e040      	b.n	8002a78 <HAL_TIM_IC_Start_DMA+0x318>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	68da      	ldr	r2, [r3, #12]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	2180      	movs	r1, #128	; 0x80
 8002a02:	0149      	lsls	r1, r1, #5
 8002a04:	430a      	orrs	r2, r1
 8002a06:	60da      	str	r2, [r3, #12]
      break;
 8002a08:	e004      	b.n	8002a14 <HAL_TIM_IC_Start_DMA+0x2b4>
    }

    default:
      status = HAL_ERROR;
 8002a0a:	2317      	movs	r3, #23
 8002a0c:	18fb      	adds	r3, r7, r3
 8002a0e:	2201      	movs	r2, #1
 8002a10:	701a      	strb	r2, [r3, #0]
      break;
 8002a12:	46c0      	nop			; (mov r8, r8)
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a1c      	ldr	r2, [pc, #112]	; (8002a8c <HAL_TIM_IC_Start_DMA+0x32c>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d00f      	beq.n	8002a3e <HAL_TIM_IC_Start_DMA+0x2de>
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	2380      	movs	r3, #128	; 0x80
 8002a24:	05db      	lsls	r3, r3, #23
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d009      	beq.n	8002a3e <HAL_TIM_IC_Start_DMA+0x2de>
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a18      	ldr	r2, [pc, #96]	; (8002a90 <HAL_TIM_IC_Start_DMA+0x330>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d004      	beq.n	8002a3e <HAL_TIM_IC_Start_DMA+0x2de>
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a16      	ldr	r2, [pc, #88]	; (8002a94 <HAL_TIM_IC_Start_DMA+0x334>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d111      	bne.n	8002a62 <HAL_TIM_IC_Start_DMA+0x302>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	2207      	movs	r2, #7
 8002a46:	4013      	ands	r3, r2
 8002a48:	613b      	str	r3, [r7, #16]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	2b06      	cmp	r3, #6
 8002a4e:	d010      	beq.n	8002a72 <HAL_TIM_IC_Start_DMA+0x312>
    {
      __HAL_TIM_ENABLE(htim);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	2101      	movs	r1, #1
 8002a5c:	430a      	orrs	r2, r1
 8002a5e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a60:	e007      	b.n	8002a72 <HAL_TIM_IC_Start_DMA+0x312>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	2101      	movs	r1, #1
 8002a6e:	430a      	orrs	r2, r1
 8002a70:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8002a72:	2317      	movs	r3, #23
 8002a74:	18fb      	adds	r3, r7, r3
 8002a76:	781b      	ldrb	r3, [r3, #0]
}
 8002a78:	0018      	movs	r0, r3
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	b006      	add	sp, #24
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	08003349 	.word	0x08003349
 8002a84:	08003413 	.word	0x08003413
 8002a88:	080031a1 	.word	0x080031a1
 8002a8c:	40012c00 	.word	0x40012c00
 8002a90:	40000400 	.word	0x40000400
 8002a94:	40014000 	.word	0x40014000

08002a98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b082      	sub	sp, #8
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	691b      	ldr	r3, [r3, #16]
 8002aa6:	2202      	movs	r2, #2
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d124      	bne.n	8002af8 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	2202      	movs	r2, #2
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	2b02      	cmp	r3, #2
 8002aba:	d11d      	bne.n	8002af8 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	2203      	movs	r2, #3
 8002ac2:	4252      	negs	r2, r2
 8002ac4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2201      	movs	r2, #1
 8002aca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	699b      	ldr	r3, [r3, #24]
 8002ad2:	2203      	movs	r2, #3
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	d004      	beq.n	8002ae2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	0018      	movs	r0, r3
 8002adc:	f001 f9f8 	bl	8003ed0 <HAL_TIM_IC_CaptureCallback>
 8002ae0:	e007      	b.n	8002af2 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	0018      	movs	r0, r3
 8002ae6:	f000 fb2b 	bl	8003140 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	0018      	movs	r0, r3
 8002aee:	f000 fb37 	bl	8003160 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2200      	movs	r2, #0
 8002af6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	691b      	ldr	r3, [r3, #16]
 8002afe:	2204      	movs	r2, #4
 8002b00:	4013      	ands	r3, r2
 8002b02:	2b04      	cmp	r3, #4
 8002b04:	d125      	bne.n	8002b52 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	2204      	movs	r2, #4
 8002b0e:	4013      	ands	r3, r2
 8002b10:	2b04      	cmp	r3, #4
 8002b12:	d11e      	bne.n	8002b52 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	2205      	movs	r2, #5
 8002b1a:	4252      	negs	r2, r2
 8002b1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2202      	movs	r2, #2
 8002b22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	699a      	ldr	r2, [r3, #24]
 8002b2a:	23c0      	movs	r3, #192	; 0xc0
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	4013      	ands	r3, r2
 8002b30:	d004      	beq.n	8002b3c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	0018      	movs	r0, r3
 8002b36:	f001 f9cb 	bl	8003ed0 <HAL_TIM_IC_CaptureCallback>
 8002b3a:	e007      	b.n	8002b4c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	0018      	movs	r0, r3
 8002b40:	f000 fafe 	bl	8003140 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	0018      	movs	r0, r3
 8002b48:	f000 fb0a 	bl	8003160 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	691b      	ldr	r3, [r3, #16]
 8002b58:	2208      	movs	r2, #8
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	2b08      	cmp	r3, #8
 8002b5e:	d124      	bne.n	8002baa <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	68db      	ldr	r3, [r3, #12]
 8002b66:	2208      	movs	r2, #8
 8002b68:	4013      	ands	r3, r2
 8002b6a:	2b08      	cmp	r3, #8
 8002b6c:	d11d      	bne.n	8002baa <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	2209      	movs	r2, #9
 8002b74:	4252      	negs	r2, r2
 8002b76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2204      	movs	r2, #4
 8002b7c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	69db      	ldr	r3, [r3, #28]
 8002b84:	2203      	movs	r2, #3
 8002b86:	4013      	ands	r3, r2
 8002b88:	d004      	beq.n	8002b94 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	0018      	movs	r0, r3
 8002b8e:	f001 f99f 	bl	8003ed0 <HAL_TIM_IC_CaptureCallback>
 8002b92:	e007      	b.n	8002ba4 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	0018      	movs	r0, r3
 8002b98:	f000 fad2 	bl	8003140 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	0018      	movs	r0, r3
 8002ba0:	f000 fade 	bl	8003160 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	691b      	ldr	r3, [r3, #16]
 8002bb0:	2210      	movs	r2, #16
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	2b10      	cmp	r3, #16
 8002bb6:	d125      	bne.n	8002c04 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	68db      	ldr	r3, [r3, #12]
 8002bbe:	2210      	movs	r2, #16
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	2b10      	cmp	r3, #16
 8002bc4:	d11e      	bne.n	8002c04 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	2211      	movs	r2, #17
 8002bcc:	4252      	negs	r2, r2
 8002bce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2208      	movs	r2, #8
 8002bd4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	69da      	ldr	r2, [r3, #28]
 8002bdc:	23c0      	movs	r3, #192	; 0xc0
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	4013      	ands	r3, r2
 8002be2:	d004      	beq.n	8002bee <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	0018      	movs	r0, r3
 8002be8:	f001 f972 	bl	8003ed0 <HAL_TIM_IC_CaptureCallback>
 8002bec:	e007      	b.n	8002bfe <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	0018      	movs	r0, r3
 8002bf2:	f000 faa5 	bl	8003140 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	0018      	movs	r0, r3
 8002bfa:	f000 fab1 	bl	8003160 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2200      	movs	r2, #0
 8002c02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	691b      	ldr	r3, [r3, #16]
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d10f      	bne.n	8002c32 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	2201      	movs	r2, #1
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d108      	bne.n	8002c32 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	2202      	movs	r2, #2
 8002c26:	4252      	negs	r2, r2
 8002c28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	0018      	movs	r0, r3
 8002c2e:	f001 f9ef 	bl	8004010 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	691b      	ldr	r3, [r3, #16]
 8002c38:	2280      	movs	r2, #128	; 0x80
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	2b80      	cmp	r3, #128	; 0x80
 8002c3e:	d10f      	bne.n	8002c60 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	68db      	ldr	r3, [r3, #12]
 8002c46:	2280      	movs	r2, #128	; 0x80
 8002c48:	4013      	ands	r3, r2
 8002c4a:	2b80      	cmp	r3, #128	; 0x80
 8002c4c:	d108      	bne.n	8002c60 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	2281      	movs	r2, #129	; 0x81
 8002c54:	4252      	negs	r2, r2
 8002c56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	0018      	movs	r0, r3
 8002c5c:	f001 f930 	bl	8003ec0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	691b      	ldr	r3, [r3, #16]
 8002c66:	2240      	movs	r2, #64	; 0x40
 8002c68:	4013      	ands	r3, r2
 8002c6a:	2b40      	cmp	r3, #64	; 0x40
 8002c6c:	d10f      	bne.n	8002c8e <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	2240      	movs	r2, #64	; 0x40
 8002c76:	4013      	ands	r3, r2
 8002c78:	2b40      	cmp	r3, #64	; 0x40
 8002c7a:	d108      	bne.n	8002c8e <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	2241      	movs	r2, #65	; 0x41
 8002c82:	4252      	negs	r2, r2
 8002c84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	0018      	movs	r0, r3
 8002c8a:	f000 fa79 	bl	8003180 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	691b      	ldr	r3, [r3, #16]
 8002c94:	2220      	movs	r2, #32
 8002c96:	4013      	ands	r3, r2
 8002c98:	2b20      	cmp	r3, #32
 8002c9a:	d10f      	bne.n	8002cbc <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	68db      	ldr	r3, [r3, #12]
 8002ca2:	2220      	movs	r2, #32
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	2b20      	cmp	r3, #32
 8002ca8:	d108      	bne.n	8002cbc <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	2221      	movs	r2, #33	; 0x21
 8002cb0:	4252      	negs	r2, r2
 8002cb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	0018      	movs	r0, r3
 8002cb8:	f001 f8fa 	bl	8003eb0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002cbc:	46c0      	nop			; (mov r8, r8)
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	b002      	add	sp, #8
 8002cc2:	bd80      	pop	{r7, pc}

08002cc4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b086      	sub	sp, #24
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	60f8      	str	r0, [r7, #12]
 8002ccc:	60b9      	str	r1, [r7, #8]
 8002cce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cd0:	2317      	movs	r3, #23
 8002cd2:	18fb      	adds	r3, r7, r3
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	223c      	movs	r2, #60	; 0x3c
 8002cdc:	5c9b      	ldrb	r3, [r3, r2]
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d101      	bne.n	8002ce6 <HAL_TIM_IC_ConfigChannel+0x22>
 8002ce2:	2302      	movs	r3, #2
 8002ce4:	e08c      	b.n	8002e00 <HAL_TIM_IC_ConfigChannel+0x13c>
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	223c      	movs	r2, #60	; 0x3c
 8002cea:	2101      	movs	r1, #1
 8002cec:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d11b      	bne.n	8002d2c <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	6818      	ldr	r0, [r3, #0]
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	6819      	ldr	r1, [r3, #0]
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	685a      	ldr	r2, [r3, #4]
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	f000 fe36 	bl	8003974 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	699a      	ldr	r2, [r3, #24]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	210c      	movs	r1, #12
 8002d14:	438a      	bics	r2, r1
 8002d16:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	6999      	ldr	r1, [r3, #24]
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	689a      	ldr	r2, [r3, #8]
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	430a      	orrs	r2, r1
 8002d28:	619a      	str	r2, [r3, #24]
 8002d2a:	e062      	b.n	8002df2 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2b04      	cmp	r3, #4
 8002d30:	d11c      	bne.n	8002d6c <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	6818      	ldr	r0, [r3, #0]
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	6819      	ldr	r1, [r3, #0]
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	685a      	ldr	r2, [r3, #4]
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	f000 fea1 	bl	8003a88 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	699a      	ldr	r2, [r3, #24]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	492d      	ldr	r1, [pc, #180]	; (8002e08 <HAL_TIM_IC_ConfigChannel+0x144>)
 8002d52:	400a      	ands	r2, r1
 8002d54:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	6999      	ldr	r1, [r3, #24]
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	021a      	lsls	r2, r3, #8
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	430a      	orrs	r2, r1
 8002d68:	619a      	str	r2, [r3, #24]
 8002d6a:	e042      	b.n	8002df2 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2b08      	cmp	r3, #8
 8002d70:	d11b      	bne.n	8002daa <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	6818      	ldr	r0, [r3, #0]
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	6819      	ldr	r1, [r3, #0]
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	685a      	ldr	r2, [r3, #4]
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	f000 fef5 	bl	8003b70 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	69da      	ldr	r2, [r3, #28]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	210c      	movs	r1, #12
 8002d92:	438a      	bics	r2, r1
 8002d94:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	69d9      	ldr	r1, [r3, #28]
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	689a      	ldr	r2, [r3, #8]
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	430a      	orrs	r2, r1
 8002da6:	61da      	str	r2, [r3, #28]
 8002da8:	e023      	b.n	8002df2 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2b0c      	cmp	r3, #12
 8002dae:	d11c      	bne.n	8002dea <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	6818      	ldr	r0, [r3, #0]
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	6819      	ldr	r1, [r3, #0]
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	685a      	ldr	r2, [r3, #4]
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	f000 ff16 	bl	8003bf0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	69da      	ldr	r2, [r3, #28]
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	490e      	ldr	r1, [pc, #56]	; (8002e08 <HAL_TIM_IC_ConfigChannel+0x144>)
 8002dd0:	400a      	ands	r2, r1
 8002dd2:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	69d9      	ldr	r1, [r3, #28]
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	021a      	lsls	r2, r3, #8
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	430a      	orrs	r2, r1
 8002de6:	61da      	str	r2, [r3, #28]
 8002de8:	e003      	b.n	8002df2 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 8002dea:	2317      	movs	r3, #23
 8002dec:	18fb      	adds	r3, r7, r3
 8002dee:	2201      	movs	r2, #1
 8002df0:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	223c      	movs	r2, #60	; 0x3c
 8002df6:	2100      	movs	r1, #0
 8002df8:	5499      	strb	r1, [r3, r2]

  return status;
 8002dfa:	2317      	movs	r3, #23
 8002dfc:	18fb      	adds	r3, r7, r3
 8002dfe:	781b      	ldrb	r3, [r3, #0]
}
 8002e00:	0018      	movs	r0, r3
 8002e02:	46bd      	mov	sp, r7
 8002e04:	b006      	add	sp, #24
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	fffff3ff 	.word	0xfffff3ff

08002e0c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b086      	sub	sp, #24
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	60f8      	str	r0, [r7, #12]
 8002e14:	60b9      	str	r1, [r7, #8]
 8002e16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e18:	2317      	movs	r3, #23
 8002e1a:	18fb      	adds	r3, r7, r3
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	223c      	movs	r2, #60	; 0x3c
 8002e24:	5c9b      	ldrb	r3, [r3, r2]
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d101      	bne.n	8002e2e <HAL_TIM_PWM_ConfigChannel+0x22>
 8002e2a:	2302      	movs	r3, #2
 8002e2c:	e0ad      	b.n	8002f8a <HAL_TIM_PWM_ConfigChannel+0x17e>
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	223c      	movs	r2, #60	; 0x3c
 8002e32:	2101      	movs	r1, #1
 8002e34:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2b0c      	cmp	r3, #12
 8002e3a:	d100      	bne.n	8002e3e <HAL_TIM_PWM_ConfigChannel+0x32>
 8002e3c:	e076      	b.n	8002f2c <HAL_TIM_PWM_ConfigChannel+0x120>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2b0c      	cmp	r3, #12
 8002e42:	d900      	bls.n	8002e46 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8002e44:	e095      	b.n	8002f72 <HAL_TIM_PWM_ConfigChannel+0x166>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2b08      	cmp	r3, #8
 8002e4a:	d04e      	beq.n	8002eea <HAL_TIM_PWM_ConfigChannel+0xde>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2b08      	cmp	r3, #8
 8002e50:	d900      	bls.n	8002e54 <HAL_TIM_PWM_ConfigChannel+0x48>
 8002e52:	e08e      	b.n	8002f72 <HAL_TIM_PWM_ConfigChannel+0x166>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d003      	beq.n	8002e62 <HAL_TIM_PWM_ConfigChannel+0x56>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2b04      	cmp	r3, #4
 8002e5e:	d021      	beq.n	8002ea4 <HAL_TIM_PWM_ConfigChannel+0x98>
 8002e60:	e087      	b.n	8002f72 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	68ba      	ldr	r2, [r7, #8]
 8002e68:	0011      	movs	r1, r2
 8002e6a:	0018      	movs	r0, r3
 8002e6c:	f000 fb86 	bl	800357c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	699a      	ldr	r2, [r3, #24]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	2108      	movs	r1, #8
 8002e7c:	430a      	orrs	r2, r1
 8002e7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	699a      	ldr	r2, [r3, #24]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	2104      	movs	r1, #4
 8002e8c:	438a      	bics	r2, r1
 8002e8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	6999      	ldr	r1, [r3, #24]
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	691a      	ldr	r2, [r3, #16]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	430a      	orrs	r2, r1
 8002ea0:	619a      	str	r2, [r3, #24]
      break;
 8002ea2:	e06b      	b.n	8002f7c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	68ba      	ldr	r2, [r7, #8]
 8002eaa:	0011      	movs	r1, r2
 8002eac:	0018      	movs	r0, r3
 8002eae:	f000 fbed 	bl	800368c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	699a      	ldr	r2, [r3, #24]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	2180      	movs	r1, #128	; 0x80
 8002ebe:	0109      	lsls	r1, r1, #4
 8002ec0:	430a      	orrs	r2, r1
 8002ec2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	699a      	ldr	r2, [r3, #24]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4931      	ldr	r1, [pc, #196]	; (8002f94 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002ed0:	400a      	ands	r2, r1
 8002ed2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	6999      	ldr	r1, [r3, #24]
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	691b      	ldr	r3, [r3, #16]
 8002ede:	021a      	lsls	r2, r3, #8
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	430a      	orrs	r2, r1
 8002ee6:	619a      	str	r2, [r3, #24]
      break;
 8002ee8:	e048      	b.n	8002f7c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	68ba      	ldr	r2, [r7, #8]
 8002ef0:	0011      	movs	r1, r2
 8002ef2:	0018      	movs	r0, r3
 8002ef4:	f000 fc4e 	bl	8003794 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	69da      	ldr	r2, [r3, #28]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	2108      	movs	r1, #8
 8002f04:	430a      	orrs	r2, r1
 8002f06:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	69da      	ldr	r2, [r3, #28]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	2104      	movs	r1, #4
 8002f14:	438a      	bics	r2, r1
 8002f16:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	69d9      	ldr	r1, [r3, #28]
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	691a      	ldr	r2, [r3, #16]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	430a      	orrs	r2, r1
 8002f28:	61da      	str	r2, [r3, #28]
      break;
 8002f2a:	e027      	b.n	8002f7c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	68ba      	ldr	r2, [r7, #8]
 8002f32:	0011      	movs	r1, r2
 8002f34:	0018      	movs	r0, r3
 8002f36:	f000 fcb3 	bl	80038a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	69da      	ldr	r2, [r3, #28]
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	2180      	movs	r1, #128	; 0x80
 8002f46:	0109      	lsls	r1, r1, #4
 8002f48:	430a      	orrs	r2, r1
 8002f4a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	69da      	ldr	r2, [r3, #28]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	490f      	ldr	r1, [pc, #60]	; (8002f94 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002f58:	400a      	ands	r2, r1
 8002f5a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	69d9      	ldr	r1, [r3, #28]
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	691b      	ldr	r3, [r3, #16]
 8002f66:	021a      	lsls	r2, r3, #8
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	430a      	orrs	r2, r1
 8002f6e:	61da      	str	r2, [r3, #28]
      break;
 8002f70:	e004      	b.n	8002f7c <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8002f72:	2317      	movs	r3, #23
 8002f74:	18fb      	adds	r3, r7, r3
 8002f76:	2201      	movs	r2, #1
 8002f78:	701a      	strb	r2, [r3, #0]
      break;
 8002f7a:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	223c      	movs	r2, #60	; 0x3c
 8002f80:	2100      	movs	r1, #0
 8002f82:	5499      	strb	r1, [r3, r2]

  return status;
 8002f84:	2317      	movs	r3, #23
 8002f86:	18fb      	adds	r3, r7, r3
 8002f88:	781b      	ldrb	r3, [r3, #0]
}
 8002f8a:	0018      	movs	r0, r3
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	b006      	add	sp, #24
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	46c0      	nop			; (mov r8, r8)
 8002f94:	fffffbff 	.word	0xfffffbff

08002f98 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b084      	sub	sp, #16
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
 8002fa0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002fa2:	230f      	movs	r3, #15
 8002fa4:	18fb      	adds	r3, r7, r3
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	223c      	movs	r2, #60	; 0x3c
 8002fae:	5c9b      	ldrb	r3, [r3, r2]
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d101      	bne.n	8002fb8 <HAL_TIM_ConfigClockSource+0x20>
 8002fb4:	2302      	movs	r3, #2
 8002fb6:	e0bc      	b.n	8003132 <HAL_TIM_ConfigClockSource+0x19a>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	223c      	movs	r2, #60	; 0x3c
 8002fbc:	2101      	movs	r1, #1
 8002fbe:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	223d      	movs	r2, #61	; 0x3d
 8002fc4:	2102      	movs	r1, #2
 8002fc6:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	2277      	movs	r2, #119	; 0x77
 8002fd4:	4393      	bics	r3, r2
 8002fd6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	4a58      	ldr	r2, [pc, #352]	; (800313c <HAL_TIM_ConfigClockSource+0x1a4>)
 8002fdc:	4013      	ands	r3, r2
 8002fde:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	68ba      	ldr	r2, [r7, #8]
 8002fe6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	2280      	movs	r2, #128	; 0x80
 8002fee:	0192      	lsls	r2, r2, #6
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d040      	beq.n	8003076 <HAL_TIM_ConfigClockSource+0xde>
 8002ff4:	2280      	movs	r2, #128	; 0x80
 8002ff6:	0192      	lsls	r2, r2, #6
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d900      	bls.n	8002ffe <HAL_TIM_ConfigClockSource+0x66>
 8002ffc:	e088      	b.n	8003110 <HAL_TIM_ConfigClockSource+0x178>
 8002ffe:	2280      	movs	r2, #128	; 0x80
 8003000:	0152      	lsls	r2, r2, #5
 8003002:	4293      	cmp	r3, r2
 8003004:	d100      	bne.n	8003008 <HAL_TIM_ConfigClockSource+0x70>
 8003006:	e088      	b.n	800311a <HAL_TIM_ConfigClockSource+0x182>
 8003008:	2280      	movs	r2, #128	; 0x80
 800300a:	0152      	lsls	r2, r2, #5
 800300c:	4293      	cmp	r3, r2
 800300e:	d900      	bls.n	8003012 <HAL_TIM_ConfigClockSource+0x7a>
 8003010:	e07e      	b.n	8003110 <HAL_TIM_ConfigClockSource+0x178>
 8003012:	2b70      	cmp	r3, #112	; 0x70
 8003014:	d018      	beq.n	8003048 <HAL_TIM_ConfigClockSource+0xb0>
 8003016:	d900      	bls.n	800301a <HAL_TIM_ConfigClockSource+0x82>
 8003018:	e07a      	b.n	8003110 <HAL_TIM_ConfigClockSource+0x178>
 800301a:	2b60      	cmp	r3, #96	; 0x60
 800301c:	d04f      	beq.n	80030be <HAL_TIM_ConfigClockSource+0x126>
 800301e:	d900      	bls.n	8003022 <HAL_TIM_ConfigClockSource+0x8a>
 8003020:	e076      	b.n	8003110 <HAL_TIM_ConfigClockSource+0x178>
 8003022:	2b50      	cmp	r3, #80	; 0x50
 8003024:	d03b      	beq.n	800309e <HAL_TIM_ConfigClockSource+0x106>
 8003026:	d900      	bls.n	800302a <HAL_TIM_ConfigClockSource+0x92>
 8003028:	e072      	b.n	8003110 <HAL_TIM_ConfigClockSource+0x178>
 800302a:	2b40      	cmp	r3, #64	; 0x40
 800302c:	d057      	beq.n	80030de <HAL_TIM_ConfigClockSource+0x146>
 800302e:	d900      	bls.n	8003032 <HAL_TIM_ConfigClockSource+0x9a>
 8003030:	e06e      	b.n	8003110 <HAL_TIM_ConfigClockSource+0x178>
 8003032:	2b30      	cmp	r3, #48	; 0x30
 8003034:	d063      	beq.n	80030fe <HAL_TIM_ConfigClockSource+0x166>
 8003036:	d86b      	bhi.n	8003110 <HAL_TIM_ConfigClockSource+0x178>
 8003038:	2b20      	cmp	r3, #32
 800303a:	d060      	beq.n	80030fe <HAL_TIM_ConfigClockSource+0x166>
 800303c:	d868      	bhi.n	8003110 <HAL_TIM_ConfigClockSource+0x178>
 800303e:	2b00      	cmp	r3, #0
 8003040:	d05d      	beq.n	80030fe <HAL_TIM_ConfigClockSource+0x166>
 8003042:	2b10      	cmp	r3, #16
 8003044:	d05b      	beq.n	80030fe <HAL_TIM_ConfigClockSource+0x166>
 8003046:	e063      	b.n	8003110 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6818      	ldr	r0, [r3, #0]
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	6899      	ldr	r1, [r3, #8]
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	685a      	ldr	r2, [r3, #4]
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	f000 fe2a 	bl	8003cb0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	2277      	movs	r2, #119	; 0x77
 8003068:	4313      	orrs	r3, r2
 800306a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	68ba      	ldr	r2, [r7, #8]
 8003072:	609a      	str	r2, [r3, #8]
      break;
 8003074:	e052      	b.n	800311c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6818      	ldr	r0, [r3, #0]
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	6899      	ldr	r1, [r3, #8]
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	685a      	ldr	r2, [r3, #4]
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	68db      	ldr	r3, [r3, #12]
 8003086:	f000 fe13 	bl	8003cb0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	689a      	ldr	r2, [r3, #8]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	2180      	movs	r1, #128	; 0x80
 8003096:	01c9      	lsls	r1, r1, #7
 8003098:	430a      	orrs	r2, r1
 800309a:	609a      	str	r2, [r3, #8]
      break;
 800309c:	e03e      	b.n	800311c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6818      	ldr	r0, [r3, #0]
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	6859      	ldr	r1, [r3, #4]
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	68db      	ldr	r3, [r3, #12]
 80030aa:	001a      	movs	r2, r3
 80030ac:	f000 fcbe 	bl	8003a2c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	2150      	movs	r1, #80	; 0x50
 80030b6:	0018      	movs	r0, r3
 80030b8:	f000 fde0 	bl	8003c7c <TIM_ITRx_SetConfig>
      break;
 80030bc:	e02e      	b.n	800311c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6818      	ldr	r0, [r3, #0]
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	6859      	ldr	r1, [r3, #4]
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	68db      	ldr	r3, [r3, #12]
 80030ca:	001a      	movs	r2, r3
 80030cc:	f000 fd1e 	bl	8003b0c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	2160      	movs	r1, #96	; 0x60
 80030d6:	0018      	movs	r0, r3
 80030d8:	f000 fdd0 	bl	8003c7c <TIM_ITRx_SetConfig>
      break;
 80030dc:	e01e      	b.n	800311c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6818      	ldr	r0, [r3, #0]
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	6859      	ldr	r1, [r3, #4]
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	68db      	ldr	r3, [r3, #12]
 80030ea:	001a      	movs	r2, r3
 80030ec:	f000 fc9e 	bl	8003a2c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	2140      	movs	r1, #64	; 0x40
 80030f6:	0018      	movs	r0, r3
 80030f8:	f000 fdc0 	bl	8003c7c <TIM_ITRx_SetConfig>
      break;
 80030fc:	e00e      	b.n	800311c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	0019      	movs	r1, r3
 8003108:	0010      	movs	r0, r2
 800310a:	f000 fdb7 	bl	8003c7c <TIM_ITRx_SetConfig>
      break;
 800310e:	e005      	b.n	800311c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003110:	230f      	movs	r3, #15
 8003112:	18fb      	adds	r3, r7, r3
 8003114:	2201      	movs	r2, #1
 8003116:	701a      	strb	r2, [r3, #0]
      break;
 8003118:	e000      	b.n	800311c <HAL_TIM_ConfigClockSource+0x184>
      break;
 800311a:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	223d      	movs	r2, #61	; 0x3d
 8003120:	2101      	movs	r1, #1
 8003122:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	223c      	movs	r2, #60	; 0x3c
 8003128:	2100      	movs	r1, #0
 800312a:	5499      	strb	r1, [r3, r2]

  return status;
 800312c:	230f      	movs	r3, #15
 800312e:	18fb      	adds	r3, r7, r3
 8003130:	781b      	ldrb	r3, [r3, #0]
}
 8003132:	0018      	movs	r0, r3
 8003134:	46bd      	mov	sp, r7
 8003136:	b004      	add	sp, #16
 8003138:	bd80      	pop	{r7, pc}
 800313a:	46c0      	nop			; (mov r8, r8)
 800313c:	ffff00ff 	.word	0xffff00ff

08003140 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b082      	sub	sp, #8
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003148:	46c0      	nop			; (mov r8, r8)
 800314a:	46bd      	mov	sp, r7
 800314c:	b002      	add	sp, #8
 800314e:	bd80      	pop	{r7, pc}

08003150 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b082      	sub	sp, #8
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8003158:	46c0      	nop			; (mov r8, r8)
 800315a:	46bd      	mov	sp, r7
 800315c:	b002      	add	sp, #8
 800315e:	bd80      	pop	{r7, pc}

08003160 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b082      	sub	sp, #8
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003168:	46c0      	nop			; (mov r8, r8)
 800316a:	46bd      	mov	sp, r7
 800316c:	b002      	add	sp, #8
 800316e:	bd80      	pop	{r7, pc}

08003170 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b082      	sub	sp, #8
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8003178:	46c0      	nop			; (mov r8, r8)
 800317a:	46bd      	mov	sp, r7
 800317c:	b002      	add	sp, #8
 800317e:	bd80      	pop	{r7, pc}

08003180 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b082      	sub	sp, #8
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003188:	46c0      	nop			; (mov r8, r8)
 800318a:	46bd      	mov	sp, r7
 800318c:	b002      	add	sp, #8
 800318e:	bd80      	pop	{r7, pc}

08003190 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b082      	sub	sp, #8
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8003198:	46c0      	nop			; (mov r8, r8)
 800319a:	46bd      	mov	sp, r7
 800319c:	b002      	add	sp, #8
 800319e:	bd80      	pop	{r7, pc}

080031a0 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b084      	sub	sp, #16
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ac:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d107      	bne.n	80031c8 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2201      	movs	r2, #1
 80031bc:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	223e      	movs	r2, #62	; 0x3e
 80031c2:	2101      	movs	r1, #1
 80031c4:	5499      	strb	r1, [r3, r2]
 80031c6:	e02a      	b.n	800321e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d107      	bne.n	80031e2 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2202      	movs	r2, #2
 80031d6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	223f      	movs	r2, #63	; 0x3f
 80031dc:	2101      	movs	r1, #1
 80031de:	5499      	strb	r1, [r3, r2]
 80031e0:	e01d      	b.n	800321e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d107      	bne.n	80031fc <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2204      	movs	r2, #4
 80031f0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2240      	movs	r2, #64	; 0x40
 80031f6:	2101      	movs	r1, #1
 80031f8:	5499      	strb	r1, [r3, r2]
 80031fa:	e010      	b.n	800321e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003200:	687a      	ldr	r2, [r7, #4]
 8003202:	429a      	cmp	r2, r3
 8003204:	d107      	bne.n	8003216 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2208      	movs	r2, #8
 800320a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2241      	movs	r2, #65	; 0x41
 8003210:	2101      	movs	r1, #1
 8003212:	5499      	strb	r1, [r3, r2]
 8003214:	e003      	b.n	800321e <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	223d      	movs	r2, #61	; 0x3d
 800321a:	2101      	movs	r1, #1
 800321c:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	0018      	movs	r0, r3
 8003222:	f7ff ffb5 	bl	8003190 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2200      	movs	r2, #0
 800322a:	771a      	strb	r2, [r3, #28]
}
 800322c:	46c0      	nop			; (mov r8, r8)
 800322e:	46bd      	mov	sp, r7
 8003230:	b004      	add	sp, #16
 8003232:	bd80      	pop	{r7, pc}

08003234 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b084      	sub	sp, #16
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003240:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	429a      	cmp	r2, r3
 800324a:	d10b      	bne.n	8003264 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2201      	movs	r2, #1
 8003250:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	699b      	ldr	r3, [r3, #24]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d136      	bne.n	80032c8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	223e      	movs	r2, #62	; 0x3e
 800325e:	2101      	movs	r1, #1
 8003260:	5499      	strb	r1, [r3, r2]
 8003262:	e031      	b.n	80032c8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	429a      	cmp	r2, r3
 800326c:	d10b      	bne.n	8003286 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2202      	movs	r2, #2
 8003272:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	699b      	ldr	r3, [r3, #24]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d125      	bne.n	80032c8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	223f      	movs	r2, #63	; 0x3f
 8003280:	2101      	movs	r1, #1
 8003282:	5499      	strb	r1, [r3, r2]
 8003284:	e020      	b.n	80032c8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800328a:	687a      	ldr	r2, [r7, #4]
 800328c:	429a      	cmp	r2, r3
 800328e:	d10b      	bne.n	80032a8 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2204      	movs	r2, #4
 8003294:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	699b      	ldr	r3, [r3, #24]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d114      	bne.n	80032c8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2240      	movs	r2, #64	; 0x40
 80032a2:	2101      	movs	r1, #1
 80032a4:	5499      	strb	r1, [r3, r2]
 80032a6:	e00f      	b.n	80032c8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	429a      	cmp	r2, r3
 80032b0:	d10a      	bne.n	80032c8 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2208      	movs	r2, #8
 80032b6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	699b      	ldr	r3, [r3, #24]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d103      	bne.n	80032c8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2241      	movs	r2, #65	; 0x41
 80032c4:	2101      	movs	r1, #1
 80032c6:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	0018      	movs	r0, r3
 80032cc:	f7ff ff48 	bl	8003160 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2200      	movs	r2, #0
 80032d4:	771a      	strb	r2, [r3, #28]
}
 80032d6:	46c0      	nop			; (mov r8, r8)
 80032d8:	46bd      	mov	sp, r7
 80032da:	b004      	add	sp, #16
 80032dc:	bd80      	pop	{r7, pc}

080032de <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80032de:	b580      	push	{r7, lr}
 80032e0:	b084      	sub	sp, #16
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ea:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f0:	687a      	ldr	r2, [r7, #4]
 80032f2:	429a      	cmp	r2, r3
 80032f4:	d103      	bne.n	80032fe <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2201      	movs	r2, #1
 80032fa:	771a      	strb	r2, [r3, #28]
 80032fc:	e019      	b.n	8003332 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003302:	687a      	ldr	r2, [r7, #4]
 8003304:	429a      	cmp	r2, r3
 8003306:	d103      	bne.n	8003310 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2202      	movs	r2, #2
 800330c:	771a      	strb	r2, [r3, #28]
 800330e:	e010      	b.n	8003332 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	429a      	cmp	r2, r3
 8003318:	d103      	bne.n	8003322 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2204      	movs	r2, #4
 800331e:	771a      	strb	r2, [r3, #28]
 8003320:	e007      	b.n	8003332 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	429a      	cmp	r2, r3
 800332a:	d102      	bne.n	8003332 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2208      	movs	r2, #8
 8003330:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	0018      	movs	r0, r3
 8003336:	f7ff ff1b 	bl	8003170 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2200      	movs	r2, #0
 800333e:	771a      	strb	r2, [r3, #28]
}
 8003340:	46c0      	nop			; (mov r8, r8)
 8003342:	46bd      	mov	sp, r7
 8003344:	b004      	add	sp, #16
 8003346:	bd80      	pop	{r7, pc}

08003348 <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b084      	sub	sp, #16
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003354:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	429a      	cmp	r2, r3
 800335e:	d10f      	bne.n	8003380 <TIM_DMACaptureCplt+0x38>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2201      	movs	r2, #1
 8003364:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	699b      	ldr	r3, [r3, #24]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d146      	bne.n	80033fc <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	223e      	movs	r2, #62	; 0x3e
 8003372:	2101      	movs	r1, #1
 8003374:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2242      	movs	r2, #66	; 0x42
 800337a:	2101      	movs	r1, #1
 800337c:	5499      	strb	r1, [r3, r2]
 800337e:	e03d      	b.n	80033fc <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	429a      	cmp	r2, r3
 8003388:	d10f      	bne.n	80033aa <TIM_DMACaptureCplt+0x62>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2202      	movs	r2, #2
 800338e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	699b      	ldr	r3, [r3, #24]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d131      	bne.n	80033fc <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	223f      	movs	r2, #63	; 0x3f
 800339c:	2101      	movs	r1, #1
 800339e:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2243      	movs	r2, #67	; 0x43
 80033a4:	2101      	movs	r1, #1
 80033a6:	5499      	strb	r1, [r3, r2]
 80033a8:	e028      	b.n	80033fc <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d10f      	bne.n	80033d4 <TIM_DMACaptureCplt+0x8c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2204      	movs	r2, #4
 80033b8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	699b      	ldr	r3, [r3, #24]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d11c      	bne.n	80033fc <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2240      	movs	r2, #64	; 0x40
 80033c6:	2101      	movs	r1, #1
 80033c8:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2244      	movs	r2, #68	; 0x44
 80033ce:	2101      	movs	r1, #1
 80033d0:	5499      	strb	r1, [r3, r2]
 80033d2:	e013      	b.n	80033fc <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d8:	687a      	ldr	r2, [r7, #4]
 80033da:	429a      	cmp	r2, r3
 80033dc:	d10e      	bne.n	80033fc <TIM_DMACaptureCplt+0xb4>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2208      	movs	r2, #8
 80033e2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	699b      	ldr	r3, [r3, #24]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d107      	bne.n	80033fc <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2241      	movs	r2, #65	; 0x41
 80033f0:	2101      	movs	r1, #1
 80033f2:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2245      	movs	r2, #69	; 0x45
 80033f8:	2101      	movs	r1, #1
 80033fa:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	0018      	movs	r0, r3
 8003400:	f000 fd66 	bl	8003ed0 <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2200      	movs	r2, #0
 8003408:	771a      	strb	r2, [r3, #28]
}
 800340a:	46c0      	nop			; (mov r8, r8)
 800340c:	46bd      	mov	sp, r7
 800340e:	b004      	add	sp, #16
 8003410:	bd80      	pop	{r7, pc}

08003412 <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003412:	b580      	push	{r7, lr}
 8003414:	b084      	sub	sp, #16
 8003416:	af00      	add	r7, sp, #0
 8003418:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003424:	687a      	ldr	r2, [r7, #4]
 8003426:	429a      	cmp	r2, r3
 8003428:	d103      	bne.n	8003432 <TIM_DMACaptureHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2201      	movs	r2, #1
 800342e:	771a      	strb	r2, [r3, #28]
 8003430:	e019      	b.n	8003466 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	429a      	cmp	r2, r3
 800343a:	d103      	bne.n	8003444 <TIM_DMACaptureHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2202      	movs	r2, #2
 8003440:	771a      	strb	r2, [r3, #28]
 8003442:	e010      	b.n	8003466 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003448:	687a      	ldr	r2, [r7, #4]
 800344a:	429a      	cmp	r2, r3
 800344c:	d103      	bne.n	8003456 <TIM_DMACaptureHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2204      	movs	r2, #4
 8003452:	771a      	strb	r2, [r3, #28]
 8003454:	e007      	b.n	8003466 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	429a      	cmp	r2, r3
 800345e:	d102      	bne.n	8003466 <TIM_DMACaptureHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2208      	movs	r2, #8
 8003464:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	0018      	movs	r0, r3
 800346a:	f7ff fe71 	bl	8003150 <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2200      	movs	r2, #0
 8003472:	771a      	strb	r2, [r3, #28]
}
 8003474:	46c0      	nop			; (mov r8, r8)
 8003476:	46bd      	mov	sp, r7
 8003478:	b004      	add	sp, #16
 800347a:	bd80      	pop	{r7, pc}

0800347c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
 8003484:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	4a34      	ldr	r2, [pc, #208]	; (8003560 <TIM_Base_SetConfig+0xe4>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d008      	beq.n	80034a6 <TIM_Base_SetConfig+0x2a>
 8003494:	687a      	ldr	r2, [r7, #4]
 8003496:	2380      	movs	r3, #128	; 0x80
 8003498:	05db      	lsls	r3, r3, #23
 800349a:	429a      	cmp	r2, r3
 800349c:	d003      	beq.n	80034a6 <TIM_Base_SetConfig+0x2a>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4a30      	ldr	r2, [pc, #192]	; (8003564 <TIM_Base_SetConfig+0xe8>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d108      	bne.n	80034b8 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2270      	movs	r2, #112	; 0x70
 80034aa:	4393      	bics	r3, r2
 80034ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	68fa      	ldr	r2, [r7, #12]
 80034b4:	4313      	orrs	r3, r2
 80034b6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	4a29      	ldr	r2, [pc, #164]	; (8003560 <TIM_Base_SetConfig+0xe4>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d018      	beq.n	80034f2 <TIM_Base_SetConfig+0x76>
 80034c0:	687a      	ldr	r2, [r7, #4]
 80034c2:	2380      	movs	r3, #128	; 0x80
 80034c4:	05db      	lsls	r3, r3, #23
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d013      	beq.n	80034f2 <TIM_Base_SetConfig+0x76>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4a25      	ldr	r2, [pc, #148]	; (8003564 <TIM_Base_SetConfig+0xe8>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d00f      	beq.n	80034f2 <TIM_Base_SetConfig+0x76>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4a24      	ldr	r2, [pc, #144]	; (8003568 <TIM_Base_SetConfig+0xec>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d00b      	beq.n	80034f2 <TIM_Base_SetConfig+0x76>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4a23      	ldr	r2, [pc, #140]	; (800356c <TIM_Base_SetConfig+0xf0>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d007      	beq.n	80034f2 <TIM_Base_SetConfig+0x76>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4a22      	ldr	r2, [pc, #136]	; (8003570 <TIM_Base_SetConfig+0xf4>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d003      	beq.n	80034f2 <TIM_Base_SetConfig+0x76>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4a21      	ldr	r2, [pc, #132]	; (8003574 <TIM_Base_SetConfig+0xf8>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d108      	bne.n	8003504 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	4a20      	ldr	r2, [pc, #128]	; (8003578 <TIM_Base_SetConfig+0xfc>)
 80034f6:	4013      	ands	r3, r2
 80034f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	68fa      	ldr	r2, [r7, #12]
 8003500:	4313      	orrs	r3, r2
 8003502:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2280      	movs	r2, #128	; 0x80
 8003508:	4393      	bics	r3, r2
 800350a:	001a      	movs	r2, r3
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	695b      	ldr	r3, [r3, #20]
 8003510:	4313      	orrs	r3, r2
 8003512:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	68fa      	ldr	r2, [r7, #12]
 8003518:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	689a      	ldr	r2, [r3, #8]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	4a0c      	ldr	r2, [pc, #48]	; (8003560 <TIM_Base_SetConfig+0xe4>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d00b      	beq.n	800354a <TIM_Base_SetConfig+0xce>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4a0d      	ldr	r2, [pc, #52]	; (800356c <TIM_Base_SetConfig+0xf0>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d007      	beq.n	800354a <TIM_Base_SetConfig+0xce>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	4a0c      	ldr	r2, [pc, #48]	; (8003570 <TIM_Base_SetConfig+0xf4>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d003      	beq.n	800354a <TIM_Base_SetConfig+0xce>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4a0b      	ldr	r2, [pc, #44]	; (8003574 <TIM_Base_SetConfig+0xf8>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d103      	bne.n	8003552 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	691a      	ldr	r2, [r3, #16]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2201      	movs	r2, #1
 8003556:	615a      	str	r2, [r3, #20]
}
 8003558:	46c0      	nop			; (mov r8, r8)
 800355a:	46bd      	mov	sp, r7
 800355c:	b004      	add	sp, #16
 800355e:	bd80      	pop	{r7, pc}
 8003560:	40012c00 	.word	0x40012c00
 8003564:	40000400 	.word	0x40000400
 8003568:	40002000 	.word	0x40002000
 800356c:	40014000 	.word	0x40014000
 8003570:	40014400 	.word	0x40014400
 8003574:	40014800 	.word	0x40014800
 8003578:	fffffcff 	.word	0xfffffcff

0800357c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b086      	sub	sp, #24
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6a1b      	ldr	r3, [r3, #32]
 800358a:	2201      	movs	r2, #1
 800358c:	4393      	bics	r3, r2
 800358e:	001a      	movs	r2, r3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6a1b      	ldr	r3, [r3, #32]
 8003598:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	699b      	ldr	r3, [r3, #24]
 80035a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2270      	movs	r2, #112	; 0x70
 80035aa:	4393      	bics	r3, r2
 80035ac:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2203      	movs	r2, #3
 80035b2:	4393      	bics	r3, r2
 80035b4:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	68fa      	ldr	r2, [r7, #12]
 80035bc:	4313      	orrs	r3, r2
 80035be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	2202      	movs	r2, #2
 80035c4:	4393      	bics	r3, r2
 80035c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	697a      	ldr	r2, [r7, #20]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	4a27      	ldr	r2, [pc, #156]	; (8003674 <TIM_OC1_SetConfig+0xf8>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d00b      	beq.n	80035f2 <TIM_OC1_SetConfig+0x76>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4a26      	ldr	r2, [pc, #152]	; (8003678 <TIM_OC1_SetConfig+0xfc>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d007      	beq.n	80035f2 <TIM_OC1_SetConfig+0x76>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	4a25      	ldr	r2, [pc, #148]	; (800367c <TIM_OC1_SetConfig+0x100>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d003      	beq.n	80035f2 <TIM_OC1_SetConfig+0x76>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4a24      	ldr	r2, [pc, #144]	; (8003680 <TIM_OC1_SetConfig+0x104>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d10c      	bne.n	800360c <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	2208      	movs	r2, #8
 80035f6:	4393      	bics	r3, r2
 80035f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	68db      	ldr	r3, [r3, #12]
 80035fe:	697a      	ldr	r2, [r7, #20]
 8003600:	4313      	orrs	r3, r2
 8003602:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	2204      	movs	r2, #4
 8003608:	4393      	bics	r3, r2
 800360a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	4a19      	ldr	r2, [pc, #100]	; (8003674 <TIM_OC1_SetConfig+0xf8>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d00b      	beq.n	800362c <TIM_OC1_SetConfig+0xb0>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	4a18      	ldr	r2, [pc, #96]	; (8003678 <TIM_OC1_SetConfig+0xfc>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d007      	beq.n	800362c <TIM_OC1_SetConfig+0xb0>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	4a17      	ldr	r2, [pc, #92]	; (800367c <TIM_OC1_SetConfig+0x100>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d003      	beq.n	800362c <TIM_OC1_SetConfig+0xb0>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	4a16      	ldr	r2, [pc, #88]	; (8003680 <TIM_OC1_SetConfig+0x104>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d111      	bne.n	8003650 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	4a15      	ldr	r2, [pc, #84]	; (8003684 <TIM_OC1_SetConfig+0x108>)
 8003630:	4013      	ands	r3, r2
 8003632:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	4a14      	ldr	r2, [pc, #80]	; (8003688 <TIM_OC1_SetConfig+0x10c>)
 8003638:	4013      	ands	r3, r2
 800363a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	695b      	ldr	r3, [r3, #20]
 8003640:	693a      	ldr	r2, [r7, #16]
 8003642:	4313      	orrs	r3, r2
 8003644:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	699b      	ldr	r3, [r3, #24]
 800364a:	693a      	ldr	r2, [r7, #16]
 800364c:	4313      	orrs	r3, r2
 800364e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	693a      	ldr	r2, [r7, #16]
 8003654:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	68fa      	ldr	r2, [r7, #12]
 800365a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	685a      	ldr	r2, [r3, #4]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	697a      	ldr	r2, [r7, #20]
 8003668:	621a      	str	r2, [r3, #32]
}
 800366a:	46c0      	nop			; (mov r8, r8)
 800366c:	46bd      	mov	sp, r7
 800366e:	b006      	add	sp, #24
 8003670:	bd80      	pop	{r7, pc}
 8003672:	46c0      	nop			; (mov r8, r8)
 8003674:	40012c00 	.word	0x40012c00
 8003678:	40014000 	.word	0x40014000
 800367c:	40014400 	.word	0x40014400
 8003680:	40014800 	.word	0x40014800
 8003684:	fffffeff 	.word	0xfffffeff
 8003688:	fffffdff 	.word	0xfffffdff

0800368c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b086      	sub	sp, #24
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6a1b      	ldr	r3, [r3, #32]
 800369a:	2210      	movs	r2, #16
 800369c:	4393      	bics	r3, r2
 800369e:	001a      	movs	r2, r3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6a1b      	ldr	r3, [r3, #32]
 80036a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	699b      	ldr	r3, [r3, #24]
 80036b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	4a2e      	ldr	r2, [pc, #184]	; (8003774 <TIM_OC2_SetConfig+0xe8>)
 80036ba:	4013      	ands	r3, r2
 80036bc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	4a2d      	ldr	r2, [pc, #180]	; (8003778 <TIM_OC2_SetConfig+0xec>)
 80036c2:	4013      	ands	r3, r2
 80036c4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	021b      	lsls	r3, r3, #8
 80036cc:	68fa      	ldr	r2, [r7, #12]
 80036ce:	4313      	orrs	r3, r2
 80036d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	2220      	movs	r2, #32
 80036d6:	4393      	bics	r3, r2
 80036d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	011b      	lsls	r3, r3, #4
 80036e0:	697a      	ldr	r2, [r7, #20]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4a24      	ldr	r2, [pc, #144]	; (800377c <TIM_OC2_SetConfig+0xf0>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d10d      	bne.n	800370a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	2280      	movs	r2, #128	; 0x80
 80036f2:	4393      	bics	r3, r2
 80036f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	68db      	ldr	r3, [r3, #12]
 80036fa:	011b      	lsls	r3, r3, #4
 80036fc:	697a      	ldr	r2, [r7, #20]
 80036fe:	4313      	orrs	r3, r2
 8003700:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	2240      	movs	r2, #64	; 0x40
 8003706:	4393      	bics	r3, r2
 8003708:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4a1b      	ldr	r2, [pc, #108]	; (800377c <TIM_OC2_SetConfig+0xf0>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d00b      	beq.n	800372a <TIM_OC2_SetConfig+0x9e>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	4a1a      	ldr	r2, [pc, #104]	; (8003780 <TIM_OC2_SetConfig+0xf4>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d007      	beq.n	800372a <TIM_OC2_SetConfig+0x9e>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	4a19      	ldr	r2, [pc, #100]	; (8003784 <TIM_OC2_SetConfig+0xf8>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d003      	beq.n	800372a <TIM_OC2_SetConfig+0x9e>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	4a18      	ldr	r2, [pc, #96]	; (8003788 <TIM_OC2_SetConfig+0xfc>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d113      	bne.n	8003752 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	4a17      	ldr	r2, [pc, #92]	; (800378c <TIM_OC2_SetConfig+0x100>)
 800372e:	4013      	ands	r3, r2
 8003730:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	4a16      	ldr	r2, [pc, #88]	; (8003790 <TIM_OC2_SetConfig+0x104>)
 8003736:	4013      	ands	r3, r2
 8003738:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	695b      	ldr	r3, [r3, #20]
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	693a      	ldr	r2, [r7, #16]
 8003742:	4313      	orrs	r3, r2
 8003744:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	699b      	ldr	r3, [r3, #24]
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	693a      	ldr	r2, [r7, #16]
 800374e:	4313      	orrs	r3, r2
 8003750:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	693a      	ldr	r2, [r7, #16]
 8003756:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	68fa      	ldr	r2, [r7, #12]
 800375c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	685a      	ldr	r2, [r3, #4]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	697a      	ldr	r2, [r7, #20]
 800376a:	621a      	str	r2, [r3, #32]
}
 800376c:	46c0      	nop			; (mov r8, r8)
 800376e:	46bd      	mov	sp, r7
 8003770:	b006      	add	sp, #24
 8003772:	bd80      	pop	{r7, pc}
 8003774:	ffff8fff 	.word	0xffff8fff
 8003778:	fffffcff 	.word	0xfffffcff
 800377c:	40012c00 	.word	0x40012c00
 8003780:	40014000 	.word	0x40014000
 8003784:	40014400 	.word	0x40014400
 8003788:	40014800 	.word	0x40014800
 800378c:	fffffbff 	.word	0xfffffbff
 8003790:	fffff7ff 	.word	0xfffff7ff

08003794 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b086      	sub	sp, #24
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
 800379c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6a1b      	ldr	r3, [r3, #32]
 80037a2:	4a35      	ldr	r2, [pc, #212]	; (8003878 <TIM_OC3_SetConfig+0xe4>)
 80037a4:	401a      	ands	r2, r3
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6a1b      	ldr	r3, [r3, #32]
 80037ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	69db      	ldr	r3, [r3, #28]
 80037ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2270      	movs	r2, #112	; 0x70
 80037c0:	4393      	bics	r3, r2
 80037c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2203      	movs	r2, #3
 80037c8:	4393      	bics	r3, r2
 80037ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	68fa      	ldr	r2, [r7, #12]
 80037d2:	4313      	orrs	r3, r2
 80037d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	4a28      	ldr	r2, [pc, #160]	; (800387c <TIM_OC3_SetConfig+0xe8>)
 80037da:	4013      	ands	r3, r2
 80037dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	021b      	lsls	r3, r3, #8
 80037e4:	697a      	ldr	r2, [r7, #20]
 80037e6:	4313      	orrs	r3, r2
 80037e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	4a24      	ldr	r2, [pc, #144]	; (8003880 <TIM_OC3_SetConfig+0xec>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d10d      	bne.n	800380e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	4a23      	ldr	r2, [pc, #140]	; (8003884 <TIM_OC3_SetConfig+0xf0>)
 80037f6:	4013      	ands	r3, r2
 80037f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	68db      	ldr	r3, [r3, #12]
 80037fe:	021b      	lsls	r3, r3, #8
 8003800:	697a      	ldr	r2, [r7, #20]
 8003802:	4313      	orrs	r3, r2
 8003804:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	4a1f      	ldr	r2, [pc, #124]	; (8003888 <TIM_OC3_SetConfig+0xf4>)
 800380a:	4013      	ands	r3, r2
 800380c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	4a1b      	ldr	r2, [pc, #108]	; (8003880 <TIM_OC3_SetConfig+0xec>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d00b      	beq.n	800382e <TIM_OC3_SetConfig+0x9a>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	4a1c      	ldr	r2, [pc, #112]	; (800388c <TIM_OC3_SetConfig+0xf8>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d007      	beq.n	800382e <TIM_OC3_SetConfig+0x9a>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	4a1b      	ldr	r2, [pc, #108]	; (8003890 <TIM_OC3_SetConfig+0xfc>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d003      	beq.n	800382e <TIM_OC3_SetConfig+0x9a>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	4a1a      	ldr	r2, [pc, #104]	; (8003894 <TIM_OC3_SetConfig+0x100>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d113      	bne.n	8003856 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	4a19      	ldr	r2, [pc, #100]	; (8003898 <TIM_OC3_SetConfig+0x104>)
 8003832:	4013      	ands	r3, r2
 8003834:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	4a18      	ldr	r2, [pc, #96]	; (800389c <TIM_OC3_SetConfig+0x108>)
 800383a:	4013      	ands	r3, r2
 800383c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	695b      	ldr	r3, [r3, #20]
 8003842:	011b      	lsls	r3, r3, #4
 8003844:	693a      	ldr	r2, [r7, #16]
 8003846:	4313      	orrs	r3, r2
 8003848:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	699b      	ldr	r3, [r3, #24]
 800384e:	011b      	lsls	r3, r3, #4
 8003850:	693a      	ldr	r2, [r7, #16]
 8003852:	4313      	orrs	r3, r2
 8003854:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	693a      	ldr	r2, [r7, #16]
 800385a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	68fa      	ldr	r2, [r7, #12]
 8003860:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	685a      	ldr	r2, [r3, #4]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	697a      	ldr	r2, [r7, #20]
 800386e:	621a      	str	r2, [r3, #32]
}
 8003870:	46c0      	nop			; (mov r8, r8)
 8003872:	46bd      	mov	sp, r7
 8003874:	b006      	add	sp, #24
 8003876:	bd80      	pop	{r7, pc}
 8003878:	fffffeff 	.word	0xfffffeff
 800387c:	fffffdff 	.word	0xfffffdff
 8003880:	40012c00 	.word	0x40012c00
 8003884:	fffff7ff 	.word	0xfffff7ff
 8003888:	fffffbff 	.word	0xfffffbff
 800388c:	40014000 	.word	0x40014000
 8003890:	40014400 	.word	0x40014400
 8003894:	40014800 	.word	0x40014800
 8003898:	ffffefff 	.word	0xffffefff
 800389c:	ffffdfff 	.word	0xffffdfff

080038a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b086      	sub	sp, #24
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6a1b      	ldr	r3, [r3, #32]
 80038ae:	4a28      	ldr	r2, [pc, #160]	; (8003950 <TIM_OC4_SetConfig+0xb0>)
 80038b0:	401a      	ands	r2, r3
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6a1b      	ldr	r3, [r3, #32]
 80038ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	69db      	ldr	r3, [r3, #28]
 80038c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	4a22      	ldr	r2, [pc, #136]	; (8003954 <TIM_OC4_SetConfig+0xb4>)
 80038cc:	4013      	ands	r3, r2
 80038ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	4a21      	ldr	r2, [pc, #132]	; (8003958 <TIM_OC4_SetConfig+0xb8>)
 80038d4:	4013      	ands	r3, r2
 80038d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	021b      	lsls	r3, r3, #8
 80038de:	68fa      	ldr	r2, [r7, #12]
 80038e0:	4313      	orrs	r3, r2
 80038e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	4a1d      	ldr	r2, [pc, #116]	; (800395c <TIM_OC4_SetConfig+0xbc>)
 80038e8:	4013      	ands	r3, r2
 80038ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	031b      	lsls	r3, r3, #12
 80038f2:	693a      	ldr	r2, [r7, #16]
 80038f4:	4313      	orrs	r3, r2
 80038f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	4a19      	ldr	r2, [pc, #100]	; (8003960 <TIM_OC4_SetConfig+0xc0>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d00b      	beq.n	8003918 <TIM_OC4_SetConfig+0x78>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	4a18      	ldr	r2, [pc, #96]	; (8003964 <TIM_OC4_SetConfig+0xc4>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d007      	beq.n	8003918 <TIM_OC4_SetConfig+0x78>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	4a17      	ldr	r2, [pc, #92]	; (8003968 <TIM_OC4_SetConfig+0xc8>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d003      	beq.n	8003918 <TIM_OC4_SetConfig+0x78>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	4a16      	ldr	r2, [pc, #88]	; (800396c <TIM_OC4_SetConfig+0xcc>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d109      	bne.n	800392c <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	4a15      	ldr	r2, [pc, #84]	; (8003970 <TIM_OC4_SetConfig+0xd0>)
 800391c:	4013      	ands	r3, r2
 800391e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	695b      	ldr	r3, [r3, #20]
 8003924:	019b      	lsls	r3, r3, #6
 8003926:	697a      	ldr	r2, [r7, #20]
 8003928:	4313      	orrs	r3, r2
 800392a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	697a      	ldr	r2, [r7, #20]
 8003930:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	68fa      	ldr	r2, [r7, #12]
 8003936:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	685a      	ldr	r2, [r3, #4]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	693a      	ldr	r2, [r7, #16]
 8003944:	621a      	str	r2, [r3, #32]
}
 8003946:	46c0      	nop			; (mov r8, r8)
 8003948:	46bd      	mov	sp, r7
 800394a:	b006      	add	sp, #24
 800394c:	bd80      	pop	{r7, pc}
 800394e:	46c0      	nop			; (mov r8, r8)
 8003950:	ffffefff 	.word	0xffffefff
 8003954:	ffff8fff 	.word	0xffff8fff
 8003958:	fffffcff 	.word	0xfffffcff
 800395c:	ffffdfff 	.word	0xffffdfff
 8003960:	40012c00 	.word	0x40012c00
 8003964:	40014000 	.word	0x40014000
 8003968:	40014400 	.word	0x40014400
 800396c:	40014800 	.word	0x40014800
 8003970:	ffffbfff 	.word	0xffffbfff

08003974 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b086      	sub	sp, #24
 8003978:	af00      	add	r7, sp, #0
 800397a:	60f8      	str	r0, [r7, #12]
 800397c:	60b9      	str	r1, [r7, #8]
 800397e:	607a      	str	r2, [r7, #4]
 8003980:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	6a1b      	ldr	r3, [r3, #32]
 8003986:	2201      	movs	r2, #1
 8003988:	4393      	bics	r3, r2
 800398a:	001a      	movs	r2, r3
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	699b      	ldr	r3, [r3, #24]
 8003994:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	6a1b      	ldr	r3, [r3, #32]
 800399a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	4a20      	ldr	r2, [pc, #128]	; (8003a20 <TIM_TI1_SetConfig+0xac>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d00c      	beq.n	80039be <TIM_TI1_SetConfig+0x4a>
 80039a4:	68fa      	ldr	r2, [r7, #12]
 80039a6:	2380      	movs	r3, #128	; 0x80
 80039a8:	05db      	lsls	r3, r3, #23
 80039aa:	429a      	cmp	r2, r3
 80039ac:	d007      	beq.n	80039be <TIM_TI1_SetConfig+0x4a>
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	4a1c      	ldr	r2, [pc, #112]	; (8003a24 <TIM_TI1_SetConfig+0xb0>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d003      	beq.n	80039be <TIM_TI1_SetConfig+0x4a>
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	4a1b      	ldr	r2, [pc, #108]	; (8003a28 <TIM_TI1_SetConfig+0xb4>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d101      	bne.n	80039c2 <TIM_TI1_SetConfig+0x4e>
 80039be:	2301      	movs	r3, #1
 80039c0:	e000      	b.n	80039c4 <TIM_TI1_SetConfig+0x50>
 80039c2:	2300      	movs	r3, #0
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d008      	beq.n	80039da <TIM_TI1_SetConfig+0x66>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	2203      	movs	r2, #3
 80039cc:	4393      	bics	r3, r2
 80039ce:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80039d0:	697a      	ldr	r2, [r7, #20]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4313      	orrs	r3, r2
 80039d6:	617b      	str	r3, [r7, #20]
 80039d8:	e003      	b.n	80039e2 <TIM_TI1_SetConfig+0x6e>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	2201      	movs	r2, #1
 80039de:	4313      	orrs	r3, r2
 80039e0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	22f0      	movs	r2, #240	; 0xf0
 80039e6:	4393      	bics	r3, r2
 80039e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	011b      	lsls	r3, r3, #4
 80039ee:	22ff      	movs	r2, #255	; 0xff
 80039f0:	4013      	ands	r3, r2
 80039f2:	697a      	ldr	r2, [r7, #20]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	220a      	movs	r2, #10
 80039fc:	4393      	bics	r3, r2
 80039fe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	220a      	movs	r2, #10
 8003a04:	4013      	ands	r3, r2
 8003a06:	693a      	ldr	r2, [r7, #16]
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	697a      	ldr	r2, [r7, #20]
 8003a10:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	693a      	ldr	r2, [r7, #16]
 8003a16:	621a      	str	r2, [r3, #32]
}
 8003a18:	46c0      	nop			; (mov r8, r8)
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	b006      	add	sp, #24
 8003a1e:	bd80      	pop	{r7, pc}
 8003a20:	40012c00 	.word	0x40012c00
 8003a24:	40000400 	.word	0x40000400
 8003a28:	40014000 	.word	0x40014000

08003a2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b086      	sub	sp, #24
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	60f8      	str	r0, [r7, #12]
 8003a34:	60b9      	str	r1, [r7, #8]
 8003a36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	6a1b      	ldr	r3, [r3, #32]
 8003a3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	6a1b      	ldr	r3, [r3, #32]
 8003a42:	2201      	movs	r2, #1
 8003a44:	4393      	bics	r3, r2
 8003a46:	001a      	movs	r2, r3
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	699b      	ldr	r3, [r3, #24]
 8003a50:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	22f0      	movs	r2, #240	; 0xf0
 8003a56:	4393      	bics	r3, r2
 8003a58:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	011b      	lsls	r3, r3, #4
 8003a5e:	693a      	ldr	r2, [r7, #16]
 8003a60:	4313      	orrs	r3, r2
 8003a62:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	220a      	movs	r2, #10
 8003a68:	4393      	bics	r3, r2
 8003a6a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003a6c:	697a      	ldr	r2, [r7, #20]
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	4313      	orrs	r3, r2
 8003a72:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	693a      	ldr	r2, [r7, #16]
 8003a78:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	697a      	ldr	r2, [r7, #20]
 8003a7e:	621a      	str	r2, [r3, #32]
}
 8003a80:	46c0      	nop			; (mov r8, r8)
 8003a82:	46bd      	mov	sp, r7
 8003a84:	b006      	add	sp, #24
 8003a86:	bd80      	pop	{r7, pc}

08003a88 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b086      	sub	sp, #24
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	60f8      	str	r0, [r7, #12]
 8003a90:	60b9      	str	r1, [r7, #8]
 8003a92:	607a      	str	r2, [r7, #4]
 8003a94:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	6a1b      	ldr	r3, [r3, #32]
 8003a9a:	2210      	movs	r2, #16
 8003a9c:	4393      	bics	r3, r2
 8003a9e:	001a      	movs	r2, r3
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	699b      	ldr	r3, [r3, #24]
 8003aa8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	6a1b      	ldr	r3, [r3, #32]
 8003aae:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	4a14      	ldr	r2, [pc, #80]	; (8003b04 <TIM_TI2_SetConfig+0x7c>)
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	021b      	lsls	r3, r3, #8
 8003abc:	697a      	ldr	r2, [r7, #20]
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	4a10      	ldr	r2, [pc, #64]	; (8003b08 <TIM_TI2_SetConfig+0x80>)
 8003ac6:	4013      	ands	r3, r2
 8003ac8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	031b      	lsls	r3, r3, #12
 8003ace:	041b      	lsls	r3, r3, #16
 8003ad0:	0c1b      	lsrs	r3, r3, #16
 8003ad2:	697a      	ldr	r2, [r7, #20]
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	22a0      	movs	r2, #160	; 0xa0
 8003adc:	4393      	bics	r3, r2
 8003ade:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	011b      	lsls	r3, r3, #4
 8003ae4:	22a0      	movs	r2, #160	; 0xa0
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	693a      	ldr	r2, [r7, #16]
 8003aea:	4313      	orrs	r3, r2
 8003aec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	697a      	ldr	r2, [r7, #20]
 8003af2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	693a      	ldr	r2, [r7, #16]
 8003af8:	621a      	str	r2, [r3, #32]
}
 8003afa:	46c0      	nop			; (mov r8, r8)
 8003afc:	46bd      	mov	sp, r7
 8003afe:	b006      	add	sp, #24
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	46c0      	nop			; (mov r8, r8)
 8003b04:	fffffcff 	.word	0xfffffcff
 8003b08:	ffff0fff 	.word	0xffff0fff

08003b0c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b086      	sub	sp, #24
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	60f8      	str	r0, [r7, #12]
 8003b14:	60b9      	str	r1, [r7, #8]
 8003b16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	6a1b      	ldr	r3, [r3, #32]
 8003b1c:	2210      	movs	r2, #16
 8003b1e:	4393      	bics	r3, r2
 8003b20:	001a      	movs	r2, r3
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	699b      	ldr	r3, [r3, #24]
 8003b2a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6a1b      	ldr	r3, [r3, #32]
 8003b30:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	4a0d      	ldr	r2, [pc, #52]	; (8003b6c <TIM_TI2_ConfigInputStage+0x60>)
 8003b36:	4013      	ands	r3, r2
 8003b38:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	031b      	lsls	r3, r3, #12
 8003b3e:	697a      	ldr	r2, [r7, #20]
 8003b40:	4313      	orrs	r3, r2
 8003b42:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	22a0      	movs	r2, #160	; 0xa0
 8003b48:	4393      	bics	r3, r2
 8003b4a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	011b      	lsls	r3, r3, #4
 8003b50:	693a      	ldr	r2, [r7, #16]
 8003b52:	4313      	orrs	r3, r2
 8003b54:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	697a      	ldr	r2, [r7, #20]
 8003b5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	693a      	ldr	r2, [r7, #16]
 8003b60:	621a      	str	r2, [r3, #32]
}
 8003b62:	46c0      	nop			; (mov r8, r8)
 8003b64:	46bd      	mov	sp, r7
 8003b66:	b006      	add	sp, #24
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	46c0      	nop			; (mov r8, r8)
 8003b6c:	ffff0fff 	.word	0xffff0fff

08003b70 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b086      	sub	sp, #24
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	60f8      	str	r0, [r7, #12]
 8003b78:	60b9      	str	r1, [r7, #8]
 8003b7a:	607a      	str	r2, [r7, #4]
 8003b7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	6a1b      	ldr	r3, [r3, #32]
 8003b82:	4a19      	ldr	r2, [pc, #100]	; (8003be8 <TIM_TI3_SetConfig+0x78>)
 8003b84:	401a      	ands	r2, r3
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	69db      	ldr	r3, [r3, #28]
 8003b8e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	6a1b      	ldr	r3, [r3, #32]
 8003b94:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	2203      	movs	r2, #3
 8003b9a:	4393      	bics	r3, r2
 8003b9c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8003b9e:	697a      	ldr	r2, [r7, #20]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	22f0      	movs	r2, #240	; 0xf0
 8003baa:	4393      	bics	r3, r2
 8003bac:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	011b      	lsls	r3, r3, #4
 8003bb2:	22ff      	movs	r2, #255	; 0xff
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	697a      	ldr	r2, [r7, #20]
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	4a0b      	ldr	r2, [pc, #44]	; (8003bec <TIM_TI3_SetConfig+0x7c>)
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	021a      	lsls	r2, r3, #8
 8003bc8:	23a0      	movs	r3, #160	; 0xa0
 8003bca:	011b      	lsls	r3, r3, #4
 8003bcc:	4013      	ands	r3, r2
 8003bce:	693a      	ldr	r2, [r7, #16]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	697a      	ldr	r2, [r7, #20]
 8003bd8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	693a      	ldr	r2, [r7, #16]
 8003bde:	621a      	str	r2, [r3, #32]
}
 8003be0:	46c0      	nop			; (mov r8, r8)
 8003be2:	46bd      	mov	sp, r7
 8003be4:	b006      	add	sp, #24
 8003be6:	bd80      	pop	{r7, pc}
 8003be8:	fffffeff 	.word	0xfffffeff
 8003bec:	fffff5ff 	.word	0xfffff5ff

08003bf0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b086      	sub	sp, #24
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	60f8      	str	r0, [r7, #12]
 8003bf8:	60b9      	str	r1, [r7, #8]
 8003bfa:	607a      	str	r2, [r7, #4]
 8003bfc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	6a1b      	ldr	r3, [r3, #32]
 8003c02:	4a1a      	ldr	r2, [pc, #104]	; (8003c6c <TIM_TI4_SetConfig+0x7c>)
 8003c04:	401a      	ands	r2, r3
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	69db      	ldr	r3, [r3, #28]
 8003c0e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	6a1b      	ldr	r3, [r3, #32]
 8003c14:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	4a15      	ldr	r2, [pc, #84]	; (8003c70 <TIM_TI4_SetConfig+0x80>)
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	021b      	lsls	r3, r3, #8
 8003c22:	697a      	ldr	r2, [r7, #20]
 8003c24:	4313      	orrs	r3, r2
 8003c26:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	4a12      	ldr	r2, [pc, #72]	; (8003c74 <TIM_TI4_SetConfig+0x84>)
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	031b      	lsls	r3, r3, #12
 8003c34:	041b      	lsls	r3, r3, #16
 8003c36:	0c1b      	lsrs	r3, r3, #16
 8003c38:	697a      	ldr	r2, [r7, #20]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	4a0d      	ldr	r2, [pc, #52]	; (8003c78 <TIM_TI4_SetConfig+0x88>)
 8003c42:	4013      	ands	r3, r2
 8003c44:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	031a      	lsls	r2, r3, #12
 8003c4a:	23a0      	movs	r3, #160	; 0xa0
 8003c4c:	021b      	lsls	r3, r3, #8
 8003c4e:	4013      	ands	r3, r2
 8003c50:	693a      	ldr	r2, [r7, #16]
 8003c52:	4313      	orrs	r3, r2
 8003c54:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	697a      	ldr	r2, [r7, #20]
 8003c5a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	693a      	ldr	r2, [r7, #16]
 8003c60:	621a      	str	r2, [r3, #32]
}
 8003c62:	46c0      	nop			; (mov r8, r8)
 8003c64:	46bd      	mov	sp, r7
 8003c66:	b006      	add	sp, #24
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	46c0      	nop			; (mov r8, r8)
 8003c6c:	ffffefff 	.word	0xffffefff
 8003c70:	fffffcff 	.word	0xfffffcff
 8003c74:	ffff0fff 	.word	0xffff0fff
 8003c78:	ffff5fff 	.word	0xffff5fff

08003c7c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b084      	sub	sp, #16
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
 8003c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2270      	movs	r2, #112	; 0x70
 8003c90:	4393      	bics	r3, r2
 8003c92:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c94:	683a      	ldr	r2, [r7, #0]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	2207      	movs	r2, #7
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	68fa      	ldr	r2, [r7, #12]
 8003ca4:	609a      	str	r2, [r3, #8]
}
 8003ca6:	46c0      	nop			; (mov r8, r8)
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	b004      	add	sp, #16
 8003cac:	bd80      	pop	{r7, pc}
	...

08003cb0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b086      	sub	sp, #24
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	60f8      	str	r0, [r7, #12]
 8003cb8:	60b9      	str	r1, [r7, #8]
 8003cba:	607a      	str	r2, [r7, #4]
 8003cbc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	4a09      	ldr	r2, [pc, #36]	; (8003cec <TIM_ETR_SetConfig+0x3c>)
 8003cc8:	4013      	ands	r3, r2
 8003cca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	021a      	lsls	r2, r3, #8
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	431a      	orrs	r2, r3
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	697a      	ldr	r2, [r7, #20]
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	697a      	ldr	r2, [r7, #20]
 8003ce2:	609a      	str	r2, [r3, #8]
}
 8003ce4:	46c0      	nop			; (mov r8, r8)
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	b006      	add	sp, #24
 8003cea:	bd80      	pop	{r7, pc}
 8003cec:	ffff00ff 	.word	0xffff00ff

08003cf0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b086      	sub	sp, #24
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	60f8      	str	r0, [r7, #12]
 8003cf8:	60b9      	str	r1, [r7, #8]
 8003cfa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	221f      	movs	r2, #31
 8003d00:	4013      	ands	r3, r2
 8003d02:	2201      	movs	r2, #1
 8003d04:	409a      	lsls	r2, r3
 8003d06:	0013      	movs	r3, r2
 8003d08:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	6a1b      	ldr	r3, [r3, #32]
 8003d0e:	697a      	ldr	r2, [r7, #20]
 8003d10:	43d2      	mvns	r2, r2
 8003d12:	401a      	ands	r2, r3
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	6a1a      	ldr	r2, [r3, #32]
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	211f      	movs	r1, #31
 8003d20:	400b      	ands	r3, r1
 8003d22:	6879      	ldr	r1, [r7, #4]
 8003d24:	4099      	lsls	r1, r3
 8003d26:	000b      	movs	r3, r1
 8003d28:	431a      	orrs	r2, r3
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	621a      	str	r2, [r3, #32]
}
 8003d2e:	46c0      	nop			; (mov r8, r8)
 8003d30:	46bd      	mov	sp, r7
 8003d32:	b006      	add	sp, #24
 8003d34:	bd80      	pop	{r7, pc}
	...

08003d38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b084      	sub	sp, #16
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	223c      	movs	r2, #60	; 0x3c
 8003d46:	5c9b      	ldrb	r3, [r3, r2]
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d101      	bne.n	8003d50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d4c:	2302      	movs	r3, #2
 8003d4e:	e047      	b.n	8003de0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	223c      	movs	r2, #60	; 0x3c
 8003d54:	2101      	movs	r1, #1
 8003d56:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	223d      	movs	r2, #61	; 0x3d
 8003d5c:	2102      	movs	r1, #2
 8003d5e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2270      	movs	r2, #112	; 0x70
 8003d74:	4393      	bics	r3, r2
 8003d76:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	68fa      	ldr	r2, [r7, #12]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	68fa      	ldr	r2, [r7, #12]
 8003d88:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a16      	ldr	r2, [pc, #88]	; (8003de8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d00f      	beq.n	8003db4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	2380      	movs	r3, #128	; 0x80
 8003d9a:	05db      	lsls	r3, r3, #23
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d009      	beq.n	8003db4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a11      	ldr	r2, [pc, #68]	; (8003dec <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d004      	beq.n	8003db4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a10      	ldr	r2, [pc, #64]	; (8003df0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d10c      	bne.n	8003dce <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	2280      	movs	r2, #128	; 0x80
 8003db8:	4393      	bics	r3, r2
 8003dba:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	68ba      	ldr	r2, [r7, #8]
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	68ba      	ldr	r2, [r7, #8]
 8003dcc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	223d      	movs	r2, #61	; 0x3d
 8003dd2:	2101      	movs	r1, #1
 8003dd4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	223c      	movs	r2, #60	; 0x3c
 8003dda:	2100      	movs	r1, #0
 8003ddc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003dde:	2300      	movs	r3, #0
}
 8003de0:	0018      	movs	r0, r3
 8003de2:	46bd      	mov	sp, r7
 8003de4:	b004      	add	sp, #16
 8003de6:	bd80      	pop	{r7, pc}
 8003de8:	40012c00 	.word	0x40012c00
 8003dec:	40000400 	.word	0x40000400
 8003df0:	40014000 	.word	0x40014000

08003df4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b084      	sub	sp, #16
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	223c      	movs	r2, #60	; 0x3c
 8003e06:	5c9b      	ldrb	r3, [r3, r2]
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d101      	bne.n	8003e10 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003e0c:	2302      	movs	r3, #2
 8003e0e:	e03e      	b.n	8003e8e <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	223c      	movs	r2, #60	; 0x3c
 8003e14:	2101      	movs	r1, #1
 8003e16:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	22ff      	movs	r2, #255	; 0xff
 8003e1c:	4393      	bics	r3, r2
 8003e1e:	001a      	movs	r2, r3
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	4313      	orrs	r3, r2
 8003e26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	4a1b      	ldr	r2, [pc, #108]	; (8003e98 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8003e2c:	401a      	ands	r2, r3
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	4313      	orrs	r3, r2
 8003e34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	4a18      	ldr	r2, [pc, #96]	; (8003e9c <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8003e3a:	401a      	ands	r2, r3
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	4313      	orrs	r3, r2
 8003e42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	4a16      	ldr	r2, [pc, #88]	; (8003ea0 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8003e48:	401a      	ands	r2, r3
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	4a13      	ldr	r2, [pc, #76]	; (8003ea4 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8003e56:	401a      	ands	r2, r3
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	691b      	ldr	r3, [r3, #16]
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	4a11      	ldr	r2, [pc, #68]	; (8003ea8 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8003e64:	401a      	ands	r2, r3
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	695b      	ldr	r3, [r3, #20]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	4a0e      	ldr	r2, [pc, #56]	; (8003eac <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8003e72:	401a      	ands	r2, r3
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	69db      	ldr	r3, [r3, #28]
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	68fa      	ldr	r2, [r7, #12]
 8003e82:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	223c      	movs	r2, #60	; 0x3c
 8003e88:	2100      	movs	r1, #0
 8003e8a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e8c:	2300      	movs	r3, #0
}
 8003e8e:	0018      	movs	r0, r3
 8003e90:	46bd      	mov	sp, r7
 8003e92:	b004      	add	sp, #16
 8003e94:	bd80      	pop	{r7, pc}
 8003e96:	46c0      	nop			; (mov r8, r8)
 8003e98:	fffffcff 	.word	0xfffffcff
 8003e9c:	fffffbff 	.word	0xfffffbff
 8003ea0:	fffff7ff 	.word	0xfffff7ff
 8003ea4:	ffffefff 	.word	0xffffefff
 8003ea8:	ffffdfff 	.word	0xffffdfff
 8003eac:	ffffbfff 	.word	0xffffbfff

08003eb0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b082      	sub	sp, #8
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003eb8:	46c0      	nop			; (mov r8, r8)
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	b002      	add	sp, #8
 8003ebe:	bd80      	pop	{r7, pc}

08003ec0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b082      	sub	sp, #8
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ec8:	46c0      	nop			; (mov r8, r8)
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	b002      	add	sp, #8
 8003ece:	bd80      	pop	{r7, pc}

08003ed0 <HAL_TIM_IC_CaptureCallback>:

//ADC Buffer
uint16_t adc_buf[ADC_BUF_LEN];

//Enable timer3 DMA input capture after the specified amount of data was transfered to memory
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b082      	sub	sp, #8
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
	if (htim == &htim3 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8003ed8:	687a      	ldr	r2, [r7, #4]
 8003eda:	4b07      	ldr	r3, [pc, #28]	; (8003ef8 <HAL_TIM_IC_CaptureCallback+0x28>)
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d106      	bne.n	8003eee <HAL_TIM_IC_CaptureCallback+0x1e>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	7f1b      	ldrb	r3, [r3, #28]
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d102      	bne.n	8003eee <HAL_TIM_IC_CaptureCallback+0x1e>
		newDmaSignal = 1;
 8003ee8:	4b04      	ldr	r3, [pc, #16]	; (8003efc <HAL_TIM_IC_CaptureCallback+0x2c>)
 8003eea:	2201      	movs	r2, #1
 8003eec:	701a      	strb	r2, [r3, #0]
	}
}
 8003eee:	46c0      	nop			; (mov r8, r8)
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	b002      	add	sp, #8
 8003ef4:	bd80      	pop	{r7, pc}
 8003ef6:	46c0      	nop			; (mov r8, r8)
 8003ef8:	200000f4 	.word	0x200000f4
 8003efc:	200000a4 	.word	0x200000a4

08003f00 <_Z10divClosesttt>:

uint16_t divClosest(uint16_t a, uint16_t b) {
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b082      	sub	sp, #8
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	0002      	movs	r2, r0
 8003f08:	1dbb      	adds	r3, r7, #6
 8003f0a:	801a      	strh	r2, [r3, #0]
 8003f0c:	1d3b      	adds	r3, r7, #4
 8003f0e:	1c0a      	adds	r2, r1, #0
 8003f10:	801a      	strh	r2, [r3, #0]
	return (a + b/2) / b;
 8003f12:	1dbb      	adds	r3, r7, #6
 8003f14:	881b      	ldrh	r3, [r3, #0]
 8003f16:	1d3a      	adds	r2, r7, #4
 8003f18:	8812      	ldrh	r2, [r2, #0]
 8003f1a:	0852      	lsrs	r2, r2, #1
 8003f1c:	b292      	uxth	r2, r2
 8003f1e:	189a      	adds	r2, r3, r2
 8003f20:	1d3b      	adds	r3, r7, #4
 8003f22:	881b      	ldrh	r3, [r3, #0]
 8003f24:	0019      	movs	r1, r3
 8003f26:	0010      	movs	r0, r2
 8003f28:	f7fc f978 	bl	800021c <__divsi3>
 8003f2c:	0003      	movs	r3, r0
 8003f2e:	b29b      	uxth	r3, r3
}
 8003f30:	0018      	movs	r0, r3
 8003f32:	46bd      	mov	sp, r7
 8003f34:	b002      	add	sp, #8
 8003f36:	bd80      	pop	{r7, pc}

08003f38 <_Z16processDmaSignalv>:

void processDmaSignal() {
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b082      	sub	sp, #8
 8003f3c:	af00      	add	r7, sp, #0
	newDmaSignal = 0;
 8003f3e:	4b2f      	ldr	r3, [pc, #188]	; (8003ffc <_Z16processDmaSignalv+0xc4>)
 8003f40:	2200      	movs	r2, #0
 8003f42:	701a      	strb	r2, [r3, #0]

	for (int i = 0; i < 15; i++) {
 8003f44:	2300      	movs	r3, #0
 8003f46:	607b      	str	r3, [r7, #4]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2b0e      	cmp	r3, #14
 8003f4c:	dc19      	bgt.n	8003f82 <_Z16processDmaSignalv+0x4a>
		dmaSignalNormalized[i] = divClosest((dmaSignal[i+1] - dmaSignal[i]),6) - 8;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	1c5a      	adds	r2, r3, #1
 8003f52:	4b2b      	ldr	r3, [pc, #172]	; (8004000 <_Z16processDmaSignalv+0xc8>)
 8003f54:	0052      	lsls	r2, r2, #1
 8003f56:	5ad2      	ldrh	r2, [r2, r3]
 8003f58:	4b29      	ldr	r3, [pc, #164]	; (8004000 <_Z16processDmaSignalv+0xc8>)
 8003f5a:	6879      	ldr	r1, [r7, #4]
 8003f5c:	0049      	lsls	r1, r1, #1
 8003f5e:	5acb      	ldrh	r3, [r1, r3]
 8003f60:	1ad3      	subs	r3, r2, r3
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	2106      	movs	r1, #6
 8003f66:	0018      	movs	r0, r3
 8003f68:	f7ff ffca 	bl	8003f00 <_Z10divClosesttt>
 8003f6c:	0003      	movs	r3, r0
 8003f6e:	3b08      	subs	r3, #8
 8003f70:	b299      	uxth	r1, r3
 8003f72:	4b24      	ldr	r3, [pc, #144]	; (8004004 <_Z16processDmaSignalv+0xcc>)
 8003f74:	687a      	ldr	r2, [r7, #4]
 8003f76:	0052      	lsls	r2, r2, #1
 8003f78:	52d1      	strh	r1, [r2, r3]
	for (int i = 0; i < 15; i++) {
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	3301      	adds	r3, #1
 8003f7e:	607b      	str	r3, [r7, #4]
 8003f80:	e7e2      	b.n	8003f48 <_Z16processDmaSignalv+0x10>
	//captured set of pulses.
	//Then, extract ten bits out of those pulses
	// - least recent contains four MSBs
	// - after that are four more bits
	// - after that are the two LSBs
	for (int i = 0; i <= 10; i++) {
 8003f82:	2300      	movs	r3, #0
 8003f84:	603b      	str	r3, [r7, #0]
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	2b0a      	cmp	r3, #10
 8003f8a:	dc32      	bgt.n	8003ff2 <_Z16processDmaSignalv+0xba>
		if (dmaSignalNormalized[i] < 100) {
 8003f8c:	4b1d      	ldr	r3, [pc, #116]	; (8004004 <_Z16processDmaSignalv+0xcc>)
 8003f8e:	683a      	ldr	r2, [r7, #0]
 8003f90:	0052      	lsls	r2, r2, #1
 8003f92:	5ad3      	ldrh	r3, [r2, r3]
 8003f94:	2b63      	cmp	r3, #99	; 0x63
 8003f96:	d926      	bls.n	8003fe6 <_Z16processDmaSignalv+0xae>
			continue;
		}

		//Sometimes the large gap jumps around, the array, resulting in a very large speed value
		//if that's the case, do not update the speed. This occurrence seems to always go away quickly
		testSpeed = dmaSignalNormalized[i+1]<<6 |
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	1c5a      	adds	r2, r3, #1
 8003f9c:	4b19      	ldr	r3, [pc, #100]	; (8004004 <_Z16processDmaSignalv+0xcc>)
 8003f9e:	0052      	lsls	r2, r2, #1
 8003fa0:	5ad3      	ldrh	r3, [r2, r3]
 8003fa2:	019b      	lsls	r3, r3, #6
 8003fa4:	b21a      	sxth	r2, r3
					dmaSignalNormalized[i+3]<<2 |
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	1cd9      	adds	r1, r3, #3
 8003faa:	4b16      	ldr	r3, [pc, #88]	; (8004004 <_Z16processDmaSignalv+0xcc>)
 8003fac:	0049      	lsls	r1, r1, #1
 8003fae:	5acb      	ldrh	r3, [r1, r3]
 8003fb0:	009b      	lsls	r3, r3, #2
		testSpeed = dmaSignalNormalized[i+1]<<6 |
 8003fb2:	b21b      	sxth	r3, r3
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	b21a      	sxth	r2, r3
					dmaSignalNormalized[i+5]>>2;
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	1d59      	adds	r1, r3, #5
 8003fbc:	4b11      	ldr	r3, [pc, #68]	; (8004004 <_Z16processDmaSignalv+0xcc>)
 8003fbe:	0049      	lsls	r1, r1, #1
 8003fc0:	5acb      	ldrh	r3, [r1, r3]
 8003fc2:	109b      	asrs	r3, r3, #2
					dmaSignalNormalized[i+3]<<2 |
 8003fc4:	b21b      	sxth	r3, r3
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	b21b      	sxth	r3, r3
 8003fca:	b29a      	uxth	r2, r3
		testSpeed = dmaSignalNormalized[i+1]<<6 |
 8003fcc:	4b0e      	ldr	r3, [pc, #56]	; (8004008 <_Z16processDmaSignalv+0xd0>)
 8003fce:	801a      	strh	r2, [r3, #0]

		if (testSpeed < 500)
 8003fd0:	4b0d      	ldr	r3, [pc, #52]	; (8004008 <_Z16processDmaSignalv+0xd0>)
 8003fd2:	881a      	ldrh	r2, [r3, #0]
 8003fd4:	23fa      	movs	r3, #250	; 0xfa
 8003fd6:	005b      	lsls	r3, r3, #1
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d209      	bcs.n	8003ff0 <_Z16processDmaSignalv+0xb8>
			speed = testSpeed;
 8003fdc:	4b0a      	ldr	r3, [pc, #40]	; (8004008 <_Z16processDmaSignalv+0xd0>)
 8003fde:	881a      	ldrh	r2, [r3, #0]
 8003fe0:	4b0a      	ldr	r3, [pc, #40]	; (800400c <_Z16processDmaSignalv+0xd4>)
 8003fe2:	801a      	strh	r2, [r3, #0]

		break;
 8003fe4:	e004      	b.n	8003ff0 <_Z16processDmaSignalv+0xb8>
			continue;
 8003fe6:	46c0      	nop			; (mov r8, r8)
	for (int i = 0; i <= 10; i++) {
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	3301      	adds	r3, #1
 8003fec:	603b      	str	r3, [r7, #0]
 8003fee:	e7ca      	b.n	8003f86 <_Z16processDmaSignalv+0x4e>
		break;
 8003ff0:	46c0      	nop			; (mov r8, r8)
	}
}
 8003ff2:	46c0      	nop			; (mov r8, r8)
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	b002      	add	sp, #8
 8003ff8:	bd80      	pop	{r7, pc}
 8003ffa:	46c0      	nop			; (mov r8, r8)
 8003ffc:	200000a4 	.word	0x200000a4
 8004000:	20000064 	.word	0x20000064
 8004004:	20000084 	.word	0x20000084
 8004008:	200000a8 	.word	0x200000a8
 800400c:	200000a6 	.word	0x200000a6

08004010 <HAL_TIM_PeriodElapsedCallback>:
uint32_t it_config_f = 0;
uint8_t consecutive = 0;

uint16_t run_motor = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8004010:	b580      	push	{r7, lr}
 8004012:	b082      	sub	sp, #8
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
	if (htim == &htim2) {
 8004018:	687a      	ldr	r2, [r7, #4]
 800401a:	4b1b      	ldr	r3, [pc, #108]	; (8004088 <HAL_TIM_PeriodElapsedCallback+0x78>)
 800401c:	429a      	cmp	r2, r3
 800401e:	d12f      	bne.n	8004080 <HAL_TIM_PeriodElapsedCallback+0x70>
		if (run_motor >= 200) {
 8004020:	4b1a      	ldr	r3, [pc, #104]	; (800408c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8004022:	881b      	ldrh	r3, [r3, #0]
 8004024:	2bc7      	cmp	r3, #199	; 0xc7
 8004026:	d92b      	bls.n	8004080 <HAL_TIM_PeriodElapsedCallback+0x70>
			if (EXTI->RTSR == it_config_r &&
 8004028:	4b19      	ldr	r3, [pc, #100]	; (8004090 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800402a:	689a      	ldr	r2, [r3, #8]
 800402c:	4b19      	ldr	r3, [pc, #100]	; (8004094 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	429a      	cmp	r2, r3
 8004032:	d107      	bne.n	8004044 <HAL_TIM_PeriodElapsedCallback+0x34>
				EXTI->FTSR == it_config_f) {
 8004034:	4b16      	ldr	r3, [pc, #88]	; (8004090 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8004036:	68da      	ldr	r2, [r3, #12]
 8004038:	4b17      	ldr	r3, [pc, #92]	; (8004098 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800403a:	681b      	ldr	r3, [r3, #0]
			if (EXTI->RTSR == it_config_r &&
 800403c:	429a      	cmp	r2, r3
 800403e:	d101      	bne.n	8004044 <HAL_TIM_PeriodElapsedCallback+0x34>
 8004040:	2301      	movs	r3, #1
 8004042:	e000      	b.n	8004046 <HAL_TIM_PeriodElapsedCallback+0x36>
 8004044:	2300      	movs	r3, #0
 8004046:	2b00      	cmp	r3, #0
 8004048:	d00f      	beq.n	800406a <HAL_TIM_PeriodElapsedCallback+0x5a>
				consecutive++;
 800404a:	4b14      	ldr	r3, [pc, #80]	; (800409c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800404c:	781b      	ldrb	r3, [r3, #0]
 800404e:	3301      	adds	r3, #1
 8004050:	b2da      	uxtb	r2, r3
 8004052:	4b12      	ldr	r3, [pc, #72]	; (800409c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8004054:	701a      	strb	r2, [r3, #0]

				if (consecutive >= 6) {
 8004056:	4b11      	ldr	r3, [pc, #68]	; (800409c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8004058:	781b      	ldrb	r3, [r3, #0]
 800405a:	2b05      	cmp	r3, #5
 800405c:	d908      	bls.n	8004070 <HAL_TIM_PeriodElapsedCallback+0x60>
					all_off();
 800405e:	f000 fc8d 	bl	800497c <_Z7all_offv>
					run_motor = 0;
 8004062:	4b0a      	ldr	r3, [pc, #40]	; (800408c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8004064:	2200      	movs	r2, #0
 8004066:	801a      	strh	r2, [r3, #0]
 8004068:	e002      	b.n	8004070 <HAL_TIM_PeriodElapsedCallback+0x60>
				}
			}
			else {
				consecutive = 0;
 800406a:	4b0c      	ldr	r3, [pc, #48]	; (800409c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800406c:	2200      	movs	r2, #0
 800406e:	701a      	strb	r2, [r3, #0]
			}
			it_config_r = EXTI->RTSR;
 8004070:	4b07      	ldr	r3, [pc, #28]	; (8004090 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8004072:	689a      	ldr	r2, [r3, #8]
 8004074:	4b07      	ldr	r3, [pc, #28]	; (8004094 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8004076:	601a      	str	r2, [r3, #0]
			it_config_f = EXTI->FTSR;
 8004078:	4b05      	ldr	r3, [pc, #20]	; (8004090 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800407a:	68da      	ldr	r2, [r3, #12]
 800407c:	4b06      	ldr	r3, [pc, #24]	; (8004098 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800407e:	601a      	str	r2, [r3, #0]
		}
	}
}
 8004080:	46c0      	nop			; (mov r8, r8)
 8004082:	46bd      	mov	sp, r7
 8004084:	b002      	add	sp, #8
 8004086:	bd80      	pop	{r7, pc}
 8004088:	2000013c 	.word	0x2000013c
 800408c:	200001d6 	.word	0x200001d6
 8004090:	40010400 	.word	0x40010400
 8004094:	200001cc 	.word	0x200001cc
 8004098:	200001d0 	.word	0x200001d0
 800409c:	200001d4 	.word	0x200001d4

080040a0 <_Z8A_RISINGv>:
//
void A_RISING() {
 80040a0:	b580      	push	{r7, lr}
 80040a2:	af00      	add	r7, sp, #0
	//Configure specified interrupt's edge
	//0 - Rising/Falling trigger disabled, 1 - Rising/Falling trigger enabled
	EXTI->RTSR |=  (1<<0);
 80040a4:	4b1f      	ldr	r3, [pc, #124]	; (8004124 <_Z8A_RISINGv+0x84>)
 80040a6:	689a      	ldr	r2, [r3, #8]
 80040a8:	4b1e      	ldr	r3, [pc, #120]	; (8004124 <_Z8A_RISINGv+0x84>)
 80040aa:	2101      	movs	r1, #1
 80040ac:	430a      	orrs	r2, r1
 80040ae:	609a      	str	r2, [r3, #8]
	EXTI->RTSR &= ~(1<<2);
 80040b0:	4b1c      	ldr	r3, [pc, #112]	; (8004124 <_Z8A_RISINGv+0x84>)
 80040b2:	689a      	ldr	r2, [r3, #8]
 80040b4:	4b1b      	ldr	r3, [pc, #108]	; (8004124 <_Z8A_RISINGv+0x84>)
 80040b6:	2104      	movs	r1, #4
 80040b8:	438a      	bics	r2, r1
 80040ba:	609a      	str	r2, [r3, #8]
	EXTI->RTSR &= ~(1<<15);
 80040bc:	4b19      	ldr	r3, [pc, #100]	; (8004124 <_Z8A_RISINGv+0x84>)
 80040be:	689a      	ldr	r2, [r3, #8]
 80040c0:	4b18      	ldr	r3, [pc, #96]	; (8004124 <_Z8A_RISINGv+0x84>)
 80040c2:	4919      	ldr	r1, [pc, #100]	; (8004128 <_Z8A_RISINGv+0x88>)
 80040c4:	400a      	ands	r2, r1
 80040c6:	609a      	str	r2, [r3, #8]

	EXTI->FTSR &= ~(1<<0);
 80040c8:	4b16      	ldr	r3, [pc, #88]	; (8004124 <_Z8A_RISINGv+0x84>)
 80040ca:	68da      	ldr	r2, [r3, #12]
 80040cc:	4b15      	ldr	r3, [pc, #84]	; (8004124 <_Z8A_RISINGv+0x84>)
 80040ce:	2101      	movs	r1, #1
 80040d0:	438a      	bics	r2, r1
 80040d2:	60da      	str	r2, [r3, #12]
	EXTI->FTSR &= ~(1<<2);
 80040d4:	4b13      	ldr	r3, [pc, #76]	; (8004124 <_Z8A_RISINGv+0x84>)
 80040d6:	68da      	ldr	r2, [r3, #12]
 80040d8:	4b12      	ldr	r3, [pc, #72]	; (8004124 <_Z8A_RISINGv+0x84>)
 80040da:	2104      	movs	r1, #4
 80040dc:	438a      	bics	r2, r1
 80040de:	60da      	str	r2, [r3, #12]
	EXTI->FTSR &= ~(1<<15);
 80040e0:	4b10      	ldr	r3, [pc, #64]	; (8004124 <_Z8A_RISINGv+0x84>)
 80040e2:	68da      	ldr	r2, [r3, #12]
 80040e4:	4b0f      	ldr	r3, [pc, #60]	; (8004124 <_Z8A_RISINGv+0x84>)
 80040e6:	4910      	ldr	r1, [pc, #64]	; (8004128 <_Z8A_RISINGv+0x88>)
 80040e8:	400a      	ands	r2, r1
 80040ea:	60da      	str	r2, [r3, #12]
	//Mask all but the specified interrupts
	//1 - nonmasked (ready to be used), 0 - masked (not being used)
	EXTI->IMR |=  (1<<0);
 80040ec:	4b0d      	ldr	r3, [pc, #52]	; (8004124 <_Z8A_RISINGv+0x84>)
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	4b0c      	ldr	r3, [pc, #48]	; (8004124 <_Z8A_RISINGv+0x84>)
 80040f2:	2101      	movs	r1, #1
 80040f4:	430a      	orrs	r2, r1
 80040f6:	601a      	str	r2, [r3, #0]
	EXTI->IMR &= ~(1<<2);
 80040f8:	4b0a      	ldr	r3, [pc, #40]	; (8004124 <_Z8A_RISINGv+0x84>)
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	4b09      	ldr	r3, [pc, #36]	; (8004124 <_Z8A_RISINGv+0x84>)
 80040fe:	2104      	movs	r1, #4
 8004100:	438a      	bics	r2, r1
 8004102:	601a      	str	r2, [r3, #0]
	EXTI->IMR &= ~(1<<15);
 8004104:	4b07      	ldr	r3, [pc, #28]	; (8004124 <_Z8A_RISINGv+0x84>)
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	4b06      	ldr	r3, [pc, #24]	; (8004124 <_Z8A_RISINGv+0x84>)
 800410a:	4907      	ldr	r1, [pc, #28]	; (8004128 <_Z8A_RISINGv+0x88>)
 800410c:	400a      	ands	r2, r1
 800410e:	601a      	str	r2, [r3, #0]

	EXTI->PR  &= ~(1<<0 | 1<<2 | 1<<15);
 8004110:	4b04      	ldr	r3, [pc, #16]	; (8004124 <_Z8A_RISINGv+0x84>)
 8004112:	695a      	ldr	r2, [r3, #20]
 8004114:	4b03      	ldr	r3, [pc, #12]	; (8004124 <_Z8A_RISINGv+0x84>)
 8004116:	4905      	ldr	r1, [pc, #20]	; (800412c <_Z8A_RISINGv+0x8c>)
 8004118:	400a      	ands	r2, r1
 800411a:	615a      	str	r2, [r3, #20]
}
 800411c:	46c0      	nop			; (mov r8, r8)
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}
 8004122:	46c0      	nop			; (mov r8, r8)
 8004124:	40010400 	.word	0x40010400
 8004128:	ffff7fff 	.word	0xffff7fff
 800412c:	ffff7ffa 	.word	0xffff7ffa

08004130 <_Z9A_FALLINGv>:
void A_FALLING() {
 8004130:	b580      	push	{r7, lr}
 8004132:	af00      	add	r7, sp, #0
	//Configure specified interrupt's edge
	//0 - Rising/Falling trigger disabled, 1 - Rising/Falling trigger enabled
	EXTI->RTSR &= ~(1<<0);
 8004134:	4b1f      	ldr	r3, [pc, #124]	; (80041b4 <_Z9A_FALLINGv+0x84>)
 8004136:	689a      	ldr	r2, [r3, #8]
 8004138:	4b1e      	ldr	r3, [pc, #120]	; (80041b4 <_Z9A_FALLINGv+0x84>)
 800413a:	2101      	movs	r1, #1
 800413c:	438a      	bics	r2, r1
 800413e:	609a      	str	r2, [r3, #8]
	EXTI->RTSR &= ~(1<<2);
 8004140:	4b1c      	ldr	r3, [pc, #112]	; (80041b4 <_Z9A_FALLINGv+0x84>)
 8004142:	689a      	ldr	r2, [r3, #8]
 8004144:	4b1b      	ldr	r3, [pc, #108]	; (80041b4 <_Z9A_FALLINGv+0x84>)
 8004146:	2104      	movs	r1, #4
 8004148:	438a      	bics	r2, r1
 800414a:	609a      	str	r2, [r3, #8]
	EXTI->RTSR &= ~(1<<15);
 800414c:	4b19      	ldr	r3, [pc, #100]	; (80041b4 <_Z9A_FALLINGv+0x84>)
 800414e:	689a      	ldr	r2, [r3, #8]
 8004150:	4b18      	ldr	r3, [pc, #96]	; (80041b4 <_Z9A_FALLINGv+0x84>)
 8004152:	4919      	ldr	r1, [pc, #100]	; (80041b8 <_Z9A_FALLINGv+0x88>)
 8004154:	400a      	ands	r2, r1
 8004156:	609a      	str	r2, [r3, #8]

	EXTI->FTSR |= (1<<0);
 8004158:	4b16      	ldr	r3, [pc, #88]	; (80041b4 <_Z9A_FALLINGv+0x84>)
 800415a:	68da      	ldr	r2, [r3, #12]
 800415c:	4b15      	ldr	r3, [pc, #84]	; (80041b4 <_Z9A_FALLINGv+0x84>)
 800415e:	2101      	movs	r1, #1
 8004160:	430a      	orrs	r2, r1
 8004162:	60da      	str	r2, [r3, #12]
	EXTI->FTSR &= ~(1<<2);
 8004164:	4b13      	ldr	r3, [pc, #76]	; (80041b4 <_Z9A_FALLINGv+0x84>)
 8004166:	68da      	ldr	r2, [r3, #12]
 8004168:	4b12      	ldr	r3, [pc, #72]	; (80041b4 <_Z9A_FALLINGv+0x84>)
 800416a:	2104      	movs	r1, #4
 800416c:	438a      	bics	r2, r1
 800416e:	60da      	str	r2, [r3, #12]
	EXTI->FTSR &= ~(1<<15);
 8004170:	4b10      	ldr	r3, [pc, #64]	; (80041b4 <_Z9A_FALLINGv+0x84>)
 8004172:	68da      	ldr	r2, [r3, #12]
 8004174:	4b0f      	ldr	r3, [pc, #60]	; (80041b4 <_Z9A_FALLINGv+0x84>)
 8004176:	4910      	ldr	r1, [pc, #64]	; (80041b8 <_Z9A_FALLINGv+0x88>)
 8004178:	400a      	ands	r2, r1
 800417a:	60da      	str	r2, [r3, #12]
	//Mask all but the specified interrupts
	//1 - nonmasked (ready to be used), 0 - masked (not being used)
	EXTI->IMR |=  (1<<0);
 800417c:	4b0d      	ldr	r3, [pc, #52]	; (80041b4 <_Z9A_FALLINGv+0x84>)
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	4b0c      	ldr	r3, [pc, #48]	; (80041b4 <_Z9A_FALLINGv+0x84>)
 8004182:	2101      	movs	r1, #1
 8004184:	430a      	orrs	r2, r1
 8004186:	601a      	str	r2, [r3, #0]
	EXTI->IMR &= ~(1<<2);
 8004188:	4b0a      	ldr	r3, [pc, #40]	; (80041b4 <_Z9A_FALLINGv+0x84>)
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	4b09      	ldr	r3, [pc, #36]	; (80041b4 <_Z9A_FALLINGv+0x84>)
 800418e:	2104      	movs	r1, #4
 8004190:	438a      	bics	r2, r1
 8004192:	601a      	str	r2, [r3, #0]
	EXTI->IMR &= ~(1<<15);
 8004194:	4b07      	ldr	r3, [pc, #28]	; (80041b4 <_Z9A_FALLINGv+0x84>)
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	4b06      	ldr	r3, [pc, #24]	; (80041b4 <_Z9A_FALLINGv+0x84>)
 800419a:	4907      	ldr	r1, [pc, #28]	; (80041b8 <_Z9A_FALLINGv+0x88>)
 800419c:	400a      	ands	r2, r1
 800419e:	601a      	str	r2, [r3, #0]

	EXTI->PR  &= ~(1<<0 | 1<<2 | 1<<15);
 80041a0:	4b04      	ldr	r3, [pc, #16]	; (80041b4 <_Z9A_FALLINGv+0x84>)
 80041a2:	695a      	ldr	r2, [r3, #20]
 80041a4:	4b03      	ldr	r3, [pc, #12]	; (80041b4 <_Z9A_FALLINGv+0x84>)
 80041a6:	4905      	ldr	r1, [pc, #20]	; (80041bc <_Z9A_FALLINGv+0x8c>)
 80041a8:	400a      	ands	r2, r1
 80041aa:	615a      	str	r2, [r3, #20]
}
 80041ac:	46c0      	nop			; (mov r8, r8)
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}
 80041b2:	46c0      	nop			; (mov r8, r8)
 80041b4:	40010400 	.word	0x40010400
 80041b8:	ffff7fff 	.word	0xffff7fff
 80041bc:	ffff7ffa 	.word	0xffff7ffa

080041c0 <_Z8B_RISINGv>:
void B_RISING() {
 80041c0:	b580      	push	{r7, lr}
 80041c2:	af00      	add	r7, sp, #0
	//Configure specified interrupt's edge
	//0 - Rising/Falling trigger disabled, 1 - Rising/Falling trigger enabled
	EXTI->RTSR &= ~(1<<0);
 80041c4:	4b1f      	ldr	r3, [pc, #124]	; (8004244 <_Z8B_RISINGv+0x84>)
 80041c6:	689a      	ldr	r2, [r3, #8]
 80041c8:	4b1e      	ldr	r3, [pc, #120]	; (8004244 <_Z8B_RISINGv+0x84>)
 80041ca:	2101      	movs	r1, #1
 80041cc:	438a      	bics	r2, r1
 80041ce:	609a      	str	r2, [r3, #8]
	EXTI->RTSR |=  (1<<2);
 80041d0:	4b1c      	ldr	r3, [pc, #112]	; (8004244 <_Z8B_RISINGv+0x84>)
 80041d2:	689a      	ldr	r2, [r3, #8]
 80041d4:	4b1b      	ldr	r3, [pc, #108]	; (8004244 <_Z8B_RISINGv+0x84>)
 80041d6:	2104      	movs	r1, #4
 80041d8:	430a      	orrs	r2, r1
 80041da:	609a      	str	r2, [r3, #8]
	EXTI->RTSR &= ~(1<<15);
 80041dc:	4b19      	ldr	r3, [pc, #100]	; (8004244 <_Z8B_RISINGv+0x84>)
 80041de:	689a      	ldr	r2, [r3, #8]
 80041e0:	4b18      	ldr	r3, [pc, #96]	; (8004244 <_Z8B_RISINGv+0x84>)
 80041e2:	4919      	ldr	r1, [pc, #100]	; (8004248 <_Z8B_RISINGv+0x88>)
 80041e4:	400a      	ands	r2, r1
 80041e6:	609a      	str	r2, [r3, #8]

	EXTI->FTSR &= ~(1<<0);
 80041e8:	4b16      	ldr	r3, [pc, #88]	; (8004244 <_Z8B_RISINGv+0x84>)
 80041ea:	68da      	ldr	r2, [r3, #12]
 80041ec:	4b15      	ldr	r3, [pc, #84]	; (8004244 <_Z8B_RISINGv+0x84>)
 80041ee:	2101      	movs	r1, #1
 80041f0:	438a      	bics	r2, r1
 80041f2:	60da      	str	r2, [r3, #12]
	EXTI->FTSR &= ~(1<<2);
 80041f4:	4b13      	ldr	r3, [pc, #76]	; (8004244 <_Z8B_RISINGv+0x84>)
 80041f6:	68da      	ldr	r2, [r3, #12]
 80041f8:	4b12      	ldr	r3, [pc, #72]	; (8004244 <_Z8B_RISINGv+0x84>)
 80041fa:	2104      	movs	r1, #4
 80041fc:	438a      	bics	r2, r1
 80041fe:	60da      	str	r2, [r3, #12]
	EXTI->FTSR &= ~(1<<15);
 8004200:	4b10      	ldr	r3, [pc, #64]	; (8004244 <_Z8B_RISINGv+0x84>)
 8004202:	68da      	ldr	r2, [r3, #12]
 8004204:	4b0f      	ldr	r3, [pc, #60]	; (8004244 <_Z8B_RISINGv+0x84>)
 8004206:	4910      	ldr	r1, [pc, #64]	; (8004248 <_Z8B_RISINGv+0x88>)
 8004208:	400a      	ands	r2, r1
 800420a:	60da      	str	r2, [r3, #12]
	//Mask all but the specified interrupts
	//1 - nonmasked (ready to be used), 0 - masked (not being used)
	EXTI->IMR &= ~(1<<0);
 800420c:	4b0d      	ldr	r3, [pc, #52]	; (8004244 <_Z8B_RISINGv+0x84>)
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	4b0c      	ldr	r3, [pc, #48]	; (8004244 <_Z8B_RISINGv+0x84>)
 8004212:	2101      	movs	r1, #1
 8004214:	438a      	bics	r2, r1
 8004216:	601a      	str	r2, [r3, #0]
	EXTI->IMR |=  (1<<2);
 8004218:	4b0a      	ldr	r3, [pc, #40]	; (8004244 <_Z8B_RISINGv+0x84>)
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	4b09      	ldr	r3, [pc, #36]	; (8004244 <_Z8B_RISINGv+0x84>)
 800421e:	2104      	movs	r1, #4
 8004220:	430a      	orrs	r2, r1
 8004222:	601a      	str	r2, [r3, #0]
	EXTI->IMR &= ~(1<<15);
 8004224:	4b07      	ldr	r3, [pc, #28]	; (8004244 <_Z8B_RISINGv+0x84>)
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	4b06      	ldr	r3, [pc, #24]	; (8004244 <_Z8B_RISINGv+0x84>)
 800422a:	4907      	ldr	r1, [pc, #28]	; (8004248 <_Z8B_RISINGv+0x88>)
 800422c:	400a      	ands	r2, r1
 800422e:	601a      	str	r2, [r3, #0]

	EXTI->PR  &= ~(1<<0 | 1<<2 | 1<<15);
 8004230:	4b04      	ldr	r3, [pc, #16]	; (8004244 <_Z8B_RISINGv+0x84>)
 8004232:	695a      	ldr	r2, [r3, #20]
 8004234:	4b03      	ldr	r3, [pc, #12]	; (8004244 <_Z8B_RISINGv+0x84>)
 8004236:	4905      	ldr	r1, [pc, #20]	; (800424c <_Z8B_RISINGv+0x8c>)
 8004238:	400a      	ands	r2, r1
 800423a:	615a      	str	r2, [r3, #20]
}
 800423c:	46c0      	nop			; (mov r8, r8)
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}
 8004242:	46c0      	nop			; (mov r8, r8)
 8004244:	40010400 	.word	0x40010400
 8004248:	ffff7fff 	.word	0xffff7fff
 800424c:	ffff7ffa 	.word	0xffff7ffa

08004250 <_Z9B_FALLINGv>:
void B_FALLING() {
 8004250:	b580      	push	{r7, lr}
 8004252:	af00      	add	r7, sp, #0
	//Configure specified interrupt's edge
	//0 - Rising/Falling trigger disabled, 1 - Rising/Falling trigger enabled
	EXTI->RTSR &= ~(1<<0);
 8004254:	4b1f      	ldr	r3, [pc, #124]	; (80042d4 <_Z9B_FALLINGv+0x84>)
 8004256:	689a      	ldr	r2, [r3, #8]
 8004258:	4b1e      	ldr	r3, [pc, #120]	; (80042d4 <_Z9B_FALLINGv+0x84>)
 800425a:	2101      	movs	r1, #1
 800425c:	438a      	bics	r2, r1
 800425e:	609a      	str	r2, [r3, #8]
	EXTI->RTSR &= ~(1<<2);
 8004260:	4b1c      	ldr	r3, [pc, #112]	; (80042d4 <_Z9B_FALLINGv+0x84>)
 8004262:	689a      	ldr	r2, [r3, #8]
 8004264:	4b1b      	ldr	r3, [pc, #108]	; (80042d4 <_Z9B_FALLINGv+0x84>)
 8004266:	2104      	movs	r1, #4
 8004268:	438a      	bics	r2, r1
 800426a:	609a      	str	r2, [r3, #8]
	EXTI->RTSR &= ~(1<<15);
 800426c:	4b19      	ldr	r3, [pc, #100]	; (80042d4 <_Z9B_FALLINGv+0x84>)
 800426e:	689a      	ldr	r2, [r3, #8]
 8004270:	4b18      	ldr	r3, [pc, #96]	; (80042d4 <_Z9B_FALLINGv+0x84>)
 8004272:	4919      	ldr	r1, [pc, #100]	; (80042d8 <_Z9B_FALLINGv+0x88>)
 8004274:	400a      	ands	r2, r1
 8004276:	609a      	str	r2, [r3, #8]

	EXTI->FTSR &= ~(1<<0);
 8004278:	4b16      	ldr	r3, [pc, #88]	; (80042d4 <_Z9B_FALLINGv+0x84>)
 800427a:	68da      	ldr	r2, [r3, #12]
 800427c:	4b15      	ldr	r3, [pc, #84]	; (80042d4 <_Z9B_FALLINGv+0x84>)
 800427e:	2101      	movs	r1, #1
 8004280:	438a      	bics	r2, r1
 8004282:	60da      	str	r2, [r3, #12]
	EXTI->FTSR |=  (1<<2);
 8004284:	4b13      	ldr	r3, [pc, #76]	; (80042d4 <_Z9B_FALLINGv+0x84>)
 8004286:	68da      	ldr	r2, [r3, #12]
 8004288:	4b12      	ldr	r3, [pc, #72]	; (80042d4 <_Z9B_FALLINGv+0x84>)
 800428a:	2104      	movs	r1, #4
 800428c:	430a      	orrs	r2, r1
 800428e:	60da      	str	r2, [r3, #12]
	EXTI->FTSR &= ~(1<<15);
 8004290:	4b10      	ldr	r3, [pc, #64]	; (80042d4 <_Z9B_FALLINGv+0x84>)
 8004292:	68da      	ldr	r2, [r3, #12]
 8004294:	4b0f      	ldr	r3, [pc, #60]	; (80042d4 <_Z9B_FALLINGv+0x84>)
 8004296:	4910      	ldr	r1, [pc, #64]	; (80042d8 <_Z9B_FALLINGv+0x88>)
 8004298:	400a      	ands	r2, r1
 800429a:	60da      	str	r2, [r3, #12]
	//Mask all but the specified interrupts
	//1 - nonmasked (ready to be used), 0 - masked (not being used)
	EXTI->IMR &= ~(1<<0);
 800429c:	4b0d      	ldr	r3, [pc, #52]	; (80042d4 <_Z9B_FALLINGv+0x84>)
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	4b0c      	ldr	r3, [pc, #48]	; (80042d4 <_Z9B_FALLINGv+0x84>)
 80042a2:	2101      	movs	r1, #1
 80042a4:	438a      	bics	r2, r1
 80042a6:	601a      	str	r2, [r3, #0]
	EXTI->IMR |=  (1<<2);
 80042a8:	4b0a      	ldr	r3, [pc, #40]	; (80042d4 <_Z9B_FALLINGv+0x84>)
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	4b09      	ldr	r3, [pc, #36]	; (80042d4 <_Z9B_FALLINGv+0x84>)
 80042ae:	2104      	movs	r1, #4
 80042b0:	430a      	orrs	r2, r1
 80042b2:	601a      	str	r2, [r3, #0]
	EXTI->IMR &= ~(1<<15);
 80042b4:	4b07      	ldr	r3, [pc, #28]	; (80042d4 <_Z9B_FALLINGv+0x84>)
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	4b06      	ldr	r3, [pc, #24]	; (80042d4 <_Z9B_FALLINGv+0x84>)
 80042ba:	4907      	ldr	r1, [pc, #28]	; (80042d8 <_Z9B_FALLINGv+0x88>)
 80042bc:	400a      	ands	r2, r1
 80042be:	601a      	str	r2, [r3, #0]

	EXTI->PR  &= ~(1<<0 | 1<<2 | 1<<15);
 80042c0:	4b04      	ldr	r3, [pc, #16]	; (80042d4 <_Z9B_FALLINGv+0x84>)
 80042c2:	695a      	ldr	r2, [r3, #20]
 80042c4:	4b03      	ldr	r3, [pc, #12]	; (80042d4 <_Z9B_FALLINGv+0x84>)
 80042c6:	4905      	ldr	r1, [pc, #20]	; (80042dc <_Z9B_FALLINGv+0x8c>)
 80042c8:	400a      	ands	r2, r1
 80042ca:	615a      	str	r2, [r3, #20]
}
 80042cc:	46c0      	nop			; (mov r8, r8)
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}
 80042d2:	46c0      	nop			; (mov r8, r8)
 80042d4:	40010400 	.word	0x40010400
 80042d8:	ffff7fff 	.word	0xffff7fff
 80042dc:	ffff7ffa 	.word	0xffff7ffa

080042e0 <_Z8C_RISINGv>:
void C_RISING() {
 80042e0:	b580      	push	{r7, lr}
 80042e2:	af00      	add	r7, sp, #0
	//Configure specified interrupt's edge
	//0 - Rising/Falling trigger disabled, 1 - Rising/Falling trigger enabled
	EXTI->RTSR &= ~(1<<0);
 80042e4:	4b20      	ldr	r3, [pc, #128]	; (8004368 <_Z8C_RISINGv+0x88>)
 80042e6:	689a      	ldr	r2, [r3, #8]
 80042e8:	4b1f      	ldr	r3, [pc, #124]	; (8004368 <_Z8C_RISINGv+0x88>)
 80042ea:	2101      	movs	r1, #1
 80042ec:	438a      	bics	r2, r1
 80042ee:	609a      	str	r2, [r3, #8]
	EXTI->RTSR &= ~(1<<2);
 80042f0:	4b1d      	ldr	r3, [pc, #116]	; (8004368 <_Z8C_RISINGv+0x88>)
 80042f2:	689a      	ldr	r2, [r3, #8]
 80042f4:	4b1c      	ldr	r3, [pc, #112]	; (8004368 <_Z8C_RISINGv+0x88>)
 80042f6:	2104      	movs	r1, #4
 80042f8:	438a      	bics	r2, r1
 80042fa:	609a      	str	r2, [r3, #8]
	EXTI->RTSR |=  (1<<15);
 80042fc:	4b1a      	ldr	r3, [pc, #104]	; (8004368 <_Z8C_RISINGv+0x88>)
 80042fe:	689a      	ldr	r2, [r3, #8]
 8004300:	4b19      	ldr	r3, [pc, #100]	; (8004368 <_Z8C_RISINGv+0x88>)
 8004302:	2180      	movs	r1, #128	; 0x80
 8004304:	0209      	lsls	r1, r1, #8
 8004306:	430a      	orrs	r2, r1
 8004308:	609a      	str	r2, [r3, #8]

	EXTI->FTSR &= ~(1<<0);
 800430a:	4b17      	ldr	r3, [pc, #92]	; (8004368 <_Z8C_RISINGv+0x88>)
 800430c:	68da      	ldr	r2, [r3, #12]
 800430e:	4b16      	ldr	r3, [pc, #88]	; (8004368 <_Z8C_RISINGv+0x88>)
 8004310:	2101      	movs	r1, #1
 8004312:	438a      	bics	r2, r1
 8004314:	60da      	str	r2, [r3, #12]
	EXTI->FTSR &= ~(1<<2);
 8004316:	4b14      	ldr	r3, [pc, #80]	; (8004368 <_Z8C_RISINGv+0x88>)
 8004318:	68da      	ldr	r2, [r3, #12]
 800431a:	4b13      	ldr	r3, [pc, #76]	; (8004368 <_Z8C_RISINGv+0x88>)
 800431c:	2104      	movs	r1, #4
 800431e:	438a      	bics	r2, r1
 8004320:	60da      	str	r2, [r3, #12]
	EXTI->FTSR &= ~(1<<15);
 8004322:	4b11      	ldr	r3, [pc, #68]	; (8004368 <_Z8C_RISINGv+0x88>)
 8004324:	68da      	ldr	r2, [r3, #12]
 8004326:	4b10      	ldr	r3, [pc, #64]	; (8004368 <_Z8C_RISINGv+0x88>)
 8004328:	4910      	ldr	r1, [pc, #64]	; (800436c <_Z8C_RISINGv+0x8c>)
 800432a:	400a      	ands	r2, r1
 800432c:	60da      	str	r2, [r3, #12]
	//Mask all but the specified interrupts
	//1 - nonmasked (ready to be used), 0 - masked (not being used)
	EXTI->IMR &= ~(1<<0);
 800432e:	4b0e      	ldr	r3, [pc, #56]	; (8004368 <_Z8C_RISINGv+0x88>)
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	4b0d      	ldr	r3, [pc, #52]	; (8004368 <_Z8C_RISINGv+0x88>)
 8004334:	2101      	movs	r1, #1
 8004336:	438a      	bics	r2, r1
 8004338:	601a      	str	r2, [r3, #0]
	EXTI->IMR &= ~(1<<2);
 800433a:	4b0b      	ldr	r3, [pc, #44]	; (8004368 <_Z8C_RISINGv+0x88>)
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	4b0a      	ldr	r3, [pc, #40]	; (8004368 <_Z8C_RISINGv+0x88>)
 8004340:	2104      	movs	r1, #4
 8004342:	438a      	bics	r2, r1
 8004344:	601a      	str	r2, [r3, #0]
	EXTI->IMR |= (1<<15);
 8004346:	4b08      	ldr	r3, [pc, #32]	; (8004368 <_Z8C_RISINGv+0x88>)
 8004348:	681a      	ldr	r2, [r3, #0]
 800434a:	4b07      	ldr	r3, [pc, #28]	; (8004368 <_Z8C_RISINGv+0x88>)
 800434c:	2180      	movs	r1, #128	; 0x80
 800434e:	0209      	lsls	r1, r1, #8
 8004350:	430a      	orrs	r2, r1
 8004352:	601a      	str	r2, [r3, #0]

	EXTI->PR  &= ~(1<<0 | 1<<2 | 1<<15);
 8004354:	4b04      	ldr	r3, [pc, #16]	; (8004368 <_Z8C_RISINGv+0x88>)
 8004356:	695a      	ldr	r2, [r3, #20]
 8004358:	4b03      	ldr	r3, [pc, #12]	; (8004368 <_Z8C_RISINGv+0x88>)
 800435a:	4905      	ldr	r1, [pc, #20]	; (8004370 <_Z8C_RISINGv+0x90>)
 800435c:	400a      	ands	r2, r1
 800435e:	615a      	str	r2, [r3, #20]
}
 8004360:	46c0      	nop			; (mov r8, r8)
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}
 8004366:	46c0      	nop			; (mov r8, r8)
 8004368:	40010400 	.word	0x40010400
 800436c:	ffff7fff 	.word	0xffff7fff
 8004370:	ffff7ffa 	.word	0xffff7ffa

08004374 <_Z9C_FALLINGv>:
void C_FALLING() {
 8004374:	b580      	push	{r7, lr}
 8004376:	af00      	add	r7, sp, #0
	//Configure specified interrupt's edge
	//0 - Rising/Falling trigger disabled, 1 - Rising/Falling trigger enabled
	EXTI->RTSR &= ~(1<<0);
 8004378:	4b20      	ldr	r3, [pc, #128]	; (80043fc <_Z9C_FALLINGv+0x88>)
 800437a:	689a      	ldr	r2, [r3, #8]
 800437c:	4b1f      	ldr	r3, [pc, #124]	; (80043fc <_Z9C_FALLINGv+0x88>)
 800437e:	2101      	movs	r1, #1
 8004380:	438a      	bics	r2, r1
 8004382:	609a      	str	r2, [r3, #8]
	EXTI->RTSR &= ~(1<<2);
 8004384:	4b1d      	ldr	r3, [pc, #116]	; (80043fc <_Z9C_FALLINGv+0x88>)
 8004386:	689a      	ldr	r2, [r3, #8]
 8004388:	4b1c      	ldr	r3, [pc, #112]	; (80043fc <_Z9C_FALLINGv+0x88>)
 800438a:	2104      	movs	r1, #4
 800438c:	438a      	bics	r2, r1
 800438e:	609a      	str	r2, [r3, #8]
	EXTI->RTSR &= ~(1<<15);
 8004390:	4b1a      	ldr	r3, [pc, #104]	; (80043fc <_Z9C_FALLINGv+0x88>)
 8004392:	689a      	ldr	r2, [r3, #8]
 8004394:	4b19      	ldr	r3, [pc, #100]	; (80043fc <_Z9C_FALLINGv+0x88>)
 8004396:	491a      	ldr	r1, [pc, #104]	; (8004400 <_Z9C_FALLINGv+0x8c>)
 8004398:	400a      	ands	r2, r1
 800439a:	609a      	str	r2, [r3, #8]

	EXTI->FTSR &= ~(1<<0);
 800439c:	4b17      	ldr	r3, [pc, #92]	; (80043fc <_Z9C_FALLINGv+0x88>)
 800439e:	68da      	ldr	r2, [r3, #12]
 80043a0:	4b16      	ldr	r3, [pc, #88]	; (80043fc <_Z9C_FALLINGv+0x88>)
 80043a2:	2101      	movs	r1, #1
 80043a4:	438a      	bics	r2, r1
 80043a6:	60da      	str	r2, [r3, #12]
	EXTI->FTSR &= ~(1<<2);
 80043a8:	4b14      	ldr	r3, [pc, #80]	; (80043fc <_Z9C_FALLINGv+0x88>)
 80043aa:	68da      	ldr	r2, [r3, #12]
 80043ac:	4b13      	ldr	r3, [pc, #76]	; (80043fc <_Z9C_FALLINGv+0x88>)
 80043ae:	2104      	movs	r1, #4
 80043b0:	438a      	bics	r2, r1
 80043b2:	60da      	str	r2, [r3, #12]
	EXTI->FTSR |=  (1<<15);
 80043b4:	4b11      	ldr	r3, [pc, #68]	; (80043fc <_Z9C_FALLINGv+0x88>)
 80043b6:	68da      	ldr	r2, [r3, #12]
 80043b8:	4b10      	ldr	r3, [pc, #64]	; (80043fc <_Z9C_FALLINGv+0x88>)
 80043ba:	2180      	movs	r1, #128	; 0x80
 80043bc:	0209      	lsls	r1, r1, #8
 80043be:	430a      	orrs	r2, r1
 80043c0:	60da      	str	r2, [r3, #12]
	//Mask all but the specified interrupts
	//1 - nonmasked (ready to be used), 0 - masked (not being used)
	EXTI->IMR &= ~(1<<0);
 80043c2:	4b0e      	ldr	r3, [pc, #56]	; (80043fc <_Z9C_FALLINGv+0x88>)
 80043c4:	681a      	ldr	r2, [r3, #0]
 80043c6:	4b0d      	ldr	r3, [pc, #52]	; (80043fc <_Z9C_FALLINGv+0x88>)
 80043c8:	2101      	movs	r1, #1
 80043ca:	438a      	bics	r2, r1
 80043cc:	601a      	str	r2, [r3, #0]
	EXTI->IMR &= ~(1<<2);
 80043ce:	4b0b      	ldr	r3, [pc, #44]	; (80043fc <_Z9C_FALLINGv+0x88>)
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	4b0a      	ldr	r3, [pc, #40]	; (80043fc <_Z9C_FALLINGv+0x88>)
 80043d4:	2104      	movs	r1, #4
 80043d6:	438a      	bics	r2, r1
 80043d8:	601a      	str	r2, [r3, #0]
	EXTI->IMR |=  (1<<15);
 80043da:	4b08      	ldr	r3, [pc, #32]	; (80043fc <_Z9C_FALLINGv+0x88>)
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	4b07      	ldr	r3, [pc, #28]	; (80043fc <_Z9C_FALLINGv+0x88>)
 80043e0:	2180      	movs	r1, #128	; 0x80
 80043e2:	0209      	lsls	r1, r1, #8
 80043e4:	430a      	orrs	r2, r1
 80043e6:	601a      	str	r2, [r3, #0]

	EXTI->PR  &= ~(1<<0 | 1<<2 | 1<<15);
 80043e8:	4b04      	ldr	r3, [pc, #16]	; (80043fc <_Z9C_FALLINGv+0x88>)
 80043ea:	695a      	ldr	r2, [r3, #20]
 80043ec:	4b03      	ldr	r3, [pc, #12]	; (80043fc <_Z9C_FALLINGv+0x88>)
 80043ee:	4905      	ldr	r1, [pc, #20]	; (8004404 <_Z9C_FALLINGv+0x90>)
 80043f0:	400a      	ands	r2, r1
 80043f2:	615a      	str	r2, [r3, #20]
}
 80043f4:	46c0      	nop			; (mov r8, r8)
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}
 80043fa:	46c0      	nop			; (mov r8, r8)
 80043fc:	40010400 	.word	0x40010400
 8004400:	ffff7fff 	.word	0xffff7fff
 8004404:	ffff7ffa 	.word	0xffff7ffa

08004408 <_Z9bldc_movev>:
	( 1 | (1<<8) ),
	( 1 | (1<<4) ),
	( 1 | (1<<4) )
};

void bldc_move() {
 8004408:	b580      	push	{r7, lr}
 800440a:	af00      	add	r7, sp, #0
	bldc_state++;
 800440c:	4bba      	ldr	r3, [pc, #744]	; (80046f8 <_Z9bldc_movev+0x2f0>)
 800440e:	781b      	ldrb	r3, [r3, #0]
 8004410:	b2db      	uxtb	r3, r3
 8004412:	3301      	adds	r3, #1
 8004414:	b2da      	uxtb	r2, r3
 8004416:	4bb8      	ldr	r3, [pc, #736]	; (80046f8 <_Z9bldc_movev+0x2f0>)
 8004418:	701a      	strb	r2, [r3, #0]
	bldc_state %= 6;
 800441a:	4bb7      	ldr	r3, [pc, #732]	; (80046f8 <_Z9bldc_movev+0x2f0>)
 800441c:	781b      	ldrb	r3, [r3, #0]
 800441e:	b2db      	uxtb	r3, r3
 8004420:	2106      	movs	r1, #6
 8004422:	0018      	movs	r0, r3
 8004424:	f7fb fef6 	bl	8000214 <__aeabi_uidivmod>
 8004428:	000b      	movs	r3, r1
 800442a:	b2da      	uxtb	r2, r3
 800442c:	4bb2      	ldr	r3, [pc, #712]	; (80046f8 <_Z9bldc_movev+0x2f0>)
 800442e:	701a      	strb	r2, [r3, #0]

	EXTI->IMR  &= ~(1<<0 | 1<<2 | 1<<15);
 8004430:	4bb2      	ldr	r3, [pc, #712]	; (80046fc <_Z9bldc_movev+0x2f4>)
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	4bb1      	ldr	r3, [pc, #708]	; (80046fc <_Z9bldc_movev+0x2f4>)
 8004436:	49b2      	ldr	r1, [pc, #712]	; (8004700 <_Z9bldc_movev+0x2f8>)
 8004438:	400a      	ands	r2, r1
 800443a:	601a      	str	r2, [r3, #0]
	EXTI->RTSR  &= ~(1<<0 | 1<<2 | 1<<15);
 800443c:	4baf      	ldr	r3, [pc, #700]	; (80046fc <_Z9bldc_movev+0x2f4>)
 800443e:	689a      	ldr	r2, [r3, #8]
 8004440:	4bae      	ldr	r3, [pc, #696]	; (80046fc <_Z9bldc_movev+0x2f4>)
 8004442:	49af      	ldr	r1, [pc, #700]	; (8004700 <_Z9bldc_movev+0x2f8>)
 8004444:	400a      	ands	r2, r1
 8004446:	609a      	str	r2, [r3, #8]
	EXTI->FTSR  &= ~(1<<0 | 1<<2 | 1<<15);
 8004448:	4bac      	ldr	r3, [pc, #688]	; (80046fc <_Z9bldc_movev+0x2f4>)
 800444a:	68da      	ldr	r2, [r3, #12]
 800444c:	4bab      	ldr	r3, [pc, #684]	; (80046fc <_Z9bldc_movev+0x2f4>)
 800444e:	49ac      	ldr	r1, [pc, #688]	; (8004700 <_Z9bldc_movev+0x2f8>)
 8004450:	400a      	ands	r2, r1
 8004452:	60da      	str	r2, [r3, #12]
	EXTI->PR  &= ~(1<<0 | 1<<2 | 1<<15);
 8004454:	4ba9      	ldr	r3, [pc, #676]	; (80046fc <_Z9bldc_movev+0x2f4>)
 8004456:	695a      	ldr	r2, [r3, #20]
 8004458:	4ba8      	ldr	r3, [pc, #672]	; (80046fc <_Z9bldc_movev+0x2f4>)
 800445a:	49a9      	ldr	r1, [pc, #676]	; (8004700 <_Z9bldc_movev+0x2f8>)
 800445c:	400a      	ands	r2, r1
 800445e:	615a      	str	r2, [r3, #20]

	switch(bldc_state) {
 8004460:	4ba5      	ldr	r3, [pc, #660]	; (80046f8 <_Z9bldc_movev+0x2f0>)
 8004462:	781b      	ldrb	r3, [r3, #0]
 8004464:	b2db      	uxtb	r3, r3
 8004466:	2b05      	cmp	r3, #5
 8004468:	d900      	bls.n	800446c <_Z9bldc_movev+0x64>
 800446a:	e142      	b.n	80046f2 <_Z9bldc_movev+0x2ea>
 800446c:	009a      	lsls	r2, r3, #2
 800446e:	4ba5      	ldr	r3, [pc, #660]	; (8004704 <_Z9bldc_movev+0x2fc>)
 8004470:	18d3      	adds	r3, r2, r3
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	469f      	mov	pc, r3
		case 0:
			//A high, B low, C off
			nextITPin = ZC_C_Pin;
 8004476:	4ba4      	ldr	r3, [pc, #656]	; (8004708 <_Z9bldc_movev+0x300>)
 8004478:	4aa4      	ldr	r2, [pc, #656]	; (800470c <_Z9bldc_movev+0x304>)
 800447a:	801a      	strh	r2, [r3, #0]
//			HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_2);
//			HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_3);
			TIM1->CCER &= ~PWM_CCER_OFFMASK[bldc_state];
 800447c:	4b9e      	ldr	r3, [pc, #632]	; (80046f8 <_Z9bldc_movev+0x2f0>)
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	b2db      	uxtb	r3, r3
 8004482:	001a      	movs	r2, r3
 8004484:	4ba2      	ldr	r3, [pc, #648]	; (8004710 <_Z9bldc_movev+0x308>)
 8004486:	0052      	lsls	r2, r2, #1
 8004488:	5ad3      	ldrh	r3, [r2, r3]
 800448a:	43d9      	mvns	r1, r3
 800448c:	4ba1      	ldr	r3, [pc, #644]	; (8004714 <_Z9bldc_movev+0x30c>)
 800448e:	6a1a      	ldr	r2, [r3, #32]
 8004490:	4ba0      	ldr	r3, [pc, #640]	; (8004714 <_Z9bldc_movev+0x30c>)
 8004492:	400a      	ands	r2, r1
 8004494:	621a      	str	r2, [r3, #32]
			HAL_GPIO_WritePin(CLow_GPIO_Port, CLow_Pin, GPIO_PIN_SET);
 8004496:	2380      	movs	r3, #128	; 0x80
 8004498:	021b      	lsls	r3, r3, #8
 800449a:	489f      	ldr	r0, [pc, #636]	; (8004718 <_Z9bldc_movev+0x310>)
 800449c:	2201      	movs	r2, #1
 800449e:	0019      	movs	r1, r3
 80044a0:	f7fd f9a5 	bl	80017ee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ALow_GPIO_Port, ALow_Pin, GPIO_PIN_SET);
 80044a4:	4b9d      	ldr	r3, [pc, #628]	; (800471c <_Z9bldc_movev+0x314>)
 80044a6:	2201      	movs	r2, #1
 80044a8:	2180      	movs	r1, #128	; 0x80
 80044aa:	0018      	movs	r0, r3
 80044ac:	f7fd f99f 	bl	80017ee <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(BLow_GPIO_Port, BLow_Pin, GPIO_PIN_RESET);
 80044b0:	4b9a      	ldr	r3, [pc, #616]	; (800471c <_Z9bldc_movev+0x314>)
 80044b2:	2200      	movs	r2, #0
 80044b4:	2140      	movs	r1, #64	; 0x40
 80044b6:	0018      	movs	r0, r3
 80044b8:	f7fd f999 	bl	80017ee <HAL_GPIO_WritePin>
//			HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t*)&speed, 1);
			TIM1->CCER |= PWM_CCER_ONMASK[bldc_state];
 80044bc:	4b8e      	ldr	r3, [pc, #568]	; (80046f8 <_Z9bldc_movev+0x2f0>)
 80044be:	781b      	ldrb	r3, [r3, #0]
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	001a      	movs	r2, r3
 80044c4:	4b96      	ldr	r3, [pc, #600]	; (8004720 <_Z9bldc_movev+0x318>)
 80044c6:	0052      	lsls	r2, r2, #1
 80044c8:	5ad1      	ldrh	r1, [r2, r3]
 80044ca:	4b92      	ldr	r3, [pc, #584]	; (8004714 <_Z9bldc_movev+0x30c>)
 80044cc:	6a1a      	ldr	r2, [r3, #32]
 80044ce:	4b91      	ldr	r3, [pc, #580]	; (8004714 <_Z9bldc_movev+0x30c>)
 80044d0:	430a      	orrs	r2, r1
 80044d2:	621a      	str	r2, [r3, #32]

			delay_u(2);
 80044d4:	2002      	movs	r0, #2
 80044d6:	f000 fb8d 	bl	8004bf4 <_Z7delay_ut>

			C_FALLING();
 80044da:	f7ff ff4b 	bl	8004374 <_Z9C_FALLINGv>
			break;
 80044de:	e108      	b.n	80046f2 <_Z9bldc_movev+0x2ea>
//
		case 1:
			//A high, B off, C low
			nextITPin = ZC_B_Pin;
 80044e0:	4b89      	ldr	r3, [pc, #548]	; (8004708 <_Z9bldc_movev+0x300>)
 80044e2:	2204      	movs	r2, #4
 80044e4:	801a      	strh	r2, [r3, #0]

//			HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_2);
//			HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_3);
			TIM1->CCER &= ~PWM_CCER_OFFMASK[bldc_state];
 80044e6:	4b84      	ldr	r3, [pc, #528]	; (80046f8 <_Z9bldc_movev+0x2f0>)
 80044e8:	781b      	ldrb	r3, [r3, #0]
 80044ea:	b2db      	uxtb	r3, r3
 80044ec:	001a      	movs	r2, r3
 80044ee:	4b88      	ldr	r3, [pc, #544]	; (8004710 <_Z9bldc_movev+0x308>)
 80044f0:	0052      	lsls	r2, r2, #1
 80044f2:	5ad3      	ldrh	r3, [r2, r3]
 80044f4:	43d9      	mvns	r1, r3
 80044f6:	4b87      	ldr	r3, [pc, #540]	; (8004714 <_Z9bldc_movev+0x30c>)
 80044f8:	6a1a      	ldr	r2, [r3, #32]
 80044fa:	4b86      	ldr	r3, [pc, #536]	; (8004714 <_Z9bldc_movev+0x30c>)
 80044fc:	400a      	ands	r2, r1
 80044fe:	621a      	str	r2, [r3, #32]
			HAL_GPIO_WritePin(ALow_GPIO_Port, ALow_Pin, GPIO_PIN_SET);
 8004500:	4b86      	ldr	r3, [pc, #536]	; (800471c <_Z9bldc_movev+0x314>)
 8004502:	2201      	movs	r2, #1
 8004504:	2180      	movs	r1, #128	; 0x80
 8004506:	0018      	movs	r0, r3
 8004508:	f7fd f971 	bl	80017ee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BLow_GPIO_Port, BLow_Pin, GPIO_PIN_SET);
 800450c:	4b83      	ldr	r3, [pc, #524]	; (800471c <_Z9bldc_movev+0x314>)
 800450e:	2201      	movs	r2, #1
 8004510:	2140      	movs	r1, #64	; 0x40
 8004512:	0018      	movs	r0, r3
 8004514:	f7fd f96b 	bl	80017ee <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(CLow_GPIO_Port, CLow_Pin, GPIO_PIN_RESET);
 8004518:	2380      	movs	r3, #128	; 0x80
 800451a:	021b      	lsls	r3, r3, #8
 800451c:	487e      	ldr	r0, [pc, #504]	; (8004718 <_Z9bldc_movev+0x310>)
 800451e:	2200      	movs	r2, #0
 8004520:	0019      	movs	r1, r3
 8004522:	f7fd f964 	bl	80017ee <HAL_GPIO_WritePin>
//			HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t*)&speed, 1);
			TIM1->CCER |= PWM_CCER_ONMASK[bldc_state];
 8004526:	4b74      	ldr	r3, [pc, #464]	; (80046f8 <_Z9bldc_movev+0x2f0>)
 8004528:	781b      	ldrb	r3, [r3, #0]
 800452a:	b2db      	uxtb	r3, r3
 800452c:	001a      	movs	r2, r3
 800452e:	4b7c      	ldr	r3, [pc, #496]	; (8004720 <_Z9bldc_movev+0x318>)
 8004530:	0052      	lsls	r2, r2, #1
 8004532:	5ad1      	ldrh	r1, [r2, r3]
 8004534:	4b77      	ldr	r3, [pc, #476]	; (8004714 <_Z9bldc_movev+0x30c>)
 8004536:	6a1a      	ldr	r2, [r3, #32]
 8004538:	4b76      	ldr	r3, [pc, #472]	; (8004714 <_Z9bldc_movev+0x30c>)
 800453a:	430a      	orrs	r2, r1
 800453c:	621a      	str	r2, [r3, #32]

			delay_u(2);
 800453e:	2002      	movs	r0, #2
 8004540:	f000 fb58 	bl	8004bf4 <_Z7delay_ut>

			B_RISING();
 8004544:	f7ff fe3c 	bl	80041c0 <_Z8B_RISINGv>
			break;
 8004548:	e0d3      	b.n	80046f2 <_Z9bldc_movev+0x2ea>

		case 2:
			//A off, B high, C low
			nextITPin = ZC_A_Pin;
 800454a:	4b6f      	ldr	r3, [pc, #444]	; (8004708 <_Z9bldc_movev+0x300>)
 800454c:	2201      	movs	r2, #1
 800454e:	801a      	strh	r2, [r3, #0]

//			HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
//			HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_3);
			TIM1->CCER &= ~PWM_CCER_OFFMASK[bldc_state];
 8004550:	4b69      	ldr	r3, [pc, #420]	; (80046f8 <_Z9bldc_movev+0x2f0>)
 8004552:	781b      	ldrb	r3, [r3, #0]
 8004554:	b2db      	uxtb	r3, r3
 8004556:	001a      	movs	r2, r3
 8004558:	4b6d      	ldr	r3, [pc, #436]	; (8004710 <_Z9bldc_movev+0x308>)
 800455a:	0052      	lsls	r2, r2, #1
 800455c:	5ad3      	ldrh	r3, [r2, r3]
 800455e:	43d9      	mvns	r1, r3
 8004560:	4b6c      	ldr	r3, [pc, #432]	; (8004714 <_Z9bldc_movev+0x30c>)
 8004562:	6a1a      	ldr	r2, [r3, #32]
 8004564:	4b6b      	ldr	r3, [pc, #428]	; (8004714 <_Z9bldc_movev+0x30c>)
 8004566:	400a      	ands	r2, r1
 8004568:	621a      	str	r2, [r3, #32]
			HAL_GPIO_WritePin(ALow_GPIO_Port, ALow_Pin, GPIO_PIN_SET);
 800456a:	4b6c      	ldr	r3, [pc, #432]	; (800471c <_Z9bldc_movev+0x314>)
 800456c:	2201      	movs	r2, #1
 800456e:	2180      	movs	r1, #128	; 0x80
 8004570:	0018      	movs	r0, r3
 8004572:	f7fd f93c 	bl	80017ee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BLow_GPIO_Port, BLow_Pin, GPIO_PIN_SET);
 8004576:	4b69      	ldr	r3, [pc, #420]	; (800471c <_Z9bldc_movev+0x314>)
 8004578:	2201      	movs	r2, #1
 800457a:	2140      	movs	r1, #64	; 0x40
 800457c:	0018      	movs	r0, r3
 800457e:	f7fd f936 	bl	80017ee <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(CLow_GPIO_Port, CLow_Pin, GPIO_PIN_RESET);
 8004582:	2380      	movs	r3, #128	; 0x80
 8004584:	021b      	lsls	r3, r3, #8
 8004586:	4864      	ldr	r0, [pc, #400]	; (8004718 <_Z9bldc_movev+0x310>)
 8004588:	2200      	movs	r2, #0
 800458a:	0019      	movs	r1, r3
 800458c:	f7fd f92f 	bl	80017ee <HAL_GPIO_WritePin>
//			HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_2, (uint32_t*)&speed, 1);
			TIM1->CCER |= PWM_CCER_ONMASK[bldc_state];
 8004590:	4b59      	ldr	r3, [pc, #356]	; (80046f8 <_Z9bldc_movev+0x2f0>)
 8004592:	781b      	ldrb	r3, [r3, #0]
 8004594:	b2db      	uxtb	r3, r3
 8004596:	001a      	movs	r2, r3
 8004598:	4b61      	ldr	r3, [pc, #388]	; (8004720 <_Z9bldc_movev+0x318>)
 800459a:	0052      	lsls	r2, r2, #1
 800459c:	5ad1      	ldrh	r1, [r2, r3]
 800459e:	4b5d      	ldr	r3, [pc, #372]	; (8004714 <_Z9bldc_movev+0x30c>)
 80045a0:	6a1a      	ldr	r2, [r3, #32]
 80045a2:	4b5c      	ldr	r3, [pc, #368]	; (8004714 <_Z9bldc_movev+0x30c>)
 80045a4:	430a      	orrs	r2, r1
 80045a6:	621a      	str	r2, [r3, #32]

			delay_u(2);
 80045a8:	2002      	movs	r0, #2
 80045aa:	f000 fb23 	bl	8004bf4 <_Z7delay_ut>

			A_FALLING();
 80045ae:	f7ff fdbf 	bl	8004130 <_Z9A_FALLINGv>
			break;
 80045b2:	e09e      	b.n	80046f2 <_Z9bldc_movev+0x2ea>

		case 3:

			//A low, B high, C off
			nextITPin = ZC_C_Pin;
 80045b4:	4b54      	ldr	r3, [pc, #336]	; (8004708 <_Z9bldc_movev+0x300>)
 80045b6:	4a55      	ldr	r2, [pc, #340]	; (800470c <_Z9bldc_movev+0x304>)
 80045b8:	801a      	strh	r2, [r3, #0]

//			HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
//			HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_3);
			TIM1->CCER &= ~PWM_CCER_OFFMASK[bldc_state];
 80045ba:	4b4f      	ldr	r3, [pc, #316]	; (80046f8 <_Z9bldc_movev+0x2f0>)
 80045bc:	781b      	ldrb	r3, [r3, #0]
 80045be:	b2db      	uxtb	r3, r3
 80045c0:	001a      	movs	r2, r3
 80045c2:	4b53      	ldr	r3, [pc, #332]	; (8004710 <_Z9bldc_movev+0x308>)
 80045c4:	0052      	lsls	r2, r2, #1
 80045c6:	5ad3      	ldrh	r3, [r2, r3]
 80045c8:	43d9      	mvns	r1, r3
 80045ca:	4b52      	ldr	r3, [pc, #328]	; (8004714 <_Z9bldc_movev+0x30c>)
 80045cc:	6a1a      	ldr	r2, [r3, #32]
 80045ce:	4b51      	ldr	r3, [pc, #324]	; (8004714 <_Z9bldc_movev+0x30c>)
 80045d0:	400a      	ands	r2, r1
 80045d2:	621a      	str	r2, [r3, #32]
			HAL_GPIO_WritePin(BLow_GPIO_Port, BLow_Pin, GPIO_PIN_SET);
 80045d4:	4b51      	ldr	r3, [pc, #324]	; (800471c <_Z9bldc_movev+0x314>)
 80045d6:	2201      	movs	r2, #1
 80045d8:	2140      	movs	r1, #64	; 0x40
 80045da:	0018      	movs	r0, r3
 80045dc:	f7fd f907 	bl	80017ee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CLow_GPIO_Port, CLow_Pin, GPIO_PIN_SET);
 80045e0:	2380      	movs	r3, #128	; 0x80
 80045e2:	021b      	lsls	r3, r3, #8
 80045e4:	484c      	ldr	r0, [pc, #304]	; (8004718 <_Z9bldc_movev+0x310>)
 80045e6:	2201      	movs	r2, #1
 80045e8:	0019      	movs	r1, r3
 80045ea:	f7fd f900 	bl	80017ee <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(ALow_GPIO_Port, ALow_Pin, GPIO_PIN_RESET);
 80045ee:	4b4b      	ldr	r3, [pc, #300]	; (800471c <_Z9bldc_movev+0x314>)
 80045f0:	2200      	movs	r2, #0
 80045f2:	2180      	movs	r1, #128	; 0x80
 80045f4:	0018      	movs	r0, r3
 80045f6:	f7fd f8fa 	bl	80017ee <HAL_GPIO_WritePin>
//			HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_2, (uint32_t*)&speed, 1);
			TIM1->CCER |= PWM_CCER_ONMASK[bldc_state];
 80045fa:	4b3f      	ldr	r3, [pc, #252]	; (80046f8 <_Z9bldc_movev+0x2f0>)
 80045fc:	781b      	ldrb	r3, [r3, #0]
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	001a      	movs	r2, r3
 8004602:	4b47      	ldr	r3, [pc, #284]	; (8004720 <_Z9bldc_movev+0x318>)
 8004604:	0052      	lsls	r2, r2, #1
 8004606:	5ad1      	ldrh	r1, [r2, r3]
 8004608:	4b42      	ldr	r3, [pc, #264]	; (8004714 <_Z9bldc_movev+0x30c>)
 800460a:	6a1a      	ldr	r2, [r3, #32]
 800460c:	4b41      	ldr	r3, [pc, #260]	; (8004714 <_Z9bldc_movev+0x30c>)
 800460e:	430a      	orrs	r2, r1
 8004610:	621a      	str	r2, [r3, #32]

			delay_u(2);
 8004612:	2002      	movs	r0, #2
 8004614:	f000 faee 	bl	8004bf4 <_Z7delay_ut>

			C_RISING();
 8004618:	f7ff fe62 	bl	80042e0 <_Z8C_RISINGv>
			break;
 800461c:	e069      	b.n	80046f2 <_Z9bldc_movev+0x2ea>

		case 4:
			//A low, B off, C high
			nextITPin = ZC_B_Pin;
 800461e:	4b3a      	ldr	r3, [pc, #232]	; (8004708 <_Z9bldc_movev+0x300>)
 8004620:	2204      	movs	r2, #4
 8004622:	801a      	strh	r2, [r3, #0]

//			HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
//			HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_2);
			TIM1->CCER &= ~PWM_CCER_OFFMASK[bldc_state];
 8004624:	4b34      	ldr	r3, [pc, #208]	; (80046f8 <_Z9bldc_movev+0x2f0>)
 8004626:	781b      	ldrb	r3, [r3, #0]
 8004628:	b2db      	uxtb	r3, r3
 800462a:	001a      	movs	r2, r3
 800462c:	4b38      	ldr	r3, [pc, #224]	; (8004710 <_Z9bldc_movev+0x308>)
 800462e:	0052      	lsls	r2, r2, #1
 8004630:	5ad3      	ldrh	r3, [r2, r3]
 8004632:	43d9      	mvns	r1, r3
 8004634:	4b37      	ldr	r3, [pc, #220]	; (8004714 <_Z9bldc_movev+0x30c>)
 8004636:	6a1a      	ldr	r2, [r3, #32]
 8004638:	4b36      	ldr	r3, [pc, #216]	; (8004714 <_Z9bldc_movev+0x30c>)
 800463a:	400a      	ands	r2, r1
 800463c:	621a      	str	r2, [r3, #32]
			HAL_GPIO_WritePin(BLow_GPIO_Port, BLow_Pin, GPIO_PIN_SET);
 800463e:	4b37      	ldr	r3, [pc, #220]	; (800471c <_Z9bldc_movev+0x314>)
 8004640:	2201      	movs	r2, #1
 8004642:	2140      	movs	r1, #64	; 0x40
 8004644:	0018      	movs	r0, r3
 8004646:	f7fd f8d2 	bl	80017ee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CLow_GPIO_Port, CLow_Pin, GPIO_PIN_SET);
 800464a:	2380      	movs	r3, #128	; 0x80
 800464c:	021b      	lsls	r3, r3, #8
 800464e:	4832      	ldr	r0, [pc, #200]	; (8004718 <_Z9bldc_movev+0x310>)
 8004650:	2201      	movs	r2, #1
 8004652:	0019      	movs	r1, r3
 8004654:	f7fd f8cb 	bl	80017ee <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(ALow_GPIO_Port, ALow_Pin, GPIO_PIN_RESET);
 8004658:	4b30      	ldr	r3, [pc, #192]	; (800471c <_Z9bldc_movev+0x314>)
 800465a:	2200      	movs	r2, #0
 800465c:	2180      	movs	r1, #128	; 0x80
 800465e:	0018      	movs	r0, r3
 8004660:	f7fd f8c5 	bl	80017ee <HAL_GPIO_WritePin>
//			HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_3, (uint32_t*)&speed, 1);
			TIM1->CCER |= PWM_CCER_ONMASK[bldc_state];
 8004664:	4b24      	ldr	r3, [pc, #144]	; (80046f8 <_Z9bldc_movev+0x2f0>)
 8004666:	781b      	ldrb	r3, [r3, #0]
 8004668:	b2db      	uxtb	r3, r3
 800466a:	001a      	movs	r2, r3
 800466c:	4b2c      	ldr	r3, [pc, #176]	; (8004720 <_Z9bldc_movev+0x318>)
 800466e:	0052      	lsls	r2, r2, #1
 8004670:	5ad1      	ldrh	r1, [r2, r3]
 8004672:	4b28      	ldr	r3, [pc, #160]	; (8004714 <_Z9bldc_movev+0x30c>)
 8004674:	6a1a      	ldr	r2, [r3, #32]
 8004676:	4b27      	ldr	r3, [pc, #156]	; (8004714 <_Z9bldc_movev+0x30c>)
 8004678:	430a      	orrs	r2, r1
 800467a:	621a      	str	r2, [r3, #32]

			delay_u(2);
 800467c:	2002      	movs	r0, #2
 800467e:	f000 fab9 	bl	8004bf4 <_Z7delay_ut>

			B_FALLING();
 8004682:	f7ff fde5 	bl	8004250 <_Z9B_FALLINGv>
			break;
 8004686:	e034      	b.n	80046f2 <_Z9bldc_movev+0x2ea>

		case 5:
			//A off, B low, C high
			nextITPin = ZC_A_Pin;
 8004688:	4b1f      	ldr	r3, [pc, #124]	; (8004708 <_Z9bldc_movev+0x300>)
 800468a:	2201      	movs	r2, #1
 800468c:	801a      	strh	r2, [r3, #0]

//			HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
//			HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_2);
			TIM1->CCER &= ~PWM_CCER_OFFMASK[bldc_state];
 800468e:	4b1a      	ldr	r3, [pc, #104]	; (80046f8 <_Z9bldc_movev+0x2f0>)
 8004690:	781b      	ldrb	r3, [r3, #0]
 8004692:	b2db      	uxtb	r3, r3
 8004694:	001a      	movs	r2, r3
 8004696:	4b1e      	ldr	r3, [pc, #120]	; (8004710 <_Z9bldc_movev+0x308>)
 8004698:	0052      	lsls	r2, r2, #1
 800469a:	5ad3      	ldrh	r3, [r2, r3]
 800469c:	43d9      	mvns	r1, r3
 800469e:	4b1d      	ldr	r3, [pc, #116]	; (8004714 <_Z9bldc_movev+0x30c>)
 80046a0:	6a1a      	ldr	r2, [r3, #32]
 80046a2:	4b1c      	ldr	r3, [pc, #112]	; (8004714 <_Z9bldc_movev+0x30c>)
 80046a4:	400a      	ands	r2, r1
 80046a6:	621a      	str	r2, [r3, #32]
			HAL_GPIO_WritePin(ALow_GPIO_Port, ALow_Pin, GPIO_PIN_SET);
 80046a8:	4b1c      	ldr	r3, [pc, #112]	; (800471c <_Z9bldc_movev+0x314>)
 80046aa:	2201      	movs	r2, #1
 80046ac:	2180      	movs	r1, #128	; 0x80
 80046ae:	0018      	movs	r0, r3
 80046b0:	f7fd f89d 	bl	80017ee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CLow_GPIO_Port, CLow_Pin, GPIO_PIN_SET);
 80046b4:	2380      	movs	r3, #128	; 0x80
 80046b6:	021b      	lsls	r3, r3, #8
 80046b8:	4817      	ldr	r0, [pc, #92]	; (8004718 <_Z9bldc_movev+0x310>)
 80046ba:	2201      	movs	r2, #1
 80046bc:	0019      	movs	r1, r3
 80046be:	f7fd f896 	bl	80017ee <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(BLow_GPIO_Port, BLow_Pin, GPIO_PIN_RESET);
 80046c2:	4b16      	ldr	r3, [pc, #88]	; (800471c <_Z9bldc_movev+0x314>)
 80046c4:	2200      	movs	r2, #0
 80046c6:	2140      	movs	r1, #64	; 0x40
 80046c8:	0018      	movs	r0, r3
 80046ca:	f7fd f890 	bl	80017ee <HAL_GPIO_WritePin>
//			HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_3, (uint32_t*)&speed, 1);
			TIM1->CCER |= PWM_CCER_ONMASK[bldc_state];
 80046ce:	4b0a      	ldr	r3, [pc, #40]	; (80046f8 <_Z9bldc_movev+0x2f0>)
 80046d0:	781b      	ldrb	r3, [r3, #0]
 80046d2:	b2db      	uxtb	r3, r3
 80046d4:	001a      	movs	r2, r3
 80046d6:	4b12      	ldr	r3, [pc, #72]	; (8004720 <_Z9bldc_movev+0x318>)
 80046d8:	0052      	lsls	r2, r2, #1
 80046da:	5ad1      	ldrh	r1, [r2, r3]
 80046dc:	4b0d      	ldr	r3, [pc, #52]	; (8004714 <_Z9bldc_movev+0x30c>)
 80046de:	6a1a      	ldr	r2, [r3, #32]
 80046e0:	4b0c      	ldr	r3, [pc, #48]	; (8004714 <_Z9bldc_movev+0x30c>)
 80046e2:	430a      	orrs	r2, r1
 80046e4:	621a      	str	r2, [r3, #32]

			delay_u(2);
 80046e6:	2002      	movs	r0, #2
 80046e8:	f000 fa84 	bl	8004bf4 <_Z7delay_ut>

			A_RISING();
 80046ec:	f7ff fcd8 	bl	80040a0 <_Z8A_RISINGv>
			break;
 80046f0:	46c0      	nop			; (mov r8, r8)

	}
}
 80046f2:	46c0      	nop			; (mov r8, r8)
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}
 80046f8:	200001d8 	.word	0x200001d8
 80046fc:	40010400 	.word	0x40010400
 8004700:	ffff7ffa 	.word	0xffff7ffa
 8004704:	08004e84 	.word	0x08004e84
 8004708:	200001da 	.word	0x200001da
 800470c:	ffff8000 	.word	0xffff8000
 8004710:	20000018 	.word	0x20000018
 8004714:	40012c00 	.word	0x40012c00
 8004718:	48000400 	.word	0x48000400
 800471c:	48000800 	.word	0x48000800
 8004720:	2000000c 	.word	0x2000000c

08004724 <_Z12bldc_move_olv>:

void bldc_move_ol() {
 8004724:	b580      	push	{r7, lr}
 8004726:	af00      	add	r7, sp, #0
	switch(bldc_state) {
 8004728:	4b8d      	ldr	r3, [pc, #564]	; (8004960 <_Z12bldc_move_olv+0x23c>)
 800472a:	781b      	ldrb	r3, [r3, #0]
 800472c:	b2db      	uxtb	r3, r3
 800472e:	2b05      	cmp	r3, #5
 8004730:	d900      	bls.n	8004734 <_Z12bldc_move_olv+0x10>
 8004732:	e112      	b.n	800495a <_Z12bldc_move_olv+0x236>
 8004734:	009a      	lsls	r2, r3, #2
 8004736:	4b8b      	ldr	r3, [pc, #556]	; (8004964 <_Z12bldc_move_olv+0x240>)
 8004738:	18d3      	adds	r3, r2, r3
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	469f      	mov	pc, r3
		case 0:
			//A high, B low, C off
			//HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_2);
			//HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_3);
			TIM1->CCER &= ~PWM_CCER_OFFMASK[bldc_state];
 800473e:	4b88      	ldr	r3, [pc, #544]	; (8004960 <_Z12bldc_move_olv+0x23c>)
 8004740:	781b      	ldrb	r3, [r3, #0]
 8004742:	b2db      	uxtb	r3, r3
 8004744:	001a      	movs	r2, r3
 8004746:	4b88      	ldr	r3, [pc, #544]	; (8004968 <_Z12bldc_move_olv+0x244>)
 8004748:	0052      	lsls	r2, r2, #1
 800474a:	5ad3      	ldrh	r3, [r2, r3]
 800474c:	43d9      	mvns	r1, r3
 800474e:	4b87      	ldr	r3, [pc, #540]	; (800496c <_Z12bldc_move_olv+0x248>)
 8004750:	6a1a      	ldr	r2, [r3, #32]
 8004752:	4b86      	ldr	r3, [pc, #536]	; (800496c <_Z12bldc_move_olv+0x248>)
 8004754:	400a      	ands	r2, r1
 8004756:	621a      	str	r2, [r3, #32]
			HAL_GPIO_WritePin(CLow_GPIO_Port, CLow_Pin, GPIO_PIN_SET);
 8004758:	2380      	movs	r3, #128	; 0x80
 800475a:	021b      	lsls	r3, r3, #8
 800475c:	4884      	ldr	r0, [pc, #528]	; (8004970 <_Z12bldc_move_olv+0x24c>)
 800475e:	2201      	movs	r2, #1
 8004760:	0019      	movs	r1, r3
 8004762:	f7fd f844 	bl	80017ee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ALow_GPIO_Port, ALow_Pin, GPIO_PIN_SET);
 8004766:	4b83      	ldr	r3, [pc, #524]	; (8004974 <_Z12bldc_move_olv+0x250>)
 8004768:	2201      	movs	r2, #1
 800476a:	2180      	movs	r1, #128	; 0x80
 800476c:	0018      	movs	r0, r3
 800476e:	f7fd f83e 	bl	80017ee <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(BLow_GPIO_Port, BLow_Pin, GPIO_PIN_RESET);
 8004772:	4b80      	ldr	r3, [pc, #512]	; (8004974 <_Z12bldc_move_olv+0x250>)
 8004774:	2200      	movs	r2, #0
 8004776:	2140      	movs	r1, #64	; 0x40
 8004778:	0018      	movs	r0, r3
 800477a:	f7fd f838 	bl	80017ee <HAL_GPIO_WritePin>
			//HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t*)&speed, 1);
			TIM1->CCER |= PWM_CCER_ONMASK[bldc_state];
 800477e:	4b78      	ldr	r3, [pc, #480]	; (8004960 <_Z12bldc_move_olv+0x23c>)
 8004780:	781b      	ldrb	r3, [r3, #0]
 8004782:	b2db      	uxtb	r3, r3
 8004784:	001a      	movs	r2, r3
 8004786:	4b7c      	ldr	r3, [pc, #496]	; (8004978 <_Z12bldc_move_olv+0x254>)
 8004788:	0052      	lsls	r2, r2, #1
 800478a:	5ad1      	ldrh	r1, [r2, r3]
 800478c:	4b77      	ldr	r3, [pc, #476]	; (800496c <_Z12bldc_move_olv+0x248>)
 800478e:	6a1a      	ldr	r2, [r3, #32]
 8004790:	4b76      	ldr	r3, [pc, #472]	; (800496c <_Z12bldc_move_olv+0x248>)
 8004792:	430a      	orrs	r2, r1
 8004794:	621a      	str	r2, [r3, #32]
			break;
 8004796:	e0e0      	b.n	800495a <_Z12bldc_move_olv+0x236>
	//
		case 1:
			//A high, B off, C low
//			HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_2);
//			HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_3);
			TIM1->CCER &= ~PWM_CCER_OFFMASK[bldc_state];
 8004798:	4b71      	ldr	r3, [pc, #452]	; (8004960 <_Z12bldc_move_olv+0x23c>)
 800479a:	781b      	ldrb	r3, [r3, #0]
 800479c:	b2db      	uxtb	r3, r3
 800479e:	001a      	movs	r2, r3
 80047a0:	4b71      	ldr	r3, [pc, #452]	; (8004968 <_Z12bldc_move_olv+0x244>)
 80047a2:	0052      	lsls	r2, r2, #1
 80047a4:	5ad3      	ldrh	r3, [r2, r3]
 80047a6:	43d9      	mvns	r1, r3
 80047a8:	4b70      	ldr	r3, [pc, #448]	; (800496c <_Z12bldc_move_olv+0x248>)
 80047aa:	6a1a      	ldr	r2, [r3, #32]
 80047ac:	4b6f      	ldr	r3, [pc, #444]	; (800496c <_Z12bldc_move_olv+0x248>)
 80047ae:	400a      	ands	r2, r1
 80047b0:	621a      	str	r2, [r3, #32]
			HAL_GPIO_WritePin(ALow_GPIO_Port, ALow_Pin, GPIO_PIN_SET);
 80047b2:	4b70      	ldr	r3, [pc, #448]	; (8004974 <_Z12bldc_move_olv+0x250>)
 80047b4:	2201      	movs	r2, #1
 80047b6:	2180      	movs	r1, #128	; 0x80
 80047b8:	0018      	movs	r0, r3
 80047ba:	f7fd f818 	bl	80017ee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BLow_GPIO_Port, BLow_Pin, GPIO_PIN_SET);
 80047be:	4b6d      	ldr	r3, [pc, #436]	; (8004974 <_Z12bldc_move_olv+0x250>)
 80047c0:	2201      	movs	r2, #1
 80047c2:	2140      	movs	r1, #64	; 0x40
 80047c4:	0018      	movs	r0, r3
 80047c6:	f7fd f812 	bl	80017ee <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(CLow_GPIO_Port, CLow_Pin, GPIO_PIN_RESET);
 80047ca:	2380      	movs	r3, #128	; 0x80
 80047cc:	021b      	lsls	r3, r3, #8
 80047ce:	4868      	ldr	r0, [pc, #416]	; (8004970 <_Z12bldc_move_olv+0x24c>)
 80047d0:	2200      	movs	r2, #0
 80047d2:	0019      	movs	r1, r3
 80047d4:	f7fd f80b 	bl	80017ee <HAL_GPIO_WritePin>
			//HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t*)&speed, 1);
			TIM1->CCER |= PWM_CCER_ONMASK[bldc_state];
 80047d8:	4b61      	ldr	r3, [pc, #388]	; (8004960 <_Z12bldc_move_olv+0x23c>)
 80047da:	781b      	ldrb	r3, [r3, #0]
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	001a      	movs	r2, r3
 80047e0:	4b65      	ldr	r3, [pc, #404]	; (8004978 <_Z12bldc_move_olv+0x254>)
 80047e2:	0052      	lsls	r2, r2, #1
 80047e4:	5ad1      	ldrh	r1, [r2, r3]
 80047e6:	4b61      	ldr	r3, [pc, #388]	; (800496c <_Z12bldc_move_olv+0x248>)
 80047e8:	6a1a      	ldr	r2, [r3, #32]
 80047ea:	4b60      	ldr	r3, [pc, #384]	; (800496c <_Z12bldc_move_olv+0x248>)
 80047ec:	430a      	orrs	r2, r1
 80047ee:	621a      	str	r2, [r3, #32]
			break;
 80047f0:	e0b3      	b.n	800495a <_Z12bldc_move_olv+0x236>

		case 2:
			//A off, B high, C low
//			HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
//			HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_3);
			TIM1->CCER &= ~PWM_CCER_OFFMASK[bldc_state];
 80047f2:	4b5b      	ldr	r3, [pc, #364]	; (8004960 <_Z12bldc_move_olv+0x23c>)
 80047f4:	781b      	ldrb	r3, [r3, #0]
 80047f6:	b2db      	uxtb	r3, r3
 80047f8:	001a      	movs	r2, r3
 80047fa:	4b5b      	ldr	r3, [pc, #364]	; (8004968 <_Z12bldc_move_olv+0x244>)
 80047fc:	0052      	lsls	r2, r2, #1
 80047fe:	5ad3      	ldrh	r3, [r2, r3]
 8004800:	43d9      	mvns	r1, r3
 8004802:	4b5a      	ldr	r3, [pc, #360]	; (800496c <_Z12bldc_move_olv+0x248>)
 8004804:	6a1a      	ldr	r2, [r3, #32]
 8004806:	4b59      	ldr	r3, [pc, #356]	; (800496c <_Z12bldc_move_olv+0x248>)
 8004808:	400a      	ands	r2, r1
 800480a:	621a      	str	r2, [r3, #32]
			HAL_GPIO_WritePin(ALow_GPIO_Port, ALow_Pin, GPIO_PIN_SET);
 800480c:	4b59      	ldr	r3, [pc, #356]	; (8004974 <_Z12bldc_move_olv+0x250>)
 800480e:	2201      	movs	r2, #1
 8004810:	2180      	movs	r1, #128	; 0x80
 8004812:	0018      	movs	r0, r3
 8004814:	f7fc ffeb 	bl	80017ee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BLow_GPIO_Port, BLow_Pin, GPIO_PIN_SET);
 8004818:	4b56      	ldr	r3, [pc, #344]	; (8004974 <_Z12bldc_move_olv+0x250>)
 800481a:	2201      	movs	r2, #1
 800481c:	2140      	movs	r1, #64	; 0x40
 800481e:	0018      	movs	r0, r3
 8004820:	f7fc ffe5 	bl	80017ee <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(CLow_GPIO_Port, CLow_Pin, GPIO_PIN_RESET);
 8004824:	2380      	movs	r3, #128	; 0x80
 8004826:	021b      	lsls	r3, r3, #8
 8004828:	4851      	ldr	r0, [pc, #324]	; (8004970 <_Z12bldc_move_olv+0x24c>)
 800482a:	2200      	movs	r2, #0
 800482c:	0019      	movs	r1, r3
 800482e:	f7fc ffde 	bl	80017ee <HAL_GPIO_WritePin>
			//HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_2, (uint32_t*)&speed, 1);
			TIM1->CCER |= PWM_CCER_ONMASK[bldc_state];
 8004832:	4b4b      	ldr	r3, [pc, #300]	; (8004960 <_Z12bldc_move_olv+0x23c>)
 8004834:	781b      	ldrb	r3, [r3, #0]
 8004836:	b2db      	uxtb	r3, r3
 8004838:	001a      	movs	r2, r3
 800483a:	4b4f      	ldr	r3, [pc, #316]	; (8004978 <_Z12bldc_move_olv+0x254>)
 800483c:	0052      	lsls	r2, r2, #1
 800483e:	5ad1      	ldrh	r1, [r2, r3]
 8004840:	4b4a      	ldr	r3, [pc, #296]	; (800496c <_Z12bldc_move_olv+0x248>)
 8004842:	6a1a      	ldr	r2, [r3, #32]
 8004844:	4b49      	ldr	r3, [pc, #292]	; (800496c <_Z12bldc_move_olv+0x248>)
 8004846:	430a      	orrs	r2, r1
 8004848:	621a      	str	r2, [r3, #32]
			break;
 800484a:	e086      	b.n	800495a <_Z12bldc_move_olv+0x236>

		case 3:
			//A low, B high, C off
//			HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
//			HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_3);
			TIM1->CCER &= ~PWM_CCER_OFFMASK[bldc_state];
 800484c:	4b44      	ldr	r3, [pc, #272]	; (8004960 <_Z12bldc_move_olv+0x23c>)
 800484e:	781b      	ldrb	r3, [r3, #0]
 8004850:	b2db      	uxtb	r3, r3
 8004852:	001a      	movs	r2, r3
 8004854:	4b44      	ldr	r3, [pc, #272]	; (8004968 <_Z12bldc_move_olv+0x244>)
 8004856:	0052      	lsls	r2, r2, #1
 8004858:	5ad3      	ldrh	r3, [r2, r3]
 800485a:	43d9      	mvns	r1, r3
 800485c:	4b43      	ldr	r3, [pc, #268]	; (800496c <_Z12bldc_move_olv+0x248>)
 800485e:	6a1a      	ldr	r2, [r3, #32]
 8004860:	4b42      	ldr	r3, [pc, #264]	; (800496c <_Z12bldc_move_olv+0x248>)
 8004862:	400a      	ands	r2, r1
 8004864:	621a      	str	r2, [r3, #32]
			HAL_GPIO_WritePin(BLow_GPIO_Port, BLow_Pin, GPIO_PIN_SET);
 8004866:	4b43      	ldr	r3, [pc, #268]	; (8004974 <_Z12bldc_move_olv+0x250>)
 8004868:	2201      	movs	r2, #1
 800486a:	2140      	movs	r1, #64	; 0x40
 800486c:	0018      	movs	r0, r3
 800486e:	f7fc ffbe 	bl	80017ee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CLow_GPIO_Port, CLow_Pin, GPIO_PIN_SET);
 8004872:	2380      	movs	r3, #128	; 0x80
 8004874:	021b      	lsls	r3, r3, #8
 8004876:	483e      	ldr	r0, [pc, #248]	; (8004970 <_Z12bldc_move_olv+0x24c>)
 8004878:	2201      	movs	r2, #1
 800487a:	0019      	movs	r1, r3
 800487c:	f7fc ffb7 	bl	80017ee <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(ALow_GPIO_Port, ALow_Pin, GPIO_PIN_RESET);
 8004880:	4b3c      	ldr	r3, [pc, #240]	; (8004974 <_Z12bldc_move_olv+0x250>)
 8004882:	2200      	movs	r2, #0
 8004884:	2180      	movs	r1, #128	; 0x80
 8004886:	0018      	movs	r0, r3
 8004888:	f7fc ffb1 	bl	80017ee <HAL_GPIO_WritePin>
			//HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_2, (uint32_t*)&speed, 1);
			TIM1->CCER |= PWM_CCER_ONMASK[bldc_state];
 800488c:	4b34      	ldr	r3, [pc, #208]	; (8004960 <_Z12bldc_move_olv+0x23c>)
 800488e:	781b      	ldrb	r3, [r3, #0]
 8004890:	b2db      	uxtb	r3, r3
 8004892:	001a      	movs	r2, r3
 8004894:	4b38      	ldr	r3, [pc, #224]	; (8004978 <_Z12bldc_move_olv+0x254>)
 8004896:	0052      	lsls	r2, r2, #1
 8004898:	5ad1      	ldrh	r1, [r2, r3]
 800489a:	4b34      	ldr	r3, [pc, #208]	; (800496c <_Z12bldc_move_olv+0x248>)
 800489c:	6a1a      	ldr	r2, [r3, #32]
 800489e:	4b33      	ldr	r3, [pc, #204]	; (800496c <_Z12bldc_move_olv+0x248>)
 80048a0:	430a      	orrs	r2, r1
 80048a2:	621a      	str	r2, [r3, #32]
			break;
 80048a4:	e059      	b.n	800495a <_Z12bldc_move_olv+0x236>

		case 4:
			//A low, B off, C high
//			HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
//			HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_2);
			TIM1->CCER &= ~PWM_CCER_OFFMASK[bldc_state];
 80048a6:	4b2e      	ldr	r3, [pc, #184]	; (8004960 <_Z12bldc_move_olv+0x23c>)
 80048a8:	781b      	ldrb	r3, [r3, #0]
 80048aa:	b2db      	uxtb	r3, r3
 80048ac:	001a      	movs	r2, r3
 80048ae:	4b2e      	ldr	r3, [pc, #184]	; (8004968 <_Z12bldc_move_olv+0x244>)
 80048b0:	0052      	lsls	r2, r2, #1
 80048b2:	5ad3      	ldrh	r3, [r2, r3]
 80048b4:	43d9      	mvns	r1, r3
 80048b6:	4b2d      	ldr	r3, [pc, #180]	; (800496c <_Z12bldc_move_olv+0x248>)
 80048b8:	6a1a      	ldr	r2, [r3, #32]
 80048ba:	4b2c      	ldr	r3, [pc, #176]	; (800496c <_Z12bldc_move_olv+0x248>)
 80048bc:	400a      	ands	r2, r1
 80048be:	621a      	str	r2, [r3, #32]
			HAL_GPIO_WritePin(BLow_GPIO_Port, BLow_Pin, GPIO_PIN_SET);
 80048c0:	4b2c      	ldr	r3, [pc, #176]	; (8004974 <_Z12bldc_move_olv+0x250>)
 80048c2:	2201      	movs	r2, #1
 80048c4:	2140      	movs	r1, #64	; 0x40
 80048c6:	0018      	movs	r0, r3
 80048c8:	f7fc ff91 	bl	80017ee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CLow_GPIO_Port, CLow_Pin, GPIO_PIN_SET);
 80048cc:	2380      	movs	r3, #128	; 0x80
 80048ce:	021b      	lsls	r3, r3, #8
 80048d0:	4827      	ldr	r0, [pc, #156]	; (8004970 <_Z12bldc_move_olv+0x24c>)
 80048d2:	2201      	movs	r2, #1
 80048d4:	0019      	movs	r1, r3
 80048d6:	f7fc ff8a 	bl	80017ee <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(ALow_GPIO_Port, ALow_Pin, GPIO_PIN_RESET);
 80048da:	4b26      	ldr	r3, [pc, #152]	; (8004974 <_Z12bldc_move_olv+0x250>)
 80048dc:	2200      	movs	r2, #0
 80048de:	2180      	movs	r1, #128	; 0x80
 80048e0:	0018      	movs	r0, r3
 80048e2:	f7fc ff84 	bl	80017ee <HAL_GPIO_WritePin>
			//HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_3, (uint32_t*)&speed, 1);
			TIM1->CCER |= PWM_CCER_ONMASK[bldc_state];
 80048e6:	4b1e      	ldr	r3, [pc, #120]	; (8004960 <_Z12bldc_move_olv+0x23c>)
 80048e8:	781b      	ldrb	r3, [r3, #0]
 80048ea:	b2db      	uxtb	r3, r3
 80048ec:	001a      	movs	r2, r3
 80048ee:	4b22      	ldr	r3, [pc, #136]	; (8004978 <_Z12bldc_move_olv+0x254>)
 80048f0:	0052      	lsls	r2, r2, #1
 80048f2:	5ad1      	ldrh	r1, [r2, r3]
 80048f4:	4b1d      	ldr	r3, [pc, #116]	; (800496c <_Z12bldc_move_olv+0x248>)
 80048f6:	6a1a      	ldr	r2, [r3, #32]
 80048f8:	4b1c      	ldr	r3, [pc, #112]	; (800496c <_Z12bldc_move_olv+0x248>)
 80048fa:	430a      	orrs	r2, r1
 80048fc:	621a      	str	r2, [r3, #32]
			break;
 80048fe:	e02c      	b.n	800495a <_Z12bldc_move_olv+0x236>

		case 5:
			//A off, B low, C high
//			HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
//			HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_2);
			TIM1->CCER &= ~PWM_CCER_OFFMASK[bldc_state];
 8004900:	4b17      	ldr	r3, [pc, #92]	; (8004960 <_Z12bldc_move_olv+0x23c>)
 8004902:	781b      	ldrb	r3, [r3, #0]
 8004904:	b2db      	uxtb	r3, r3
 8004906:	001a      	movs	r2, r3
 8004908:	4b17      	ldr	r3, [pc, #92]	; (8004968 <_Z12bldc_move_olv+0x244>)
 800490a:	0052      	lsls	r2, r2, #1
 800490c:	5ad3      	ldrh	r3, [r2, r3]
 800490e:	43d9      	mvns	r1, r3
 8004910:	4b16      	ldr	r3, [pc, #88]	; (800496c <_Z12bldc_move_olv+0x248>)
 8004912:	6a1a      	ldr	r2, [r3, #32]
 8004914:	4b15      	ldr	r3, [pc, #84]	; (800496c <_Z12bldc_move_olv+0x248>)
 8004916:	400a      	ands	r2, r1
 8004918:	621a      	str	r2, [r3, #32]
			HAL_GPIO_WritePin(ALow_GPIO_Port, ALow_Pin, GPIO_PIN_SET);
 800491a:	4b16      	ldr	r3, [pc, #88]	; (8004974 <_Z12bldc_move_olv+0x250>)
 800491c:	2201      	movs	r2, #1
 800491e:	2180      	movs	r1, #128	; 0x80
 8004920:	0018      	movs	r0, r3
 8004922:	f7fc ff64 	bl	80017ee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CLow_GPIO_Port, CLow_Pin, GPIO_PIN_SET);
 8004926:	2380      	movs	r3, #128	; 0x80
 8004928:	021b      	lsls	r3, r3, #8
 800492a:	4811      	ldr	r0, [pc, #68]	; (8004970 <_Z12bldc_move_olv+0x24c>)
 800492c:	2201      	movs	r2, #1
 800492e:	0019      	movs	r1, r3
 8004930:	f7fc ff5d 	bl	80017ee <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(BLow_GPIO_Port, BLow_Pin, GPIO_PIN_RESET);
 8004934:	4b0f      	ldr	r3, [pc, #60]	; (8004974 <_Z12bldc_move_olv+0x250>)
 8004936:	2200      	movs	r2, #0
 8004938:	2140      	movs	r1, #64	; 0x40
 800493a:	0018      	movs	r0, r3
 800493c:	f7fc ff57 	bl	80017ee <HAL_GPIO_WritePin>
			//HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_3, (uint32_t*)&speed, 1);
			TIM1->CCER |= PWM_CCER_ONMASK[bldc_state];
 8004940:	4b07      	ldr	r3, [pc, #28]	; (8004960 <_Z12bldc_move_olv+0x23c>)
 8004942:	781b      	ldrb	r3, [r3, #0]
 8004944:	b2db      	uxtb	r3, r3
 8004946:	001a      	movs	r2, r3
 8004948:	4b0b      	ldr	r3, [pc, #44]	; (8004978 <_Z12bldc_move_olv+0x254>)
 800494a:	0052      	lsls	r2, r2, #1
 800494c:	5ad1      	ldrh	r1, [r2, r3]
 800494e:	4b07      	ldr	r3, [pc, #28]	; (800496c <_Z12bldc_move_olv+0x248>)
 8004950:	6a1a      	ldr	r2, [r3, #32]
 8004952:	4b06      	ldr	r3, [pc, #24]	; (800496c <_Z12bldc_move_olv+0x248>)
 8004954:	430a      	orrs	r2, r1
 8004956:	621a      	str	r2, [r3, #32]
			break;
 8004958:	46c0      	nop			; (mov r8, r8)

	}
}
 800495a:	46c0      	nop			; (mov r8, r8)
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}
 8004960:	200001d8 	.word	0x200001d8
 8004964:	08004e9c 	.word	0x08004e9c
 8004968:	20000018 	.word	0x20000018
 800496c:	40012c00 	.word	0x40012c00
 8004970:	48000400 	.word	0x48000400
 8004974:	48000800 	.word	0x48000800
 8004978:	2000000c 	.word	0x2000000c

0800497c <_Z7all_offv>:

void all_off() {
 800497c:	b580      	push	{r7, lr}
 800497e:	af00      	add	r7, sp, #0
	//HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
	//HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_2);
	//HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_3);
	TIM1->CCER &= ~( 1 | 1<<4 | 1<<8 );
 8004980:	4b28      	ldr	r3, [pc, #160]	; (8004a24 <_Z7all_offv+0xa8>)
 8004982:	6a1a      	ldr	r2, [r3, #32]
 8004984:	4b27      	ldr	r3, [pc, #156]	; (8004a24 <_Z7all_offv+0xa8>)
 8004986:	4928      	ldr	r1, [pc, #160]	; (8004a28 <_Z7all_offv+0xac>)
 8004988:	400a      	ands	r2, r1
 800498a:	621a      	str	r2, [r3, #32]

	HAL_GPIO_WritePin(ALow_GPIO_Port, ALow_Pin, GPIO_PIN_SET);
 800498c:	4b27      	ldr	r3, [pc, #156]	; (8004a2c <_Z7all_offv+0xb0>)
 800498e:	2201      	movs	r2, #1
 8004990:	2180      	movs	r1, #128	; 0x80
 8004992:	0018      	movs	r0, r3
 8004994:	f7fc ff2b 	bl	80017ee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BLow_GPIO_Port, BLow_Pin, GPIO_PIN_SET);
 8004998:	4b24      	ldr	r3, [pc, #144]	; (8004a2c <_Z7all_offv+0xb0>)
 800499a:	2201      	movs	r2, #1
 800499c:	2140      	movs	r1, #64	; 0x40
 800499e:	0018      	movs	r0, r3
 80049a0:	f7fc ff25 	bl	80017ee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CLow_GPIO_Port, CLow_Pin, GPIO_PIN_SET);
 80049a4:	2380      	movs	r3, #128	; 0x80
 80049a6:	021b      	lsls	r3, r3, #8
 80049a8:	4821      	ldr	r0, [pc, #132]	; (8004a30 <_Z7all_offv+0xb4>)
 80049aa:	2201      	movs	r2, #1
 80049ac:	0019      	movs	r1, r3
 80049ae:	f7fc ff1e 	bl	80017ee <HAL_GPIO_WritePin>

	EXTI->RTSR &= ~(1<<0);
 80049b2:	4b20      	ldr	r3, [pc, #128]	; (8004a34 <_Z7all_offv+0xb8>)
 80049b4:	689a      	ldr	r2, [r3, #8]
 80049b6:	4b1f      	ldr	r3, [pc, #124]	; (8004a34 <_Z7all_offv+0xb8>)
 80049b8:	2101      	movs	r1, #1
 80049ba:	438a      	bics	r2, r1
 80049bc:	609a      	str	r2, [r3, #8]
	EXTI->RTSR &= ~(1<<2);
 80049be:	4b1d      	ldr	r3, [pc, #116]	; (8004a34 <_Z7all_offv+0xb8>)
 80049c0:	689a      	ldr	r2, [r3, #8]
 80049c2:	4b1c      	ldr	r3, [pc, #112]	; (8004a34 <_Z7all_offv+0xb8>)
 80049c4:	2104      	movs	r1, #4
 80049c6:	438a      	bics	r2, r1
 80049c8:	609a      	str	r2, [r3, #8]
	EXTI->RTSR &= ~(1<<15);
 80049ca:	4b1a      	ldr	r3, [pc, #104]	; (8004a34 <_Z7all_offv+0xb8>)
 80049cc:	689a      	ldr	r2, [r3, #8]
 80049ce:	4b19      	ldr	r3, [pc, #100]	; (8004a34 <_Z7all_offv+0xb8>)
 80049d0:	4919      	ldr	r1, [pc, #100]	; (8004a38 <_Z7all_offv+0xbc>)
 80049d2:	400a      	ands	r2, r1
 80049d4:	609a      	str	r2, [r3, #8]

	EXTI->FTSR &= ~(1<<0);
 80049d6:	4b17      	ldr	r3, [pc, #92]	; (8004a34 <_Z7all_offv+0xb8>)
 80049d8:	68da      	ldr	r2, [r3, #12]
 80049da:	4b16      	ldr	r3, [pc, #88]	; (8004a34 <_Z7all_offv+0xb8>)
 80049dc:	2101      	movs	r1, #1
 80049de:	438a      	bics	r2, r1
 80049e0:	60da      	str	r2, [r3, #12]
	EXTI->FTSR &= ~(1<<2);
 80049e2:	4b14      	ldr	r3, [pc, #80]	; (8004a34 <_Z7all_offv+0xb8>)
 80049e4:	68da      	ldr	r2, [r3, #12]
 80049e6:	4b13      	ldr	r3, [pc, #76]	; (8004a34 <_Z7all_offv+0xb8>)
 80049e8:	2104      	movs	r1, #4
 80049ea:	438a      	bics	r2, r1
 80049ec:	60da      	str	r2, [r3, #12]
	EXTI->FTSR &= ~(1<<15);
 80049ee:	4b11      	ldr	r3, [pc, #68]	; (8004a34 <_Z7all_offv+0xb8>)
 80049f0:	68da      	ldr	r2, [r3, #12]
 80049f2:	4b10      	ldr	r3, [pc, #64]	; (8004a34 <_Z7all_offv+0xb8>)
 80049f4:	4910      	ldr	r1, [pc, #64]	; (8004a38 <_Z7all_offv+0xbc>)
 80049f6:	400a      	ands	r2, r1
 80049f8:	60da      	str	r2, [r3, #12]
	//Mask all but the specified interrupts
	//1 - nonmasked (ready to be used), 0 - masked (not being used)
	EXTI->IMR &= ~(1<<0);
 80049fa:	4b0e      	ldr	r3, [pc, #56]	; (8004a34 <_Z7all_offv+0xb8>)
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	4b0d      	ldr	r3, [pc, #52]	; (8004a34 <_Z7all_offv+0xb8>)
 8004a00:	2101      	movs	r1, #1
 8004a02:	438a      	bics	r2, r1
 8004a04:	601a      	str	r2, [r3, #0]
	EXTI->IMR &= ~(1<<2);
 8004a06:	4b0b      	ldr	r3, [pc, #44]	; (8004a34 <_Z7all_offv+0xb8>)
 8004a08:	681a      	ldr	r2, [r3, #0]
 8004a0a:	4b0a      	ldr	r3, [pc, #40]	; (8004a34 <_Z7all_offv+0xb8>)
 8004a0c:	2104      	movs	r1, #4
 8004a0e:	438a      	bics	r2, r1
 8004a10:	601a      	str	r2, [r3, #0]
	EXTI->IMR &= ~(1<<15);
 8004a12:	4b08      	ldr	r3, [pc, #32]	; (8004a34 <_Z7all_offv+0xb8>)
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	4b07      	ldr	r3, [pc, #28]	; (8004a34 <_Z7all_offv+0xb8>)
 8004a18:	4907      	ldr	r1, [pc, #28]	; (8004a38 <_Z7all_offv+0xbc>)
 8004a1a:	400a      	ands	r2, r1
 8004a1c:	601a      	str	r2, [r3, #0]
}
 8004a1e:	46c0      	nop			; (mov r8, r8)
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}
 8004a24:	40012c00 	.word	0x40012c00
 8004a28:	fffffeee 	.word	0xfffffeee
 8004a2c:	48000800 	.word	0x48000800
 8004a30:	48000400 	.word	0x48000400
 8004a34:	40010400 	.word	0x40010400
 8004a38:	ffff7fff 	.word	0xffff7fff

08004a3c <HAL_GPIO_EXTI_Callback>:
	else {
		return 50 - speed/10;
	}
}
uint16_t my_delay = 500;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b082      	sub	sp, #8
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	0002      	movs	r2, r0
 8004a44:	1dbb      	adds	r3, r7, #6
 8004a46:	801a      	strh	r2, [r3, #0]
	//Callback is called only by the specified edge of the specified pin's interrupt
	//It's called when ZC occurs, which lets us know to go to the next phase configuration (bldc_state)
	if (GPIO_Pin == nextITPin) {	//Additional check for ensuring expected interrupt is called
 8004a48:	4b2f      	ldr	r3, [pc, #188]	; (8004b08 <HAL_GPIO_EXTI_Callback+0xcc>)
 8004a4a:	881b      	ldrh	r3, [r3, #0]
 8004a4c:	b29b      	uxth	r3, r3
 8004a4e:	1dba      	adds	r2, r7, #6
 8004a50:	8812      	ldrh	r2, [r2, #0]
 8004a52:	1ad3      	subs	r3, r2, r3
 8004a54:	425a      	negs	r2, r3
 8004a56:	4153      	adcs	r3, r2
 8004a58:	b2db      	uxtb	r3, r3
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d050      	beq.n	8004b00 <HAL_GPIO_EXTI_Callback+0xc4>
		__HAL_TIM_SET_COUNTER(&htim6, 0);
 8004a5e:	4b2b      	ldr	r3, [pc, #172]	; (8004b0c <HAL_GPIO_EXTI_Callback+0xd0>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	2200      	movs	r2, #0
 8004a64:	625a      	str	r2, [r3, #36]	; 0x24
		//my_delay = speed_to_delay();
		//guser suggested to use 768+48 as the delay
		while (__HAL_TIM_GET_COUNTER(&htim6) < (400+48-(speed/2))) {
 8004a66:	4b29      	ldr	r3, [pc, #164]	; (8004b0c <HAL_GPIO_EXTI_Callback+0xd0>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a6c:	4a28      	ldr	r2, [pc, #160]	; (8004b10 <HAL_GPIO_EXTI_Callback+0xd4>)
 8004a6e:	8812      	ldrh	r2, [r2, #0]
 8004a70:	0852      	lsrs	r2, r2, #1
 8004a72:	b292      	uxth	r2, r2
 8004a74:	0011      	movs	r1, r2
 8004a76:	22e0      	movs	r2, #224	; 0xe0
 8004a78:	0052      	lsls	r2, r2, #1
 8004a7a:	1a52      	subs	r2, r2, r1
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	419b      	sbcs	r3, r3
 8004a80:	425b      	negs	r3, r3
 8004a82:	b2db      	uxtb	r3, r3
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d037      	beq.n	8004af8 <HAL_GPIO_EXTI_Callback+0xbc>
			//If it doesn't match, then it is probably noise

			//If pin is low on active rising edge interrupt line... BAD!
			//If pin is high on active falling edge IT line... BAD!
			//THEN BAD!
			if (EXTI->RTSR & 0xFFFF != 0) {
 8004a88:	4b22      	ldr	r3, [pc, #136]	; (8004b14 <HAL_GPIO_EXTI_Callback+0xd8>)
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	2201      	movs	r2, #1
 8004a8e:	4013      	ands	r3, r2
 8004a90:	1e5a      	subs	r2, r3, #1
 8004a92:	4193      	sbcs	r3, r2
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d012      	beq.n	8004ac0 <HAL_GPIO_EXTI_Callback+0x84>
				if ((zcPortOff[bldc_state]->IDR & (EXTI->RTSR & 0xFFFF)) == 0) {
 8004a9a:	4b1f      	ldr	r3, [pc, #124]	; (8004b18 <HAL_GPIO_EXTI_Callback+0xdc>)
 8004a9c:	781b      	ldrb	r3, [r3, #0]
 8004a9e:	b2db      	uxtb	r3, r3
 8004aa0:	001a      	movs	r2, r3
 8004aa2:	4b1e      	ldr	r3, [pc, #120]	; (8004b1c <HAL_GPIO_EXTI_Callback+0xe0>)
 8004aa4:	0092      	lsls	r2, r2, #2
 8004aa6:	58d3      	ldr	r3, [r2, r3]
 8004aa8:	691a      	ldr	r2, [r3, #16]
 8004aaa:	4b1a      	ldr	r3, [pc, #104]	; (8004b14 <HAL_GPIO_EXTI_Callback+0xd8>)
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	4013      	ands	r3, r2
 8004ab0:	041b      	lsls	r3, r3, #16
 8004ab2:	0c1b      	lsrs	r3, r3, #16
 8004ab4:	425a      	negs	r2, r3
 8004ab6:	4153      	adcs	r3, r2
 8004ab8:	b2db      	uxtb	r3, r3
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d0d3      	beq.n	8004a66 <HAL_GPIO_EXTI_Callback+0x2a>
					return;
 8004abe:	e01f      	b.n	8004b00 <HAL_GPIO_EXTI_Callback+0xc4>
				}
			}
			else if (EXTI->FTSR & 0xFFFF != 0) {
 8004ac0:	4b14      	ldr	r3, [pc, #80]	; (8004b14 <HAL_GPIO_EXTI_Callback+0xd8>)
 8004ac2:	68db      	ldr	r3, [r3, #12]
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	4013      	ands	r3, r2
 8004ac8:	1e5a      	subs	r2, r3, #1
 8004aca:	4193      	sbcs	r3, r2
 8004acc:	b2db      	uxtb	r3, r3
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d0c9      	beq.n	8004a66 <HAL_GPIO_EXTI_Callback+0x2a>
				if (zcPortOff[bldc_state]->IDR & (EXTI->RTSR & 0xFFFF)) {
 8004ad2:	4b11      	ldr	r3, [pc, #68]	; (8004b18 <HAL_GPIO_EXTI_Callback+0xdc>)
 8004ad4:	781b      	ldrb	r3, [r3, #0]
 8004ad6:	b2db      	uxtb	r3, r3
 8004ad8:	001a      	movs	r2, r3
 8004ada:	4b10      	ldr	r3, [pc, #64]	; (8004b1c <HAL_GPIO_EXTI_Callback+0xe0>)
 8004adc:	0092      	lsls	r2, r2, #2
 8004ade:	58d3      	ldr	r3, [r2, r3]
 8004ae0:	691a      	ldr	r2, [r3, #16]
 8004ae2:	4b0c      	ldr	r3, [pc, #48]	; (8004b14 <HAL_GPIO_EXTI_Callback+0xd8>)
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	4013      	ands	r3, r2
 8004ae8:	041b      	lsls	r3, r3, #16
 8004aea:	0c1b      	lsrs	r3, r3, #16
 8004aec:	1e5a      	subs	r2, r3, #1
 8004aee:	4193      	sbcs	r3, r2
 8004af0:	b2db      	uxtb	r3, r3
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d103      	bne.n	8004afe <HAL_GPIO_EXTI_Callback+0xc2>
		while (__HAL_TIM_GET_COUNTER(&htim6) < (400+48-(speed/2))) {
 8004af6:	e7b6      	b.n	8004a66 <HAL_GPIO_EXTI_Callback+0x2a>
					return;
				}
			}
		}
		bldc_move();
 8004af8:	f7ff fc86 	bl	8004408 <_Z9bldc_movev>
 8004afc:	e000      	b.n	8004b00 <HAL_GPIO_EXTI_Callback+0xc4>
					return;
 8004afe:	46c0      	nop			; (mov r8, r8)
		//Though all but the expected interrupt is disabled, sometimes strange pending interrupts appear, which ain't good
	}
}
 8004b00:	46bd      	mov	sp, r7
 8004b02:	b002      	add	sp, #8
 8004b04:	bd80      	pop	{r7, pc}
 8004b06:	46c0      	nop			; (mov r8, r8)
 8004b08:	200001da 	.word	0x200001da
 8004b0c:	200000ac 	.word	0x200000ac
 8004b10:	200000a6 	.word	0x200000a6
 8004b14:	40010400 	.word	0x40010400
 8004b18:	200001d8 	.word	0x200001d8
 8004b1c:	20000024 	.word	0x20000024

08004b20 <_Z5setupv>:

void setup() {
 8004b20:	b580      	push	{r7, lr}
 8004b22:	af00      	add	r7, sp, #0
	//Ensure all motor control signals and interrupts aren't active
	all_off();
 8004b24:	f7ff ff2a 	bl	800497c <_Z7all_offv>
	//Start safety timer
	if (HAL_TIM_Base_Start_IT(&htim2) != HAL_OK) {
 8004b28:	4b2a      	ldr	r3, [pc, #168]	; (8004bd4 <_Z5setupv+0xb4>)
 8004b2a:	0018      	movs	r0, r3
 8004b2c:	f7fd fb70 	bl	8002210 <HAL_TIM_Base_Start_IT>
 8004b30:	0003      	movs	r3, r0
 8004b32:	1e5a      	subs	r2, r3, #1
 8004b34:	4193      	sbcs	r3, r2
 8004b36:	b2db      	uxtb	r3, r3
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d001      	beq.n	8004b40 <_Z5setupv+0x20>
		Error_Handler();
 8004b3c:	f7fb ff66 	bl	8000a0c <Error_Handler>
	}
	//Control CAPTURE timer:
	HAL_TIM_IC_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t*)dmaSignal, 16);
 8004b40:	4a25      	ldr	r2, [pc, #148]	; (8004bd8 <_Z5setupv+0xb8>)
 8004b42:	4826      	ldr	r0, [pc, #152]	; (8004bdc <_Z5setupv+0xbc>)
 8004b44:	2310      	movs	r3, #16
 8004b46:	2100      	movs	r1, #0
 8004b48:	f7fd fe0a 	bl	8002760 <HAL_TIM_IC_Start_DMA>

	//Driver High pin PWM outputs
	if (HAL_TIM_Base_Start(&htim1) != HAL_OK) {
 8004b4c:	4b24      	ldr	r3, [pc, #144]	; (8004be0 <_Z5setupv+0xc0>)
 8004b4e:	0018      	movs	r0, r3
 8004b50:	f7fd fb14 	bl	800217c <HAL_TIM_Base_Start>
 8004b54:	0003      	movs	r3, r0
 8004b56:	1e5a      	subs	r2, r3, #1
 8004b58:	4193      	sbcs	r3, r2
 8004b5a:	b2db      	uxtb	r3, r3
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d001      	beq.n	8004b64 <_Z5setupv+0x44>
		Error_Handler();
 8004b60:	f7fb ff54 	bl	8000a0c <Error_Handler>
	}
	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t*)&speed, 1);
 8004b64:	4a1f      	ldr	r2, [pc, #124]	; (8004be4 <_Z5setupv+0xc4>)
 8004b66:	481e      	ldr	r0, [pc, #120]	; (8004be0 <_Z5setupv+0xc0>)
 8004b68:	2301      	movs	r3, #1
 8004b6a:	2100      	movs	r1, #0
 8004b6c:	f7fd fbf2 	bl	8002354 <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_2, (uint32_t*)&speed, 1);
 8004b70:	4a1c      	ldr	r2, [pc, #112]	; (8004be4 <_Z5setupv+0xc4>)
 8004b72:	481b      	ldr	r0, [pc, #108]	; (8004be0 <_Z5setupv+0xc0>)
 8004b74:	2301      	movs	r3, #1
 8004b76:	2104      	movs	r1, #4
 8004b78:	f7fd fbec 	bl	8002354 <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_3, (uint32_t*)&speed, 1);
 8004b7c:	4a19      	ldr	r2, [pc, #100]	; (8004be4 <_Z5setupv+0xc4>)
 8004b7e:	4818      	ldr	r0, [pc, #96]	; (8004be0 <_Z5setupv+0xc0>)
 8004b80:	2301      	movs	r3, #1
 8004b82:	2108      	movs	r1, #8
 8004b84:	f7fd fbe6 	bl	8002354 <HAL_TIM_PWM_Start_DMA>

	//Turn off the PWM signals (now we can control them using the CCER register)
	TIM1->CCER &= ~(1);
 8004b88:	4b17      	ldr	r3, [pc, #92]	; (8004be8 <_Z5setupv+0xc8>)
 8004b8a:	6a1a      	ldr	r2, [r3, #32]
 8004b8c:	4b16      	ldr	r3, [pc, #88]	; (8004be8 <_Z5setupv+0xc8>)
 8004b8e:	2101      	movs	r1, #1
 8004b90:	438a      	bics	r2, r1
 8004b92:	621a      	str	r2, [r3, #32]
	TIM1->CCER &= ~(1<<4);
 8004b94:	4b14      	ldr	r3, [pc, #80]	; (8004be8 <_Z5setupv+0xc8>)
 8004b96:	6a1a      	ldr	r2, [r3, #32]
 8004b98:	4b13      	ldr	r3, [pc, #76]	; (8004be8 <_Z5setupv+0xc8>)
 8004b9a:	2110      	movs	r1, #16
 8004b9c:	438a      	bics	r2, r1
 8004b9e:	621a      	str	r2, [r3, #32]
	TIM1->CCER &= ~(1<<8);
 8004ba0:	4b11      	ldr	r3, [pc, #68]	; (8004be8 <_Z5setupv+0xc8>)
 8004ba2:	6a1a      	ldr	r2, [r3, #32]
 8004ba4:	4b10      	ldr	r3, [pc, #64]	; (8004be8 <_Z5setupv+0xc8>)
 8004ba6:	4911      	ldr	r1, [pc, #68]	; (8004bec <_Z5setupv+0xcc>)
 8004ba8:	400a      	ands	r2, r1
 8004baa:	621a      	str	r2, [r3, #32]

	//Start delay timer
	if (HAL_TIM_Base_Start(&htim6) != HAL_OK) {
 8004bac:	4b10      	ldr	r3, [pc, #64]	; (8004bf0 <_Z5setupv+0xd0>)
 8004bae:	0018      	movs	r0, r3
 8004bb0:	f7fd fae4 	bl	800217c <HAL_TIM_Base_Start>
 8004bb4:	0003      	movs	r3, r0
 8004bb6:	1e5a      	subs	r2, r3, #1
 8004bb8:	4193      	sbcs	r3, r2
 8004bba:	b2db      	uxtb	r3, r3
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d001      	beq.n	8004bc4 <_Z5setupv+0xa4>
			Error_Handler();
 8004bc0:	f7fb ff24 	bl	8000a0c <Error_Handler>
//	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
//
//	HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
//	HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_2);
//	HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_3);
	HAL_TIM_Base_Start(&htim1);
 8004bc4:	4b06      	ldr	r3, [pc, #24]	; (8004be0 <_Z5setupv+0xc0>)
 8004bc6:	0018      	movs	r0, r3
 8004bc8:	f7fd fad8 	bl	800217c <HAL_TIM_Base_Start>
	//HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t*)speedArr, 3);
//	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_2, (uint32_t*)speed, 1);
//	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_3, (uint32_t*)speed, 1);
	//HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, pData, Length)
}
 8004bcc:	46c0      	nop			; (mov r8, r8)
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}
 8004bd2:	46c0      	nop			; (mov r8, r8)
 8004bd4:	2000013c 	.word	0x2000013c
 8004bd8:	20000064 	.word	0x20000064
 8004bdc:	200000f4 	.word	0x200000f4
 8004be0:	20000184 	.word	0x20000184
 8004be4:	200000a6 	.word	0x200000a6
 8004be8:	40012c00 	.word	0x40012c00
 8004bec:	fffffeff 	.word	0xfffffeff
 8004bf0:	200000ac 	.word	0x200000ac

08004bf4 <_Z7delay_ut>:



uint8_t it_count = 0;
uint16_t tim2cnt = 0;
void delay_u(uint16_t delay) {
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b082      	sub	sp, #8
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	0002      	movs	r2, r0
 8004bfc:	1dbb      	adds	r3, r7, #6
 8004bfe:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&htim6, 0);
 8004c00:	4b0b      	ldr	r3, [pc, #44]	; (8004c30 <_Z7delay_ut+0x3c>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	2200      	movs	r2, #0
 8004c06:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim6) < delay*48);
 8004c08:	4b09      	ldr	r3, [pc, #36]	; (8004c30 <_Z7delay_ut+0x3c>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004c0e:	1dbb      	adds	r3, r7, #6
 8004c10:	881a      	ldrh	r2, [r3, #0]
 8004c12:	0013      	movs	r3, r2
 8004c14:	005b      	lsls	r3, r3, #1
 8004c16:	189b      	adds	r3, r3, r2
 8004c18:	011b      	lsls	r3, r3, #4
 8004c1a:	4299      	cmp	r1, r3
 8004c1c:	419b      	sbcs	r3, r3
 8004c1e:	425b      	negs	r3, r3
 8004c20:	b2db      	uxtb	r3, r3
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d000      	beq.n	8004c28 <_Z7delay_ut+0x34>
 8004c26:	e7ef      	b.n	8004c08 <_Z7delay_ut+0x14>
}
 8004c28:	46c0      	nop			; (mov r8, r8)
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	b002      	add	sp, #8
 8004c2e:	bd80      	pop	{r7, pc}
 8004c30:	200000ac 	.word	0x200000ac

08004c34 <maincpp>:

void maincpp() {
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b082      	sub	sp, #8
 8004c38:	af00      	add	r7, sp, #0
	setup();
 8004c3a:	f7ff ff71 	bl	8004b20 <_Z5setupv>

	while(1) {
		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET) {
 8004c3e:	2390      	movs	r3, #144	; 0x90
 8004c40:	05db      	lsls	r3, r3, #23
 8004c42:	2101      	movs	r1, #1
 8004c44:	0018      	movs	r0, r3
 8004c46:	f7fc fdb5 	bl	80017b4 <HAL_GPIO_ReadPin>
 8004c4a:	0003      	movs	r3, r0
 8004c4c:	3b01      	subs	r3, #1
 8004c4e:	425a      	negs	r2, r3
 8004c50:	4153      	adcs	r3, r2
 8004c52:	b2db      	uxtb	r3, r3
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d014      	beq.n	8004c82 <maincpp+0x4e>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8004c58:	2380      	movs	r3, #128	; 0x80
 8004c5a:	009b      	lsls	r3, r3, #2
 8004c5c:	4857      	ldr	r0, [pc, #348]	; (8004dbc <maincpp+0x188>)
 8004c5e:	2201      	movs	r2, #1
 8004c60:	0019      	movs	r1, r3
 8004c62:	f7fc fdc4 	bl	80017ee <HAL_GPIO_WritePin>
			HAL_Delay(200);
 8004c66:	20c8      	movs	r0, #200	; 0xc8
 8004c68:	f7fc f99a 	bl	8000fa0 <HAL_Delay>
			//HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
			all_off();
 8004c6c:	f7ff fe86 	bl	800497c <_Z7all_offv>
			run_motor = run_motor ? 0 : 1;
 8004c70:	4b53      	ldr	r3, [pc, #332]	; (8004dc0 <maincpp+0x18c>)
 8004c72:	881b      	ldrh	r3, [r3, #0]
 8004c74:	425a      	negs	r2, r3
 8004c76:	4153      	adcs	r3, r2
 8004c78:	b2db      	uxtb	r3, r3
 8004c7a:	b29a      	uxth	r2, r3
 8004c7c:	4b50      	ldr	r3, [pc, #320]	; (8004dc0 <maincpp+0x18c>)
 8004c7e:	801a      	strh	r2, [r3, #0]
 8004c80:	e006      	b.n	8004c90 <maincpp+0x5c>

		}
		else {
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8004c82:	2380      	movs	r3, #128	; 0x80
 8004c84:	009b      	lsls	r3, r3, #2
 8004c86:	484d      	ldr	r0, [pc, #308]	; (8004dbc <maincpp+0x188>)
 8004c88:	2200      	movs	r2, #0
 8004c8a:	0019      	movs	r1, r3
 8004c8c:	f7fc fdaf 	bl	80017ee <HAL_GPIO_WritePin>
			//Open-loop commutation

		}

		if (run_motor) {
 8004c90:	4b4b      	ldr	r3, [pc, #300]	; (8004dc0 <maincpp+0x18c>)
 8004c92:	881b      	ldrh	r3, [r3, #0]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d100      	bne.n	8004c9a <maincpp+0x66>
 8004c98:	e082      	b.n	8004da0 <maincpp+0x16c>
			if (run_motor<200) {
 8004c9a:	4b49      	ldr	r3, [pc, #292]	; (8004dc0 <maincpp+0x18c>)
 8004c9c:	881b      	ldrh	r3, [r3, #0]
 8004c9e:	2bc7      	cmp	r3, #199	; 0xc7
 8004ca0:	d846      	bhi.n	8004d30 <maincpp+0xfc>
				int16_t i = 1000;
 8004ca2:	1dbb      	adds	r3, r7, #6
 8004ca4:	22fa      	movs	r2, #250	; 0xfa
 8004ca6:	0092      	lsls	r2, r2, #2
 8004ca8:	801a      	strh	r2, [r3, #0]
//					bldc_state %= 6;
//					bldc_move_ol();
//
//					i=i-20;
//				}
				speed = 150;
 8004caa:	4b46      	ldr	r3, [pc, #280]	; (8004dc4 <maincpp+0x190>)
 8004cac:	2296      	movs	r2, #150	; 0x96
 8004cae:	801a      	strh	r2, [r3, #0]
				while (i > 100) {
 8004cb0:	1dbb      	adds	r3, r7, #6
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	5e9b      	ldrsh	r3, [r3, r2]
 8004cb6:	2b64      	cmp	r3, #100	; 0x64
 8004cb8:	dd33      	ble.n	8004d22 <maincpp+0xee>
					delay_u(i);
 8004cba:	1dbb      	adds	r3, r7, #6
 8004cbc:	881b      	ldrh	r3, [r3, #0]
 8004cbe:	0018      	movs	r0, r3
 8004cc0:	f7ff ff98 	bl	8004bf4 <_Z7delay_ut>
					delay_u(i);
 8004cc4:	1dbb      	adds	r3, r7, #6
 8004cc6:	881b      	ldrh	r3, [r3, #0]
 8004cc8:	0018      	movs	r0, r3
 8004cca:	f7ff ff93 	bl	8004bf4 <_Z7delay_ut>
					delay_u(i);
 8004cce:	1dbb      	adds	r3, r7, #6
 8004cd0:	881b      	ldrh	r3, [r3, #0]
 8004cd2:	0018      	movs	r0, r3
 8004cd4:	f7ff ff8e 	bl	8004bf4 <_Z7delay_ut>
					delay_u(i);
 8004cd8:	1dbb      	adds	r3, r7, #6
 8004cda:	881b      	ldrh	r3, [r3, #0]
 8004cdc:	0018      	movs	r0, r3
 8004cde:	f7ff ff89 	bl	8004bf4 <_Z7delay_ut>
					delay_u(i);
 8004ce2:	1dbb      	adds	r3, r7, #6
 8004ce4:	881b      	ldrh	r3, [r3, #0]
 8004ce6:	0018      	movs	r0, r3
 8004ce8:	f7ff ff84 	bl	8004bf4 <_Z7delay_ut>
					bldc_state++;
 8004cec:	4b36      	ldr	r3, [pc, #216]	; (8004dc8 <maincpp+0x194>)
 8004cee:	781b      	ldrb	r3, [r3, #0]
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	3301      	adds	r3, #1
 8004cf4:	b2da      	uxtb	r2, r3
 8004cf6:	4b34      	ldr	r3, [pc, #208]	; (8004dc8 <maincpp+0x194>)
 8004cf8:	701a      	strb	r2, [r3, #0]
					bldc_state %= 6;
 8004cfa:	4b33      	ldr	r3, [pc, #204]	; (8004dc8 <maincpp+0x194>)
 8004cfc:	781b      	ldrb	r3, [r3, #0]
 8004cfe:	b2db      	uxtb	r3, r3
 8004d00:	2106      	movs	r1, #6
 8004d02:	0018      	movs	r0, r3
 8004d04:	f7fb fa86 	bl	8000214 <__aeabi_uidivmod>
 8004d08:	000b      	movs	r3, r1
 8004d0a:	b2da      	uxtb	r2, r3
 8004d0c:	4b2e      	ldr	r3, [pc, #184]	; (8004dc8 <maincpp+0x194>)
 8004d0e:	701a      	strb	r2, [r3, #0]
					bldc_move_ol();
 8004d10:	f7ff fd08 	bl	8004724 <_Z12bldc_move_olv>

					i=i-4;
 8004d14:	1dbb      	adds	r3, r7, #6
 8004d16:	881b      	ldrh	r3, [r3, #0]
 8004d18:	3b04      	subs	r3, #4
 8004d1a:	b29a      	uxth	r2, r3
 8004d1c:	1dbb      	adds	r3, r7, #6
 8004d1e:	801a      	strh	r2, [r3, #0]
				while (i > 100) {
 8004d20:	e7c6      	b.n	8004cb0 <maincpp+0x7c>
				}
				i = 0;
 8004d22:	1dbb      	adds	r3, r7, #6
 8004d24:	2200      	movs	r2, #0
 8004d26:	801a      	strh	r2, [r3, #0]
//					bldc_state %= 6;
//					bldc_move_ol();
//
//					i++;
//				}
				run_motor = 200;
 8004d28:	4b25      	ldr	r3, [pc, #148]	; (8004dc0 <maincpp+0x18c>)
 8004d2a:	22c8      	movs	r2, #200	; 0xc8
 8004d2c:	801a      	strh	r2, [r3, #0]
 8004d2e:	e037      	b.n	8004da0 <maincpp+0x16c>
//				HAL_Delay(20);
//				run_motor++;
			}
			else {
				//speed=20;
				if (run_motor==200) {
 8004d30:	4b23      	ldr	r3, [pc, #140]	; (8004dc0 <maincpp+0x18c>)
 8004d32:	881b      	ldrh	r3, [r3, #0]
 8004d34:	2bc8      	cmp	r3, #200	; 0xc8
 8004d36:	d133      	bne.n	8004da0 <maincpp+0x16c>
					run_motor++;
 8004d38:	4b21      	ldr	r3, [pc, #132]	; (8004dc0 <maincpp+0x18c>)
 8004d3a:	881b      	ldrh	r3, [r3, #0]
 8004d3c:	3301      	adds	r3, #1
 8004d3e:	b29a      	uxth	r2, r3
 8004d40:	4b1f      	ldr	r3, [pc, #124]	; (8004dc0 <maincpp+0x18c>)
 8004d42:	801a      	strh	r2, [r3, #0]
					switch(bldc_state) {
 8004d44:	4b20      	ldr	r3, [pc, #128]	; (8004dc8 <maincpp+0x194>)
 8004d46:	781b      	ldrb	r3, [r3, #0]
 8004d48:	b2db      	uxtb	r3, r3
 8004d4a:	2b05      	cmp	r3, #5
 8004d4c:	d828      	bhi.n	8004da0 <maincpp+0x16c>
 8004d4e:	009a      	lsls	r2, r3, #2
 8004d50:	4b1e      	ldr	r3, [pc, #120]	; (8004dcc <maincpp+0x198>)
 8004d52:	18d3      	adds	r3, r2, r3
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	469f      	mov	pc, r3
						case 0:
							nextITPin = ZC_C_Pin;
 8004d58:	4b1d      	ldr	r3, [pc, #116]	; (8004dd0 <maincpp+0x19c>)
 8004d5a:	4a1e      	ldr	r2, [pc, #120]	; (8004dd4 <maincpp+0x1a0>)
 8004d5c:	801a      	strh	r2, [r3, #0]
							C_FALLING();
 8004d5e:	f7ff fb09 	bl	8004374 <_Z9C_FALLINGv>
							break;
 8004d62:	e01d      	b.n	8004da0 <maincpp+0x16c>
						case 1:
							nextITPin = ZC_B_Pin;
 8004d64:	4b1a      	ldr	r3, [pc, #104]	; (8004dd0 <maincpp+0x19c>)
 8004d66:	2204      	movs	r2, #4
 8004d68:	801a      	strh	r2, [r3, #0]
							B_RISING();
 8004d6a:	f7ff fa29 	bl	80041c0 <_Z8B_RISINGv>
							break;
 8004d6e:	e017      	b.n	8004da0 <maincpp+0x16c>
						case 2:
							nextITPin = ZC_A_Pin;
 8004d70:	4b17      	ldr	r3, [pc, #92]	; (8004dd0 <maincpp+0x19c>)
 8004d72:	2201      	movs	r2, #1
 8004d74:	801a      	strh	r2, [r3, #0]
							A_FALLING();
 8004d76:	f7ff f9db 	bl	8004130 <_Z9A_FALLINGv>
							break;
 8004d7a:	e011      	b.n	8004da0 <maincpp+0x16c>
						case 3:
							nextITPin = ZC_C_Pin;
 8004d7c:	4b14      	ldr	r3, [pc, #80]	; (8004dd0 <maincpp+0x19c>)
 8004d7e:	4a15      	ldr	r2, [pc, #84]	; (8004dd4 <maincpp+0x1a0>)
 8004d80:	801a      	strh	r2, [r3, #0]
							C_RISING();
 8004d82:	f7ff faad 	bl	80042e0 <_Z8C_RISINGv>
							break;
 8004d86:	e00b      	b.n	8004da0 <maincpp+0x16c>
						case 4:
							nextITPin = ZC_B_Pin;
 8004d88:	4b11      	ldr	r3, [pc, #68]	; (8004dd0 <maincpp+0x19c>)
 8004d8a:	2204      	movs	r2, #4
 8004d8c:	801a      	strh	r2, [r3, #0]
							B_FALLING();
 8004d8e:	f7ff fa5f 	bl	8004250 <_Z9B_FALLINGv>
							break;
 8004d92:	e005      	b.n	8004da0 <maincpp+0x16c>
						case 5:
							nextITPin = ZC_A_Pin;
 8004d94:	4b0e      	ldr	r3, [pc, #56]	; (8004dd0 <maincpp+0x19c>)
 8004d96:	2201      	movs	r2, #1
 8004d98:	801a      	strh	r2, [r3, #0]
							A_RISING();
 8004d9a:	f7ff f981 	bl	80040a0 <_Z8A_RISINGv>
							break;
 8004d9e:	46c0      	nop			; (mov r8, r8)
				}
			}

		}

		if (newDmaSignal) {
 8004da0:	4b0d      	ldr	r3, [pc, #52]	; (8004dd8 <maincpp+0x1a4>)
 8004da2:	781b      	ldrb	r3, [r3, #0]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d100      	bne.n	8004daa <maincpp+0x176>
 8004da8:	e749      	b.n	8004c3e <maincpp+0xa>
			//Begin to transfer data obtained from timer to memory
			HAL_TIM_IC_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t*)dmaSignal, 16);
 8004daa:	4a0c      	ldr	r2, [pc, #48]	; (8004ddc <maincpp+0x1a8>)
 8004dac:	480c      	ldr	r0, [pc, #48]	; (8004de0 <maincpp+0x1ac>)
 8004dae:	2310      	movs	r3, #16
 8004db0:	2100      	movs	r1, #0
 8004db2:	f7fd fcd5 	bl	8002760 <HAL_TIM_IC_Start_DMA>
			//Process this data (the times of different rising and falling edges being detected
			processDmaSignal();
 8004db6:	f7ff f8bf 	bl	8003f38 <_Z16processDmaSignalv>
		}

	}
 8004dba:	e740      	b.n	8004c3e <maincpp+0xa>
 8004dbc:	48000800 	.word	0x48000800
 8004dc0:	200001d6 	.word	0x200001d6
 8004dc4:	200000a6 	.word	0x200000a6
 8004dc8:	200001d8 	.word	0x200001d8
 8004dcc:	08004eb4 	.word	0x08004eb4
 8004dd0:	200001da 	.word	0x200001da
 8004dd4:	ffff8000 	.word	0xffff8000
 8004dd8:	200000a4 	.word	0x200000a4
 8004ddc:	20000064 	.word	0x20000064
 8004de0:	200000f4 	.word	0x200000f4

08004de4 <__libc_init_array>:
 8004de4:	b570      	push	{r4, r5, r6, lr}
 8004de6:	2600      	movs	r6, #0
 8004de8:	4d0c      	ldr	r5, [pc, #48]	; (8004e1c <__libc_init_array+0x38>)
 8004dea:	4c0d      	ldr	r4, [pc, #52]	; (8004e20 <__libc_init_array+0x3c>)
 8004dec:	1b64      	subs	r4, r4, r5
 8004dee:	10a4      	asrs	r4, r4, #2
 8004df0:	42a6      	cmp	r6, r4
 8004df2:	d109      	bne.n	8004e08 <__libc_init_array+0x24>
 8004df4:	2600      	movs	r6, #0
 8004df6:	f000 f821 	bl	8004e3c <_init>
 8004dfa:	4d0a      	ldr	r5, [pc, #40]	; (8004e24 <__libc_init_array+0x40>)
 8004dfc:	4c0a      	ldr	r4, [pc, #40]	; (8004e28 <__libc_init_array+0x44>)
 8004dfe:	1b64      	subs	r4, r4, r5
 8004e00:	10a4      	asrs	r4, r4, #2
 8004e02:	42a6      	cmp	r6, r4
 8004e04:	d105      	bne.n	8004e12 <__libc_init_array+0x2e>
 8004e06:	bd70      	pop	{r4, r5, r6, pc}
 8004e08:	00b3      	lsls	r3, r6, #2
 8004e0a:	58eb      	ldr	r3, [r5, r3]
 8004e0c:	4798      	blx	r3
 8004e0e:	3601      	adds	r6, #1
 8004e10:	e7ee      	b.n	8004df0 <__libc_init_array+0xc>
 8004e12:	00b3      	lsls	r3, r6, #2
 8004e14:	58eb      	ldr	r3, [r5, r3]
 8004e16:	4798      	blx	r3
 8004e18:	3601      	adds	r6, #1
 8004e1a:	e7f2      	b.n	8004e02 <__libc_init_array+0x1e>
 8004e1c:	08004ecc 	.word	0x08004ecc
 8004e20:	08004ecc 	.word	0x08004ecc
 8004e24:	08004ecc 	.word	0x08004ecc
 8004e28:	08004ed0 	.word	0x08004ed0

08004e2c <memset>:
 8004e2c:	0003      	movs	r3, r0
 8004e2e:	1882      	adds	r2, r0, r2
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d100      	bne.n	8004e36 <memset+0xa>
 8004e34:	4770      	bx	lr
 8004e36:	7019      	strb	r1, [r3, #0]
 8004e38:	3301      	adds	r3, #1
 8004e3a:	e7f9      	b.n	8004e30 <memset+0x4>

08004e3c <_init>:
 8004e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e3e:	46c0      	nop			; (mov r8, r8)
 8004e40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e42:	bc08      	pop	{r3}
 8004e44:	469e      	mov	lr, r3
 8004e46:	4770      	bx	lr

08004e48 <_fini>:
 8004e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e4a:	46c0      	nop			; (mov r8, r8)
 8004e4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e4e:	bc08      	pop	{r3}
 8004e50:	469e      	mov	lr, r3
 8004e52:	4770      	bx	lr
